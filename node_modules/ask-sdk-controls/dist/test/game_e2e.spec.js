"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameManager = void 0;
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const src_1 = require("../src");
const Strings_1 = require("../src/constants/Strings");
const ControlManager_1 = require("../src/controls/ControlManager");
const GeneralControlIntent_1 = require("../src/intents/GeneralControlIntent");
const OrdinalControlIntent_1 = require("../src/intents/OrdinalControlIntent");
const ControlHandler_1 = require("../src/runtime/ControlHandler");
const SessionBehavior_1 = require("../src/runtime/SessionBehavior");
const InitiativeActs_1 = require("../src/systemActs/InitiativeActs");
const InputUtil_1 = require("../src/utils/InputUtil");
const IntentUtils_1 = require("../src/utils/IntentUtils");
const SkillInvoker_1 = require("../src/utils/testSupport/SkillInvoker");
const SkillWrapper_1 = require("../src/utils/testSupport/SkillWrapper");
const TestingUtils_1 = require("../src/utils/testSupport/TestingUtils");
const game_strings_1 = require("./game_strings");
TestingUtils_1.waitForDebugger();
mocha_1.suite("== game_e2e.ts ==", () => {
    mocha_1.suite("== demo game UI, directly hitting coreProcess() ==", () => {
        mocha_1.test("direct set a few values across player and pet containers", async () => {
            const rootControl = new GameManager().createControlTree();
            const result1 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.Name, 'CUSTOM.name': "Mike" })));
            const result2 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.NUMBER, { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.Age, 'AMAZON.NUMBER': "20" })));
            const result3 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('PlayerClass', { action: Strings_1.Strings.Action.Set, target: game_strings_1.GameStrings.Target.CharClass, PlayerClass: 'elf' })));
            chai_1.expect(result3.acts).length(2);
            chai_1.expect(result3.acts[0]).instanceOf(src_1.ValueSetAct);
            chai_1.expect(result3.acts[1]).instanceOf(InitiativeActs_1.RequestValueByListAct);
            chai_1.expect(result3.acts[1].control.id).equals(game_strings_1.GameStrings.ID.PetSpecies);
            const result4 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('PetSpecies', { action: Strings_1.Strings.Action.Set, target: game_strings_1.GameStrings.Target.Species, PetSpecies: 'cat' })));
            const result5 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.PetName, 'CUSTOM.name': "Coco" })));
            chai_1.expect(result5.acts).length(1);
            chai_1.expect(result5.acts[0]).instanceOf(src_1.ValueSetAct);
            chai_1.expect(result5.sessionBehavior).equals(SessionBehavior_1.SessionBehavior.OPEN);
            chai_1.expect(TestingUtils_1.findControlById(rootControl, game_strings_1.GameStrings.ID.PetName).state.value).eq("Coco");
        });
        mocha_1.test("request class value (by list)", async () => {
            const rootControl = new GameManager().createControlTree();
            const result1 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Set, target: game_strings_1.GameStrings.Target.CharClass })));
            chai_1.expect(result1.acts).length(1);
            chai_1.expect(result1.acts[0]).instanceOf(InitiativeActs_1.RequestValueByListAct);
            const result2 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('PlayerClass', { action: Strings_1.Strings.Action.Set, target: game_strings_1.GameStrings.Target.CharClass, PlayerClass: game_strings_1.GameStrings.Value.Elf })));
            chai_1.expect(result2.acts).length(2);
            chai_1.expect(result2.acts[0]).instanceOf(src_1.ValueSetAct);
            chai_1.expect(result2.acts[1]).instanceOf(src_1.RequestValueAct);
            chai_1.expect(result2.acts[1].control.id).equal(game_strings_1.GameStrings.ID.PlayerName);
        });
        mocha_1.test("custom intent setting multiple values via MultiValueContainerControl", async () => {
            const rootControl = new GameManager().createControlTree();
            const input = TestingUtils_1.TestInput.of(IntentUtils_1.IntentBuilder.of("MySetPlayerIntent", {
                name: "Mike",
                class: "human",
                age: "20"
            }));
            const result = await TestingUtils_1.simpleInvoke(rootControl, input);
            chai_1.expect(result.acts).length(1);
            chai_1.expect(result.acts[0]).instanceOf(InitiativeActs_1.RequestValueByListAct);
            chai_1.expect(result.acts[0].control.id).equals(game_strings_1.GameStrings.ID.PetSpecies);
            chai_1.expect(result.sessionBehavior).equals(SessionBehavior_1.SessionBehavior.OPEN);
        });
        mocha_1.test("Set and Change a player name, check act generations due to validation fails", async () => {
            const rootControl = new GameManager().createControlTree();
            const result1 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.Name, 'CUSTOM.name': "Mike" })));
            const result2 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'action': Strings_1.Strings.Action.Change, 'target': game_strings_1.GameStrings.Target.Name, 'CUSTOM.name': "Alexa" })));
            chai_1.expect(result2.acts).length(2);
            chai_1.expect(result2.acts[0]).instanceOf(src_1.InvalidValueAct);
            chai_1.expect(result2.acts[1]).instanceOf(src_1.RequestChangedValueAct);
        });
        mocha_1.test("User selection of player class by choices number", async () => {
            const rootControl = new GameManager().createControlTree();
            const result1 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: Strings_1.Strings.Action.Set, target: game_strings_1.GameStrings.Target.CharClass })));
            chai_1.expect(result1.acts).length(1);
            chai_1.expect(result1.acts[0]).instanceOf(InitiativeActs_1.RequestValueByListAct);
            const result2 = await TestingUtils_1.simpleInvoke(rootControl, TestingUtils_1.TestInput.of(OrdinalControlIntent_1.OrdinalControlIntent.of({ "action": Strings_1.Strings.Action.Select, "target": game_strings_1.GameStrings.Target.CharClass, 'AMAZON.Ordinal': '3' })));
            chai_1.expect(result2.acts[0].control.id).equal(game_strings_1.GameStrings.ID.PlayerClass);
            chai_1.expect(TestingUtils_1.findControlById(rootControl, game_strings_1.GameStrings.ID.PlayerClass).state.value).eq(game_strings_1.GameStrings.Value.Human);
        });
    });
    mocha_1.suite("== demo game UI, e2e with SPI, serde  ==", () => {
        mocha_1.test("e2e", async () => {
            const requestHandler = new ControlHandler_1.ControlHandler(new GameManager());
            const skill = new SkillInvoker_1.SkillInvoker(SkillWrapper_1.wrapRequestHandlerAsSkill(requestHandler));
            let response;
            response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.Name, 'CUSTOM.name': "Alexa" })));
            chai_1.expect(response.prompt).equals("Sorry, Alexa is not a valid choice because playerName Validation Failed What is your avatar's name?");
            response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'action': Strings_1.Strings.Action.Set, 'target': game_strings_1.GameStrings.Target.Name, 'CUSTOM.name': "Mike" })));
            chai_1.expect(response.prompt).equals("OK, Mike. How old is your avatar?");
            response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.NUMBER, { 'AMAZON.NUMBER': "25" })));
            chai_1.expect(response.prompt).equals("Hey, that's my age! Will you be an elf, a dwarf or a human?"); // control specific NLG for feedback
            response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.NUMBER, { 'action': Strings_1.Strings.Action.Change, 'target': game_strings_1.GameStrings.Target.Age, 'AMAZON.NUMBER': "24" })));
            chai_1.expect(response.prompt).equals("Cool. Will you be an elf, a dwarf or a human?"); // control specific NLG for feedback
            response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('PlayerClass', { PlayerClass: "Hobbit" })));
            chai_1.expect(response.prompt).equals("Sorry, Hobbit is not a valid choice because playerClass validation Failed Will you be an elf, a dwarf or a human?");
            response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('PlayerClass', { PlayerClass: 'elf' })));
            chai_1.expect(response.prompt).equals("Got it. Will your pet be a cat or dog?");
            response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('PetSpecies', { PetSpecies: 'cat' })));
            chai_1.expect(response.prompt).equals("OK, cat. What shall we name your cat?"); // contextual NLG.  lambda picking up value of "pet species"
        });
    });
});
class GameManager extends ControlManager_1.ControlManager {
    createControlTree(state, input) {
        const topControl = new src_1.ContainerControl({ id: game_strings_1.GameStrings.ID.GameContainer });
        // --- Player
        const playerContainer = new PlayerContainer({ id: game_strings_1.GameStrings.ID.PlayerContainer });
        topControl.addChild(playerContainer);
        // --- Pet
        const petContainer = new src_1.ContainerControl({ id: game_strings_1.GameStrings.ID.PetContainer });
        topControl.addChild(petContainer);
        petContainer.addChild(new src_1.ListControl({
            id: game_strings_1.GameStrings.ID.PetSpecies,
            listItemIDs: this.getPetSpecies(),
            slotType: 'PetSpecies',
            validation: [(state, input) => this.getPetSpecies().includes(state.value) ? true : { renderedReason: 'petSpecies validation failed' }],
            prompts: {
                requestValue: "Will your pet be a cat or dog?"
            },
            interactionModel: { targets: [game_strings_1.GameStrings.Target.Species] }
        })).addChild(new src_1.ValueControl({
            id: game_strings_1.GameStrings.ID.PetName,
            slotType: 'CUSTOM.name',
            prompts: {
                requestValue: (act, input) => { var _a; return `What shall we name your ${(_a = input.controls[game_strings_1.GameStrings.ID.PetSpecies].state.value) !== null && _a !== void 0 ? _a : 'pet'}?`; }
            },
            interactionModel: { targets: [game_strings_1.GameStrings.Target.Name, game_strings_1.GameStrings.Target.PetName] }
        }));
        return topControl;
    }
    getPetSpecies() {
        return [game_strings_1.GameStrings.Value.Cat, game_strings_1.GameStrings.Target.Species, game_strings_1.GameStrings.Value.Dog, game_strings_1.GameStrings.Target.Species];
    }
}
exports.GameManager = GameManager;
class PlayerContainer extends src_1.ContainerControl {
    constructor(props) {
        super(props);
        this.playerNameControl = new src_1.ValueControl({
            id: game_strings_1.GameStrings.ID.PlayerName,
            slotType: 'CUSTOM.name',
            validation: [(state, input) => ['Mike', 'Dave'].includes(state.value) ? true : { renderedReason: 'playerName Validation Failed' }],
            prompts: {
                requestValue: "What is your avatar's name?",
            },
            interactionModel: { targets: [game_strings_1.GameStrings.Target.Name, game_strings_1.GameStrings.Target.AvatarName] }
        });
        this.playerAgeControl = new src_1.NumberControl({
            id: game_strings_1.GameStrings.ID.PlayerAge,
            prompts: {
                requestValue: "How old is your avatar?",
                valueSet: act => act.payload.value === 25 ? "Hey, that's my age!" : 'Cool.',
            },
            interactionModel: { targets: [game_strings_1.GameStrings.Target.Age] }
        });
        this.playerClassControl = new src_1.ListControl({
            id: game_strings_1.GameStrings.ID.PlayerClass,
            listItemIDs: this.getPlayerClass(),
            slotType: 'PlayerClass',
            validation: [(state, input) => this.getPlayerClass().includes(state.value) ? true : { renderedReason: 'playerClass validation Failed' }],
            prompts: {
                requestValue: "Will you be an elf, a dwarf or a human?",
                valueSet: 'Got it.'
            },
            interactionModel: { targets: [game_strings_1.GameStrings.Target.CharClass] }
        });
        this.addChild(this.playerNameControl)
            .addChild(this.playerAgeControl)
            .addChild(this.playerClassControl);
    }
    getPlayerClass() {
        return [game_strings_1.GameStrings.Value.Elf, game_strings_1.GameStrings.Value.Dwarf, game_strings_1.GameStrings.Value.Human];
    }
    async canHandle(input) {
        return InputUtil_1.InputUtil.isIntent(input, 'MySetPlayerIntent')
            || this.canHandleByChild(input);
    }
    async handle(input, resultBuilder) {
        if (InputUtil_1.InputUtil.isIntent(input, 'MySetPlayerIntent')) {
            const intent = IntentUtils_1.SimplifiedIntent.fromIntent(input.request.intent);
            if (intent.slotResolutions.name !== undefined) {
                const nameSlotResolution = intent.slotResolutions.name;
                this.playerNameControl.setValue(nameSlotResolution.slotValue, nameSlotResolution.isEntityResolutionMatch);
            }
            if (intent.slotResolutions.age !== undefined) {
                const ageSlotResolution = intent.slotResolutions.age;
                this.playerAgeControl.setValue(Number.parseInt(ageSlotResolution.slotValue, 10));
            }
            if (intent.slotResolutions.class !== undefined) {
                const classSlotResolution = intent.slotResolutions.class;
                this.playerClassControl.setValue(classSlotResolution.slotValue, classSlotResolution.isEntityResolutionMatch);
            }
            return;
        }
        return this.handleByChild(input, resultBuilder);
    }
}
//# sourceMappingURL=data:application/json;base64,