"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License').
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the 'license' file accompanying this file. This file is distributed
 * on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mocha_1 = require("mocha");
const Strings_1 = require("../../src/constants/Strings");
const ControlManager_1 = require("../../src/controls/ControlManager");
const GeneralControlIntent_1 = require("../../src/intents/GeneralControlIntent");
const SingleValueControlIntent_1 = require("../../src/intents/SingleValueControlIntent");
const ControlHandler_1 = require("../../src/runtime/ControlHandler");
const TestingUtils_1 = require("../../src/utils/testSupport/TestingUtils");
const ValueControl_1 = require("../../src/commonControls/ValueControl");
TestingUtils_1.waitForDebugger();
mocha_1.suite('ValueControl e2e tests', () => {
    class ValueControlManager extends ControlManager_1.ControlManager {
        createControlTree(state) {
            return new ValueControl_1.ValueControl({
                id: 'userName',
                slotType: 'LOGIN.name',
                confirmationRequired: true,
                validation: (state, input) => ['Alexa', 'Amazon', 'Redfox'].includes(state.value) ? true : { renderedReason: 'Login name validation failed' },
                prompts: {
                    requestValue: 'What is your login name?',
                    valueSet: ''
                },
            });
        }
    }
    mocha_1.test('userName value valid, needs explicit affirming', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ValueControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: Amazon', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Amazon' })),
            'A: Was that Amazon?',
            'U: Yeah.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great.'
        ]);
    });
    mocha_1.test('userName value after disaffirmation, requires request value act', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ValueControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: Amazon', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Amazon' })),
            'A: Was that Amazon?',
            'U: No.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Disaffirm })),
            'A: My mistake. What is your login name?'
        ]);
    });
    mocha_1.test('userName value set and changing it requires confirmation and value changed act', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ValueControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: Alexa', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Alexa' })),
            'A: Was that Alexa?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great.',
            'U: Change to Redfox.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Redfox', "action": Strings_1.Strings.Action.Change })),
            'A: Was that Redfox?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great. OK, I changed it to Redfox.'
        ]);
    });
    mocha_1.test('userName value set and changing it to invalid requires confirmation and checks for validations', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ValueControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: Alexa', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Alexa' })),
            'A: Was that Alexa?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great.',
            'U: Change to Apple.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Apple', "action": Strings_1.Strings.Action.Change })),
            'A: Was that Apple?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Sorry, Apple is not a valid choice because Login name validation failed What should I change it to?',
            'U: Amazon', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Amazon' })),
            'A: Was that Amazon?',
            'U: No.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Disaffirm })),
            'A: My mistake. What is your login name?',
            'U: Amazon', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('LOGIN.name', { 'LOGIN.name': 'Amazon' })),
            'A: Was that Amazon?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great. OK, I changed it to Amazon.'
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsdWVDb250cm9sLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L2NvbW1vbkNvbnRyb2xUZXN0cy9WYWx1ZUNvbnRyb2wuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7O0FBRUgsaUNBQW9DO0FBQ3BDLHlEQUEyRDtBQUUzRCxzRUFBbUU7QUFDbkUsaUZBQThFO0FBQzlFLHlGQUFzRjtBQUN0RixxRUFBa0U7QUFDbEUsMkVBQStGO0FBQy9GLHdFQUFxRTtBQUVyRSw4QkFBZSxFQUFFLENBQUM7QUFFbEIsYUFBSyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUNqQyxNQUFNLG1CQUFvQixTQUFRLCtCQUFjO1FBQzVDLGlCQUFpQixDQUFDLEtBQVU7WUFDeEIsT0FBTyxJQUFJLDJCQUFZLENBQUM7Z0JBQ3BCLEVBQUUsRUFBRSxVQUFVO2dCQUNkLFFBQVEsRUFBRSxZQUFZO2dCQUN0QixvQkFBb0IsRUFBRSxJQUFJO2dCQUMxQixVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSw4QkFBOEIsRUFBRTtnQkFDOUksT0FBTyxFQUFFO29CQUNMLFlBQVksRUFBRSwwQkFBMEI7b0JBQ3hDLFFBQVEsRUFBRSxFQUFFO2lCQUNmO2FBQ0osQ0FBQyxDQUFDO1FBQ1AsQ0FBQztLQUNKO0lBRUQsWUFBSSxDQUFDLGdEQUFnRCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzlELE1BQU0sY0FBYyxHQUFHLElBQUksK0JBQWMsQ0FBQyxJQUFJLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUNyRSxNQUFNLHNCQUFPLENBQUMsY0FBYyxFQUFF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d0JBQVMsQ0FBQyxFQUFFLENBQUMsbURBQXdCLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7WUFDbkksb0JBQW9CO1lBQ3BCLFNBQVMsRUFBRSx3QkFBUyxDQUFDLEVBQUUsQ0FBQywyQ0FBb0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsaUJBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUNqRix3R0FBd0c7WUFDeEcsV0FBVyxFQUFFLHdCQUFTLENBQUMsRUFBRSxDQUFDLG1EQUF3QixDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNoRyxxQkFBcUI7WUFDckIsUUFBUSxFQUFFLHdCQUFTLENBQUMsRUFBRSxDQUFDLDJDQUFvQixDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxpQkFBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ25GLHlDQUF5QztZQUN6QyxXQUFXLEVBQUUsd0JBQVMsQ0FBQyxFQUFFLENBQUMsbURBQXdCLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ2hHLHFCQUFxQjtZQUNyQixTQUFTLEVBQUUsd0JBQVMsQ0FBQyxFQUFFLENBQUMsMkNBQW9CLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLGlCQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDakYsdUNBQXVDO1NBQzFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBzdWl0ZSwgdGVzdCB9IGZyb20gJ21vY2hhJztcbmltcG9ydCB7IFN0cmluZ3MgYXMgJCB9IGZyb20gXCIuLi8uLi9zcmMvY29uc3RhbnRzL1N0cmluZ3NcIjtcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tICcuLi8uLi9zcmMvY29udHJvbHMvQ29udHJvbCc7XG5pbXBvcnQgeyBDb250cm9sTWFuYWdlciB9IGZyb20gJy4uLy4uL3NyYy9jb250cm9scy9Db250cm9sTWFuYWdlcic7XG5pbXBvcnQgeyBHZW5lcmFsQ29udHJvbEludGVudCB9IGZyb20gJy4uLy4uL3NyYy9pbnRlbnRzL0dlbmVyYWxDb250cm9sSW50ZW50JztcbmltcG9ydCB7IFNpbmdsZVZhbHVlQ29udHJvbEludGVudCB9IGZyb20gJy4uLy4uL3NyYy9pbnRlbnRzL1NpbmdsZVZhbHVlQ29udHJvbEludGVudCc7XG5pbXBvcnQgeyBDb250cm9sSGFuZGxlciB9IGZyb20gJy4uLy4uL3NyYy9ydW50aW1lL0NvbnRyb2xIYW5kbGVyJztcbmltcG9ydCB7IHRlc3RFMkUsIFRlc3RJbnB1dCwgd2FpdEZvckRlYnVnZ2VyIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL3Rlc3RTdXBwb3J0L1Rlc3RpbmdVdGlscyc7XG5pbXBvcnQgeyBWYWx1ZUNvbnRyb2wgfSBmcm9tICcuLi8uLi9zcmMvY29tbW9uQ29udHJvbHMvVmFsdWVDb250cm9sJztcblxud2FpdEZvckRlYnVnZ2VyKCk7XG5cbnN1aXRlKCdWYWx1ZUNvbnRyb2wgZTJlIHRlc3RzJywgKCkgPT4ge1xuICAgIGNsYXNzIFZhbHVlQ29udHJvbE1hbmFnZXIgZXh0ZW5kcyBDb250cm9sTWFuYWdlciB7XG4gICAgICAgIGNyZWF0ZUNvbnRyb2xUcmVlKHN0YXRlOiBhbnkpOiBDb250cm9sIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVmFsdWVDb250cm9sKHtcbiAgICAgICAgICAgICAgICBpZDogJ3VzZXJOYW1lJyxcbiAgICAgICAgICAgICAgICBzbG90VHlwZTogJ0xPR0lOLm5hbWUnLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1hdGlvblJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IChzdGF0ZSwgaW5wdXQpID0+IFsnQWxleGEnLCAnQW1hem9uJywgJ1JlZGZveCddLmluY2x1ZGVzKHN0YXRlLnZhbHVlISkgPyB0cnVlIDogeyByZW5kZXJlZFJlYXNvbjogJ0xvZ2luIG5hbWUgdmFsaWRhdGlvbiBmYWlsZWQnIH0sXG4gICAgICAgICAgICAgICAgcHJvbXB0czoge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VmFsdWU6ICdXaGF0IGlzIHlvdXIgbG9naW4gbmFtZT8nLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldDogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0ZXN0KCd1c2VyTmFtZSB2YWx1ZSB2YWxpZCwgbmVlZHMgZXhwbGljaXQgYWZmaXJtaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0SGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgVmFsdWVDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgYXdhaXQgdGVzdEUyRShyZXF1ZXN0SGFuZGxlciwgW1xuICAgICAgICAgICAgJ1U6IEFtYXpvbicsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoJ0xPR0lOLm5hbWUnLCB7ICdMT0dJTi5uYW1lJzogJ0FtYXpvbicgfSkpLFxuICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IEFtYXpvbj8nLFxuICAgICAgICAgICAgJ1U6IFllYWguJywgVGVzdElucHV0Lm9mKEdlbmVyYWxDb250cm9sSW50ZW50Lm9mKHsgZmVlZGJhY2s6ICQuRmVlZGJhY2suQWZmaXJtIH0pKSxcbiAgICAgICAgICAgICdBOiBHcmVhdC4nXG4gICAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgndXNlck5hbWUgdmFsdWUgYWZ0ZXIgZGlzYWZmaXJtYXRpb24sIHJlcXVpcmVzIHJlcXVlc3QgdmFsdWUgYWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0SGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgVmFsdWVDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgYXdhaXQgdGVzdEUyRShyZXF1ZXN0SGFuZGxlciwgW1xuICAgICAgICAgICAgJ1U6IEFtYXpvbicsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoJ0xPR0lOLm5hbWUnLCB7ICdMT0dJTi5uYW1lJzogJ0FtYXpvbicgfSkpLFxuICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IEFtYXpvbj8nLFxuICAgICAgICAgICAgJ1U6IE5vLicsIFRlc3RJbnB1dC5vZihHZW5lcmFsQ29udHJvbEludGVudC5vZih7IGZlZWRiYWNrOiAkLkZlZWRiYWNrLkRpc2FmZmlybSB9KSksXG4gICAgICAgICAgICAnQTogTXkgbWlzdGFrZS4gV2hhdCBpcyB5b3VyIGxvZ2luIG5hbWU/J1xuICAgICAgICBdKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3VzZXJOYW1lIHZhbHVlIHNldCBhbmQgY2hhbmdpbmcgaXQgcmVxdWlyZXMgY29uZmlybWF0aW9uIGFuZCB2YWx1ZSBjaGFuZ2VkIGFjdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdEhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IFZhbHVlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgIGF3YWl0IHRlc3RFMkUocmVxdWVzdEhhbmRsZXIsIFtcbiAgICAgICAgICAgICdVOiBBbGV4YScsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoJ0xPR0lOLm5hbWUnLCB7ICdMT0dJTi5uYW1lJzogJ0FsZXhhJyB9KSksXG4gICAgICAgICAgICAnQTogV2FzIHRoYXQgQWxleGE/JyxcbiAgICAgICAgICAgICdVOiBZZXMuJywgVGVzdElucHV0Lm9mKEdlbmVyYWxDb250cm9sSW50ZW50Lm9mKHsgZmVlZGJhY2s6ICQuRmVlZGJhY2suQWZmaXJtIH0pKSxcbiAgICAgICAgICAgICdBOiBHcmVhdC4nLFxuICAgICAgICAgICAgJ1U6IENoYW5nZSB0byBSZWRmb3guJywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZignTE9HSU4ubmFtZScsIHsgJ0xPR0lOLm5hbWUnOiAnUmVkZm94JywgXCJhY3Rpb25cIjogJC5BY3Rpb24uQ2hhbmdlfSkpLFxuICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IFJlZGZveD8nLFxuICAgICAgICAgICAgJ1U6IFllcy4nLCBUZXN0SW5wdXQub2YoR2VuZXJhbENvbnRyb2xJbnRlbnQub2YoeyBmZWVkYmFjazogJC5GZWVkYmFjay5BZmZpcm0gfSkpLFxuICAgICAgICAgICAgJ0E6IEdyZWF0LiBPSywgSSBjaGFuZ2VkIGl0IHRvIFJlZGZveC4nXG4gICAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgndXNlck5hbWUgdmFsdWUgc2V0IGFuZCBjaGFuZ2luZyBpdCB0byBpbnZhbGlkIHJlcXVpcmVzIGNvbmZpcm1hdGlvbiBhbmQgY2hlY2tzIGZvciB2YWxpZGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdEhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IFZhbHVlQ29udHJvbE1hbmFnZXIoKSk7XG4gICAgICAgIGF3YWl0IHRlc3RFMkUocmVxdWVzdEhhbmRsZXIsIFtcbiAgICAgICAgICAgICdVOiBBbGV4YScsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoJ0xPR0lOLm5hbWUnLCB7ICdMT0dJTi5uYW1lJzogJ0FsZXhhJyB9KSksXG4gICAgICAgICAgICAnQTogV2FzIHRoYXQgQWxleGE/JyxcbiAgICAgICAgICAgICdVOiBZZXMuJywgVGVzdElucHV0Lm9mKEdlbmVyYWxDb250cm9sSW50ZW50Lm9mKHsgZmVlZGJhY2s6ICQuRmVlZGJhY2suQWZmaXJtIH0pKSxcbiAgICAgICAgICAgICdBOiBHcmVhdC4nLFxuICAgICAgICAgICAgJ1U6IENoYW5nZSB0byBBcHBsZS4nLCBUZXN0SW5wdXQub2YoU2luZ2xlVmFsdWVDb250cm9sSW50ZW50Lm9mKCdMT0dJTi5uYW1lJywgeyAnTE9HSU4ubmFtZSc6ICdBcHBsZScsIFwiYWN0aW9uXCI6ICQuQWN0aW9uLkNoYW5nZX0pKSxcbiAgICAgICAgICAgICdBOiBXYXMgdGhhdCBBcHBsZT8nLFxuICAgICAgICAgICAgJ1U6IFllcy4nLCBUZXN0SW5wdXQub2YoR2VuZXJhbENvbnRyb2xJbnRlbnQub2YoeyBmZWVkYmFjazogJC5GZWVkYmFjay5BZmZpcm0gfSkpLFxuICAgICAgICAgICAgJ0E6IFNvcnJ5LCBBcHBsZSBpcyBub3QgYSB2YWxpZCBjaG9pY2UgYmVjYXVzZSBMb2dpbiBuYW1lIHZhbGlkYXRpb24gZmFpbGVkIFdoYXQgc2hvdWxkIEkgY2hhbmdlIGl0IHRvPycsXG4gICAgICAgICAgICAnVTogQW1hem9uJywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZignTE9HSU4ubmFtZScsIHsgJ0xPR0lOLm5hbWUnOiAnQW1hem9uJyB9KSksXG4gICAgICAgICAgICAnQTogV2FzIHRoYXQgQW1hem9uPycsXG4gICAgICAgICAgICAnVTogTm8uJywgVGVzdElucHV0Lm9mKEdlbmVyYWxDb250cm9sSW50ZW50Lm9mKHsgZmVlZGJhY2s6ICQuRmVlZGJhY2suRGlzYWZmaXJtIH0pKSxcbiAgICAgICAgICAgICdBOiBNeSBtaXN0YWtlLiBXaGF0IGlzIHlvdXIgbG9naW4gbmFtZT8nLFxuICAgICAgICAgICAgJ1U6IEFtYXpvbicsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoJ0xPR0lOLm5hbWUnLCB7ICdMT0dJTi5uYW1lJzogJ0FtYXpvbicgfSkpLFxuICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IEFtYXpvbj8nLFxuICAgICAgICAgICAgJ1U6IFllcy4nLCBUZXN0SW5wdXQub2YoR2VuZXJhbENvbnRyb2xJbnRlbnQub2YoeyBmZWVkYmFjazogJC5GZWVkYmFjay5BZmZpcm0gfSkpLFxuICAgICAgICAgICAgJ0E6IEdyZWF0LiBPSywgSSBjaGFuZ2VkIGl0IHRvIEFtYXpvbi4nXG4gICAgICAgIF0pO1xuICAgIH0pO1xufSk7Il19