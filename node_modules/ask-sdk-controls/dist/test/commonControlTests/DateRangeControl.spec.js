"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const ArrayUtil = tslib_1.__importStar(require("../../src/utils/ArrayUtils"));
const src_1 = require("../../src");
const Strings_1 = require("../../src/constants/Strings");
const ConjunctionControlIntent_1 = require("../../src/intents/ConjunctionControlIntent");
function dateRangeControlUnderTest() {
    return new src_1.DateRangeControl({
        id: 'DateRangeControl',
        interactionModel: {
            targets: {
                self: ['photos', 'date']
            },
            actions: {
                set: ['show', 'set'],
                change: ['change']
            },
        },
        validation: {
            rangeValid: [src_1.DateRangeControlValidations.START_BEFORE_END],
            startDateValid: [src_1.DateControlValidations.PAST_DATE_ONLY],
            endDateValid: [src_1.DateControlValidations.PAST_DATE_ONLY]
        },
        required: true
    });
}
class StrictDateRangeControlManager extends src_1.ControlManager {
    createControlTree(state) {
        return dateRangeControlUnderTest();
    }
}
const askForStartPrompts = ['start date please ?', 'Please give me the start date.'];
const valueSetPrompts = ['Ok.', 'Roger.'];
const askForEndPrompts = ['End date please ?', 'Please give me the end date.'];
const askForBothPrompts = ['What is the start date and end date you want ?', 'Please give me the start date and the end date.'];
class VariableResponseTwoDatesControlManager extends src_1.ControlManager {
    createControlTree(state) {
        return new src_1.DateRangeControl({
            id: 'DateRangeControl',
            interactionModel: {
                targets: {
                    self: ['photos', 'date']
                },
                actions: {
                    set: ['show', 'set'],
                    change: ['change']
                },
            },
            validation: {
                rangeValid: [src_1.DateRangeControlValidations.START_BEFORE_END]
            },
            prompts: {
                startDate: {
                    requestValue: askForStartPrompts,
                    valueSet: valueSetPrompts
                },
                endDate: {
                    requestValue: askForEndPrompts,
                    valueSet: valueSetPrompts
                },
                requestRange: askForBothPrompts
            }
        });
    }
}
mocha_1.suite('DateRangeControl', () => {
    beforeEach(() => {
        // set now to 2019-01-03
        sinon_1.default.useFakeTimers(new Date('2019-01-03T21:55:38.151Z'));
    });
    afterEach(() => {
        sinon_1.default.restore();
    });
    mocha_1.suite('E2E tests', () => {
        mocha_1.suite('Only DateRangeControlIntent & DateControlIntent', () => {
            mocha_1.test('both start date and end date provided', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'target.a': 'startDate',
                        'AMAZON.DATE.a': '2017',
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.b': 'endDate',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('both start date and end date provided but in simple words', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('should ask for end date when only start date is set', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'startDate',
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is 2017. What is the end date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is 2018.',
                ]);
            });
            mocha_1.test('should ask for start date when end start date is set', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set end date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'endDate',
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The end date is 2017. What is the start date you want?',
                    'U: 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Got it. The start date is 2016.',
                ]);
            });
            mocha_1.test('raw value input should use focus to determine target', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'startDate',
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is 2017. What is the end date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is 2018.',
                    'U: actually 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': 'change',
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The end date is changed to 2017.',
                ]);
            });
            mocha_1.test('should mention both change if two value changed together', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'startDate',
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is 2017. What is the end date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is 2018.',
                    'U: actually 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016',
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('only raw value input should be regarded as range if no previous context', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, { 'AMAZON.DATE': '2018' })),
                    'A: Got it. The start date is 2018-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('When there is lastInitiative child and focus is actually on parent, raw value should be consumed by parent', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'startDate',
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is 2017. What is the end date you want?',
                    'U: Actually change date from 2015-01-01 to 2016-12-31', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Change,
                        'target': 'date',
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016'
                    })),
                    'A: Got it. The start date is 2015-01-01 and the end date is 2016-12-31.',
                    'U: change date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': 'date',
                        'AMAZON.DATE': '2017',
                    })),
                    'A: Got it. The start date is changed to 2017-01-01 and the end date is changed to 2017-12-31.',
                ]);
            });
            mocha_1.test('when target ambiguous, and two value provided, should transfer date to startDate and endDate', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'date',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('when focus is both, one value will be considered as both', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'date',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2016'
                    })),
                    'A: Got it. The start date is changed to 2016-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('when focus is both, ambiguous target will be considered as both', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'date',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: set date to 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'date',
                        'AMAZON.DATE': '2016'
                    })),
                    'A: Got it. The start date is changed to 2016-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
        });
        mocha_1.suite('Integrate with two builtin validation rules', () => {
            mocha_1.test('should ask for valid end date when end date fails validations', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2020', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'date',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2020',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2020-12-31. Sorry but that\'s not a valid end date because the date cannot be greater than today. What should I change the end date to?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is changed to 2018.'
                ]);
            });
            mocha_1.test('should ask for valid start date when start date fails validations', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2020', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'startDate',
                        'AMAZON.DATE': '2020',
                    })),
                    'A: Sorry but that\'s not a valid start date because the date cannot be greater than today. What is the start date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The start date is 2018. What is the end date you want?',
                    'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2018',
                    })),
                    'A: Got it. The end date is 2018.',
                ]);
            });
            mocha_1.test('should ask for both start date and end date when both value changed and start date is past end date', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'date',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2016',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2016-12-31. Sorry, invalid range because start date can not be greater than end date. What is the start date and end date you want?',
                ]);
            });
            mocha_1.test('should ask for valid end date when start date is past end date, and only end date is changed', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2016 to 2017', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'date',
                        'AMAZON.DATE.a': '2016',
                        'AMAZON.DATE.b': '2017',
                    })),
                    'A: Got it. The start date is 2016-01-01 and the end date is 2017-12-31.',
                    'U: change end date to 2015', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': 'endDate',
                        'AMAZON.DATE': '2015'
                    })),
                    'A: Got it. The end date is changed to 2015. Sorry, invalid range because start date can not be greater than end date. What is the end date you want?',
                ]);
            });
        });
        mocha_1.suite('Integrate with SimpleControlIntent & ConjunctionControlIntent', () => {
            mocha_1.test('change with ambiguous target will ask for both start and end when focus is both, and treat one value input as a range', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: Change date', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                        target: 'date'
                    })),
                    'A: What is the start date and end date you want?',
                    'U: 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016',
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('change with ambiguous target will only change start when focus is start', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: Change start date to 2015', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': 'startDate',
                        'AMAZON.DATE': '2015'
                    })),
                    'A: Got it. The start date is changed to 2015.',
                    'U: change date to 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': 'date',
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Got it. The start date is changed to 2016.',
                ]);
            });
            mocha_1.test('change start date and end date', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set start date to 2017 and set end date to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action.a': Strings_1.Strings.Action.Set,
                        'action.b': Strings_1.Strings.Action.Set,
                        'target.a': 'startDate',
                        'target.b': 'endDate',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: Change start date and end date', src_1.TestInput.of(ConjunctionControlIntent_1.ConjunctionControlIntent.of({
                        'action': Strings_1.Strings.Action.Change,
                        'target.a': 'startDate',
                        'target.b': 'endDate'
                    })),
                    'A: What is the start date and end date you want?',
                    'U: 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016'
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('change with specific target', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: Change start date', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                        target: 'startDate',
                    })),
                    'A: What should I change the start date to?',
                    'U: 2015', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2015',
                    })),
                    'A: Got it. The start date is changed to 2015.',
                ]);
            });
            mocha_1.test('when focus is both, action "change" will be considered to change both start and end date', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'date',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: change', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                    })),
                    'A: What is the start date and end date you want?',
                    'U: 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016'
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
            mocha_1.test('when focus is start date, action "change" will be considered to change start date', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: set date from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': Strings_1.Strings.Action.Set,
                        'target': 'date',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: change start date to 2016', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'action': Strings_1.Strings.Action.Change,
                        'target': 'startDate',
                        'AMAZON.DATE': '2016',
                    })),
                    'A: Got it. The start date is changed to 2016.',
                    'U: change', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                    })),
                    'A: What should I change the start date to?',
                    'U: 2015', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                        'AMAZON.DATE': '2015',
                    })),
                    'A: Got it. The start date is changed to 2015.',
                ]);
            });
        });
        mocha_1.suite('Integrate with customized action & target', () => {
            mocha_1.test('DateRangeControl should understand customized target photos and action show', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: show photos from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': 'show',
                        'target': 'photos',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                ]);
            });
            mocha_1.test('GeneralControlIntent & ConjunctionControlIntent should understand customized target photos', async () => {
                const handler = new src_1.ControlHandler(new StrictDateRangeControlManager());
                await src_1.testE2E(handler, [
                    'U: show photos from 2017 to 2018', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'action': 'show',
                        'target': 'photos',
                        'AMAZON.DATE.a': '2017',
                        'AMAZON.DATE.b': '2018',
                    })),
                    'A: Got it. The start date is 2017-01-01 and the end date is 2018-12-31.',
                    'U: change photos', src_1.TestInput.of(src_1.GeneralControlIntent.of({
                        action: Strings_1.Strings.Action.Change,
                        target: 'photos',
                    })),
                    'A: What is the start date and end date you want?',
                    'U: 2015 to 2016', src_1.TestInput.of(src_1.DateRangeControlIntent.of({
                        'AMAZON.DATE.a': '2015',
                        'AMAZON.DATE.b': '2016'
                    })),
                    'A: Got it. The start date is changed to 2015-01-01 and the end date is changed to 2016-12-31.',
                ]);
            });
        });
    });
    mocha_1.suite('Variable response tests', () => {
        beforeEach(() => {
            // Force to return the last one in the array
            sinon_1.default.stub(ArrayUtil, 'randomlyPick').callsFake((input) => input[input.length - 1]);
        });
        afterEach(() => {
            sinon_1.default.restore();
        });
        mocha_1.test('should ask for end date when only start date is set, ', async () => {
            const handler = new src_1.ControlHandler(new VariableResponseTwoDatesControlManager());
            await src_1.testE2E(handler, [
                'U: set start date to 2017', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                    'action': Strings_1.Strings.Action.Set,
                    'target': 'startDate',
                    'AMAZON.DATE': '2017',
                })),
                'A: Roger. Please give me the end date.',
                'U: 2018', src_1.TestInput.of(src_1.SingleValueControlIntent.of(src_1.AmazonBuiltInSlotType.DATE, {
                    'AMAZON.DATE': '2018',
                })),
                'A: Roger.'
            ]);
        });
    });
    mocha_1.suite('DateRangeControl scenarios', () => {
        mocha_1.test('unknown single target should be rejected', async () => {
            const control = dateRangeControlUnderTest();
            const input = src_1.TestInput.of(src_1.DateRangeControlIntent.of({ 'action': Strings_1.Strings.Action.Set, 'target': 'food', 'AMAZON.DATE.a': '2016', 'AMAZON.DATE.b': '2017' }));
            const canHandleResult = await control.canHandle(input);
            chai_1.expect(canHandleResult).false;
        });
        mocha_1.test('two targets with either one unknown should be rejected', async () => {
            const control = dateRangeControlUnderTest();
            const input = src_1.TestInput.of(src_1.DateRangeControlIntent.of({ 'action': Strings_1.Strings.Action.Set, 'target.a': 'startDate', 'target.b': 'food', 'AMAZON.DATE.a': '2016', 'AMAZON.DATE.b': '2017' }));
            const canHandleResult = await control.canHandle(input);
            chai_1.expect(canHandleResult).false;
        });
    });
});
//# sourceMappingURL=data:application/json;base64,