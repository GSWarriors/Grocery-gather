"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License').
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the 'license' file accompanying this file. This file is distributed
 * on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mocha_1 = require("mocha");
const Strings_1 = require("../../src/constants/Strings");
const ControlManager_1 = require("../../src/controls/ControlManager");
const GeneralControlIntent_1 = require("../../src/intents/GeneralControlIntent");
const SingleValueControlIntent_1 = require("../../src/intents/SingleValueControlIntent");
const ControlHandler_1 = require("../../src/runtime/ControlHandler");
const TestingUtils_1 = require("../../src/utils/testSupport/TestingUtils");
const ListControl_1 = require("../../src/commonControls/listControl/ListControl");
TestingUtils_1.waitForDebugger();
mocha_1.suite('ListControl e2e tests', () => {
    class ListControlManager extends ControlManager_1.ControlManager {
        createControlTree(state) {
            return new ListControl_1.ListControl({
                id: 'apple',
                validation: (state, input) => ['iPhone', 'iPad', 'MacBook'].includes(state.value) ? true : { renderedReason: 'Apple Suite category validation failed' },
                listItemIDs: ['iPhone', 'iPad', 'MacBook'],
                slotType: 'AppleSuite',
                confirmationRequired: true,
                prompts: {
                    valueSet: '',
                }
            });
        }
    }
    mocha_1.test('product value valid, needs explicit affirming', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ListControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: iPhone', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPhone' })),
            'A: Was that iPhone?',
            'U: Yeah.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great.'
        ]);
    });
    mocha_1.test('product value after disaffirmation, requires request value act', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ListControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: iPhone', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPhone' })),
            'A: Was that iPhone?',
            'U: No.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Disaffirm })),
            'A: My mistake. What is your selection? Some suggestions are iPhone, iPad or MacBook.'
        ]);
    });
    mocha_1.test('product value set and changing it requires confirmation and value changed act', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ListControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: iPhone', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPhone' })),
            'A: Was that iPhone?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great.',
            'U: Change to iPad.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPad', action: Strings_1.Strings.Action.Change })),
            'A: Was that iPad?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great. OK, I changed it to iPad.'
        ]);
    });
    mocha_1.test('product value set and changing it to invalid requires confirmation and checks for validations', async () => {
        const requestHandler = new ControlHandler_1.ControlHandler(new ListControlManager());
        await TestingUtils_1.testE2E(requestHandler, [
            'U: iPhone', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPhone' })),
            'A: Was that iPhone?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great.',
            'U: Change to Airpods.', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'Airpods', action: Strings_1.Strings.Action.Change })),
            'A: Was that Airpods?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Sorry, Airpods is not a valid choice because Apple Suite category validation failed What should I change it to? Some suggestions are iPhone, iPad or MacBook.',
            'U: iPad', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPad' })),
            'A: Was that iPad?',
            'U: No.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Disaffirm })),
            'A: My mistake. What is your selection? Some suggestions are iPhone, iPad or MacBook.',
            'U: iPad', TestingUtils_1.TestInput.of(SingleValueControlIntent_1.SingleValueControlIntent.of('AppleSuite', { AppleSuite: 'iPad' })),
            'A: Was that iPad?',
            'U: Yes.', TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ feedback: Strings_1.Strings.Feedback.Affirm })),
            'A: Great. OK, I changed it to iPad.'
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdENvbnRyb2wuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvY29tbW9uQ29udHJvbFRlc3RzL0xpc3RDb250cm9sLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7OztHQVdHOztBQUVILGlDQUFvQztBQUNwQyx5REFBMkQ7QUFFM0Qsc0VBQW1FO0FBQ25FLGlGQUE4RTtBQUM5RSx5RkFBc0Y7QUFDdEYscUVBQWtFO0FBQ2xFLDJFQUErRjtBQUMvRixrRkFBK0U7QUFFL0UsOEJBQWUsRUFBRSxDQUFDO0FBRWxCLGFBQUssQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDaEMsTUFBTSxrQkFBbUIsU0FBUSwrQkFBYztRQUMzQyxpQkFBaUIsQ0FBQyxLQUFVO1lBQ3hCLE9BQU8sSUFBSSx5QkFBVyxDQUFDO2dCQUNuQixFQUFFLEVBQUUsT0FBTztnQkFDWCxVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSx3Q0FBd0MsRUFBRTtnQkFDeEosV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUM7Z0JBQzFDLFFBQVEsRUFBRSxZQUFZO2dCQUN0QixvQkFBb0IsRUFBRSxJQUFJO2dCQUMxQixPQUFPLEVBQUU7b0JBQ0wsUUFBUSxFQUFFLEVBQUU7aUJBQ2Y7YUFDSixDQUFDLENBQUM7UUFDUCxDQUFDO0tBQ0o7SUFFRCxZQUFJLENBQUMsK0NBQStDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDN0QsTUFBTSxjQUFjLEdBQUcsSUFBSSwrQkFBYyxDQUFDLElBQUksa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ3BF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IG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJykuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IHN1aXRlLCB0ZXN0IH0gZnJvbSAnbW9jaGEnO1xuaW1wb3J0IHsgU3RyaW5ncyBhcyAkIH0gZnJvbSBcIi4uLy4uL3NyYy9jb25zdGFudHMvU3RyaW5nc1wiO1xuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gJy4uLy4uL3NyYy9jb250cm9scy9Db250cm9sJztcbmltcG9ydCB7IENvbnRyb2xNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRyb2xzL0NvbnRyb2xNYW5hZ2VyJztcbmltcG9ydCB7IEdlbmVyYWxDb250cm9sSW50ZW50IH0gZnJvbSAnLi4vLi4vc3JjL2ludGVudHMvR2VuZXJhbENvbnRyb2xJbnRlbnQnO1xuaW1wb3J0IHsgU2luZ2xlVmFsdWVDb250cm9sSW50ZW50IH0gZnJvbSAnLi4vLi4vc3JjL2ludGVudHMvU2luZ2xlVmFsdWVDb250cm9sSW50ZW50JztcbmltcG9ydCB7IENvbnRyb2xIYW5kbGVyIH0gZnJvbSAnLi4vLi4vc3JjL3J1bnRpbWUvQ29udHJvbEhhbmRsZXInO1xuaW1wb3J0IHsgdGVzdEUyRSwgVGVzdElucHV0LCB3YWl0Rm9yRGVidWdnZXIgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvdGVzdFN1cHBvcnQvVGVzdGluZ1V0aWxzJztcbmltcG9ydCB7IExpc3RDb250cm9sIH0gZnJvbSAnLi4vLi4vc3JjL2NvbW1vbkNvbnRyb2xzL2xpc3RDb250cm9sL0xpc3RDb250cm9sJztcblxud2FpdEZvckRlYnVnZ2VyKCk7XG5cbnN1aXRlKCdMaXN0Q29udHJvbCBlMmUgdGVzdHMnLCAoKSA9PiB7XG4gICAgY2xhc3MgTGlzdENvbnRyb2xNYW5hZ2VyIGV4dGVuZHMgQ29udHJvbE1hbmFnZXIge1xuICAgICAgICBjcmVhdGVDb250cm9sVHJlZShzdGF0ZTogYW55KTogQ29udHJvbCB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExpc3RDb250cm9sKHtcbiAgICAgICAgICAgICAgICBpZDogJ2FwcGxlJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiAoc3RhdGUsIGlucHV0KSA9PiBbJ2lQaG9uZScsICdpUGFkJywgJ01hY0Jvb2snXS5pbmNsdWRlcyhzdGF0ZS52YWx1ZSEpID8gdHJ1ZSA6IHsgcmVuZGVyZWRSZWFzb246ICdBcHBsZSBTdWl0ZSBjYXRlZ29yeSB2YWxpZGF0aW9uIGZhaWxlZCcgfSxcbiAgICAgICAgICAgICAgICBsaXN0SXRlbUlEczogWydpUGhvbmUnLCAnaVBhZCcsICdNYWNCb29rJ10sXG4gICAgICAgICAgICAgICAgc2xvdFR5cGU6ICdBcHBsZVN1aXRlJyxcbiAgICAgICAgICAgICAgICBjb25maXJtYXRpb25SZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9tcHRzOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0OiAnJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRlc3QoJ3Byb2R1Y3QgdmFsdWUgdmFsaWQsIG5lZWRzIGV4cGxpY2l0IGFmZmlybWluZycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdEhhbmRsZXIgPSBuZXcgQ29udHJvbEhhbmRsZXIobmV3IExpc3RDb250cm9sTWFuYWdlcigpKTtcbiAgICAgICAgYXdhaXQgdGVzdEUyRShyZXF1ZXN0SGFuZGxlciwgW1xuICAgICAgICAgICAgJ1U6IGlQaG9uZScsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoJ0FwcGxlU3VpdGUnLCB7IEFwcGxlU3VpdGU6ICdpUGhvbmUnIH0pKSxcbiAgICAgICAgICAgICdBOiBXYXMgdGhhdCBpUGhvbmU/JyxcbiAgICAgICAgICAgICdVOiBZZWFoLicsIFRlc3RJbnB1dC5vZihHZW5lcmFsQ29udHJvbEludGVudC5vZih7IGZlZWRiYWNrOiAkLkZlZWRiYWNrLkFmZmlybSB9KSksXG4gICAgICAgICAgICAnQTogR3JlYXQuJ1xuICAgICAgICBdKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Byb2R1Y3QgdmFsdWUgYWZ0ZXIgZGlzYWZmaXJtYXRpb24sIHJlcXVpcmVzIHJlcXVlc3QgdmFsdWUgYWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0SGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgTGlzdENvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICBhd2FpdCB0ZXN0RTJFKHJlcXVlc3RIYW5kbGVyLCBbXG4gICAgICAgICAgICAnVTogaVBob25lJywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZignQXBwbGVTdWl0ZScsIHsgQXBwbGVTdWl0ZTogJ2lQaG9uZScgfSkpLFxuICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IGlQaG9uZT8nLFxuICAgICAgICAgICAgJ1U6IE5vLicsIFRlc3RJbnB1dC5vZihHZW5lcmFsQ29udHJvbEludGVudC5vZih7IGZlZWRiYWNrOiAkLkZlZWRiYWNrLkRpc2FmZmlybSB9KSksXG4gICAgICAgICAgICAnQTogTXkgbWlzdGFrZS4gV2hhdCBpcyB5b3VyIHNlbGVjdGlvbj8gU29tZSBzdWdnZXN0aW9ucyBhcmUgaVBob25lLCBpUGFkIG9yIE1hY0Jvb2suJ1xuICAgICAgICBdKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Byb2R1Y3QgdmFsdWUgc2V0IGFuZCBjaGFuZ2luZyBpdCByZXF1aXJlcyBjb25maXJtYXRpb24gYW5kIHZhbHVlIGNoYW5nZWQgYWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0SGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgTGlzdENvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICBhd2FpdCB0ZXN0RTJFKHJlcXVlc3RIYW5kbGVyLCBbXG4gICAgICAgICAgICAnVTogaVBob25lJywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZignQXBwbGVTdWl0ZScsIHsgQXBwbGVTdWl0ZTogJ2lQaG9uZScgfSkpLFxuICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IGlQaG9uZT8nLFxuICAgICAgICAgICAgJ1U6IFllcy4nLCBUZXN0SW5wdXQub2YoR2VuZXJhbENvbnRyb2xJbnRlbnQub2YoeyBmZWVkYmFjazogJC5GZWVkYmFjay5BZmZpcm0gfSkpLFxuICAgICAgICAgICAgJ0E6IEdyZWF0LicsXG4gICAgICAgICAgICAnVTogQ2hhbmdlIHRvIGlQYWQuJywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZignQXBwbGVTdWl0ZScsIHsgQXBwbGVTdWl0ZTogJ2lQYWQnLCBhY3Rpb246ICQuQWN0aW9uLkNoYW5nZX0pKSxcbiAgICAgICAgICAgICdBOiBXYXMgdGhhdCBpUGFkPycsXG4gICAgICAgICAgICAnVTogWWVzLicsIFRlc3RJbnB1dC5vZihHZW5lcmFsQ29udHJvbEludGVudC5vZih7IGZlZWRiYWNrOiAkLkZlZWRiYWNrLkFmZmlybSB9KSksXG4gICAgICAgICAgICAnQTogR3JlYXQuIE9LLCBJIGNoYW5nZWQgaXQgdG8gaVBhZC4nXG4gICAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgncHJvZHVjdCB2YWx1ZSBzZXQgYW5kIGNoYW5naW5nIGl0IHRvIGludmFsaWQgcmVxdWlyZXMgY29uZmlybWF0aW9uIGFuZCBjaGVja3MgZm9yIHZhbGlkYXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0SGFuZGxlciA9IG5ldyBDb250cm9sSGFuZGxlcihuZXcgTGlzdENvbnRyb2xNYW5hZ2VyKCkpO1xuICAgICAgICBhd2FpdCB0ZXN0RTJFKHJlcXVlc3RIYW5kbGVyLCBbXG4gICAgICAgICAgICAnVTogaVBob25lJywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZignQXBwbGVTdWl0ZScsIHsgQXBwbGVTdWl0ZTogJ2lQaG9uZScgfSkpLFxuICAgICAgICAgICAgJ0E6IFdhcyB0aGF0IGlQaG9uZT8nLFxuICAgICAgICAgICAgJ1U6IFllcy4nLCBUZXN0SW5wdXQub2YoR2VuZXJhbENvbnRyb2xJbnRlbnQub2YoeyBmZWVkYmFjazogJC5GZWVkYmFjay5BZmZpcm0gfSkpLFxuICAgICAgICAgICAgJ0E6IEdyZWF0LicsXG4gICAgICAgICAgICAnVTogQ2hhbmdlIHRvIEFpcnBvZHMuJywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZignQXBwbGVTdWl0ZScsIHsgQXBwbGVTdWl0ZTogJ0FpcnBvZHMnLCBhY3Rpb246ICQuQWN0aW9uLkNoYW5nZX0pKSxcbiAgICAgICAgICAgICdBOiBXYXMgdGhhdCBBaXJwb2RzPycsXG4gICAgICAgICAgICAnVTogWWVzLicsIFRlc3RJbnB1dC5vZihHZW5lcmFsQ29udHJvbEludGVudC5vZih7IGZlZWRiYWNrOiAkLkZlZWRiYWNrLkFmZmlybSB9KSksXG4gICAgICAgICAgICAnQTogU29ycnksIEFpcnBvZHMgaXMgbm90IGEgdmFsaWQgY2hvaWNlIGJlY2F1c2UgQXBwbGUgU3VpdGUgY2F0ZWdvcnkgdmFsaWRhdGlvbiBmYWlsZWQgV2hhdCBzaG91bGQgSSBjaGFuZ2UgaXQgdG8/IFNvbWUgc3VnZ2VzdGlvbnMgYXJlIGlQaG9uZSwgaVBhZCBvciBNYWNCb29rLicsXG4gICAgICAgICAgICAnVTogaVBhZCcsIFRlc3RJbnB1dC5vZihTaW5nbGVWYWx1ZUNvbnRyb2xJbnRlbnQub2YoJ0FwcGxlU3VpdGUnLCB7IEFwcGxlU3VpdGU6ICdpUGFkJyB9KSksXG4gICAgICAgICAgICAnQTogV2FzIHRoYXQgaVBhZD8nLFxuICAgICAgICAgICAgJ1U6IE5vLicsIFRlc3RJbnB1dC5vZihHZW5lcmFsQ29udHJvbEludGVudC5vZih7IGZlZWRiYWNrOiAkLkZlZWRiYWNrLkRpc2FmZmlybSB9KSksXG4gICAgICAgICAgICAnQTogTXkgbWlzdGFrZS4gV2hhdCBpcyB5b3VyIHNlbGVjdGlvbj8gU29tZSBzdWdnZXN0aW9ucyBhcmUgaVBob25lLCBpUGFkIG9yIE1hY0Jvb2suJyxcbiAgICAgICAgICAgICdVOiBpUGFkJywgVGVzdElucHV0Lm9mKFNpbmdsZVZhbHVlQ29udHJvbEludGVudC5vZignQXBwbGVTdWl0ZScsIHsgQXBwbGVTdWl0ZTogJ2lQYWQnIH0pKSxcbiAgICAgICAgICAgICdBOiBXYXMgdGhhdCBpUGFkPycsXG4gICAgICAgICAgICAnVTogWWVzLicsIFRlc3RJbnB1dC5vZihHZW5lcmFsQ29udHJvbEludGVudC5vZih7IGZlZWRiYWNrOiAkLkZlZWRiYWNrLkFmZmlybSB9KSksXG4gICAgICAgICAgICAnQTogR3JlYXQuIE9LLCBJIGNoYW5nZWQgaXQgdG8gaVBhZC4nXG4gICAgICAgIF0pO1xuICAgIH0pO1xufSk7Il19