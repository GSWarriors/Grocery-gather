"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableControlsManager = exports.MyMultiControl = exports.MyMultiControlState = void 0;
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const src_1 = require("../src");
const ContainerControl_1 = require("../src/controls/ContainerControl");
const ControlManager_1 = require("../src/controls/ControlManager");
const GeneralControlIntent_1 = require("../src/intents/GeneralControlIntent");
const ControlHandler_1 = require("../src/runtime/ControlHandler");
const ArrayUtils_1 = require("../src/utils/ArrayUtils");
const SkillInvoker_1 = require("../src/utils/testSupport/SkillInvoker");
const SkillWrapper_1 = require("../src/utils/testSupport/SkillWrapper");
const TestingUtils_1 = require("../src/utils/testSupport/TestingUtils");
TestingUtils_1.waitForDebugger();
/**
 * An example of a container than manages a variable number of child controls.
 */
mocha_1.suite("== dynamic controls ==", () => {
    mocha_1.test("e2e", async () => {
        let response;
        const requestHandler = new ControlHandler_1.ControlHandler(new VariableControlsManager());
        const skill = new SkillInvoker_1.SkillInvoker(SkillWrapper_1.wrapRequestHandlerAsSkill(requestHandler));
        // Note: this test demonstrates SkillInvoker.invoke() directly to observe all the surface form details of the response.
        response = await skill.invoke(TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: "set" }))); // TODO: Update tests to better demonstrate dynamic trees support.
        chai_1.expect(response.prompt).equals("I have 1 child control. What value for number 1?");
        response = await skill.invoke(TestingUtils_1.TestInput.of(GeneralControlIntent_1.GeneralControlIntent.of({ action: "addAnother" })));
        chai_1.expect(response.prompt).equals("I have 2 child controls. What value for number 1?");
        response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'CUSTOM.name': 'bob' })));
        chai_1.expect(response.prompt).equals("OK. I have 2 child controls. What value for number 2?");
        response = await skill.invoke(TestingUtils_1.TestInput.of(src_1.SingleValueControlIntent.of('CUSTOM.name', { 'CUSTOM.name': 'frank' })));
        chai_1.expect(response.prompt).equals("OK. I have 2 child controls.");
        chai_1.expect(response.reprompt).equals("OK. I have 2 child controls.");
    });
});
class MyMultiControlState extends ContainerControl_1.ContainerControlState {
}
exports.MyMultiControlState = MyMultiControlState;
class MyMultiControl extends ContainerControl_1.ContainerControl {
    constructor(props, initialState) {
        super(props);
        this.state = initialState !== null && initialState !== void 0 ? initialState : new MyMultiControlState();
    }
    async canHandle(input) {
        const request = input.request;
        if (request.type !== 'IntentRequest') {
            return false;
        }
        const intent = request.intent;
        const unpacked = (intent.name === 'GeneralControlIntent')
            ? GeneralControlIntent_1.unpackGeneralControlIntent(intent)
            : src_1.unpackSingleValueControlIntent(intent);
        if (unpacked.action === 'addAnother') {
            return true;
        }
        return this.canHandleByChild(input);
    }
    async handle(input, resultBuilder) {
        const request = input.request;
        if (request.type !== 'IntentRequest') {
            throw new Error();
        }
        const intent = request.intent;
        const unpacked = (intent.name === 'GeneralControlIntent')
            ? GeneralControlIntent_1.unpackGeneralControlIntent(intent)
            : src_1.unpackSingleValueControlIntent(intent);
        /*
         * Special behavior #1: Always include the content act to state how many controls we currently have.
         * Special behavior #2: If the action is addAnother, then handle it directly
         * Default behavior: do the usual containerControl handling. and merge with Special behavior #1.
         */
        if (unpacked.action === 'addAnother') {
            this.state.count = this.state.count + 1;
            resultBuilder.addAct(this.createContentAct(this.state.count));
            this.children.push(MyMultiControl.makeValueControl(this.state.count));
            return;
        }
        resultBuilder.addAct(this.createContentAct(this.state.count));
        await this.handleByChild(input, resultBuilder);
        /*
         * [1] Because handleByChild can produce multiple acts, after the merge we may end up with a strange ordering
         * .. so we detect it and fix it.
         *     [ contentAct, valueSetAct, <initiativeAct> ]
         *        ^-- reorder these --^
         */
        if (resultBuilder.acts[0] instanceof src_1.LiteralContentAct && resultBuilder.acts[1] instanceof src_1.ValueSetAct) {
            ArrayUtils_1.moveArrayItem(resultBuilder.acts, 1, 0);
        }
        return;
    }
    createContentAct(count) {
        return new src_1.LiteralContentAct(this, { promptFragment: `I have ${count} child control${count === 1 ? '' : 's'}.` });
    }
    static makeValueControl(index) {
        return new MyValueControl({
            id: `value${index.toString()}`,
            slotType: 'CUSTOM.name',
            prompts: {
                requestValue: act => `What value for number ${act.control.index}?`,
                valueSet: 'OK.'
            },
            reprompts: {
                requestValue: act => `What value for number ${act.control.index}?`,
                valueSet: 'OK.'
            },
            interactionModel: { targets: ['name'] },
            index
        });
    }
}
exports.MyMultiControl = MyMultiControl;
class VariableControlsManager extends ControlManager_1.ControlManager {
    createControlTree(state) {
        const controlCount = state.multiValueContainer !== undefined ? state.multiValueContainer.count !== undefined ? state.multiValueContainer.count : 1 : 1;
        const topControl = new MyMultiControl({ id: 'multiValueContainer' }, { count: 1 });
        for (let i = 1; i <= controlCount; i++) {
            topControl.addChild(MyMultiControl.makeValueControl(i));
        }
        return topControl;
    }
}
exports.VariableControlsManager = VariableControlsManager;
class MyValueControlState extends src_1.ValueControlState {
}
class MyValueControl extends src_1.ValueControl {
    constructor(props) {
        super(props);
        this.index = props.index;
    }
}
//# sourceMappingURL=data:application/json;base64,