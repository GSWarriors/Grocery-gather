"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateModelData = exports.ControlInteractionModelGenerator = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const i18next_1 = tslib_1.__importDefault(require("i18next"));
const GeneralControlIntent_1 = require("../intents/GeneralControlIntent");
const SingleValueControlIntent_1 = require("../intents/SingleValueControlIntent");
const ConjunctionControlIntent_1 = require("../intents/ConjunctionControlIntent");
const DateRangeControlIntent_1 = require("../intents/DateRangeControlIntent");
const OrdinalControlIntent_1 = require("../intents/OrdinalControlIntent");
const NumberControlIntent_1 = require("../intents/NumberControlIntent");
const DateControlIntent_1 = require("../intents/DateControlIntent");
const Logger_1 = require("../logging/Logger");
const InteractionModelGenerator_1 = require("./InteractionModelGenerator");
const ModelTypes_1 = require("./ModelTypes");
const log = new Logger_1.Logger('AskSdkControls:ControlInteractionModelGenerator');
const dummyPrompts = [
    {
        id: "Slot.Validation.564246223579.1467418044248.678461230495",
        variations: [
            {
                type: "PlainText",
                value: "This prompt is a dummy included only to ensure there is a dialog model present."
            }
        ]
    }
];
class ControlInteractionModelGenerator extends InteractionModelGenerator_1.InteractionModelGenerator {
    constructor() {
        super(...arguments);
        this.targetSlotIds = new Set();
    }
    /**
     * Update the interaction model for a controlManager
     * It calls the controlManager.buildInteractionModel function to update IM
     * And add dummy dialogModel if SimpleControlIntent is used in control
     *
     * Usage:
     * If the ControlManager is lacking data for the chosen locale, the appropriate data should be add by user themselves
     * User would need to update the ModelDataMap instance and provide it to ControlManager's constructor
     * @param rootControl
     * @param locale The locale code, E.G. 'en-US', 'de-DE', 'ja-JP'. REF: https://developer.amazon.com/en-US/docs/alexa/custom-skills/develop-skills-in-multiple-languages.html#h2-code-changes
     */
    buildCoreModelForControls(controlManager) {
        controlManager.buildInteractionModel(this);
        ensureDialogModel(this, this.intents);
        return this;
    }
    build() {
        const interactionModelData = super.build();
        validateTargetSlots(interactionModelData, this.targetSlotIds);
        return interactionModelData;
    }
    /**
     * Add built-ins AMAZON.YesIntent and AMAZON.NoIntent intents to all built-in controls.
     */
    addYesAndNoIntents() {
        this.addIntent({ name: 'AMAZON.YesIntent' });
        this.addIntent({ name: 'AMAZON.NoIntent' });
        return this;
    }
    addControlIntent(controlIntent, controlIMData) {
        var _a;
        // used to record all present basic slotTypes
        const presentSlotTypesSet = new Set();
        const controlIntentUtterances = generateCompleteIntent(controlIntent, controlIMData);
        this.addIntents(controlIntentUtterances);
        (_a = controlIntentUtterances.slots) === null || _a === void 0 ? void 0 : _a.map((slot) => {
            presentSlotTypesSet.add(slot.name);
        });
        // Loop all SharedSlotTypes
        // if it present in the set, add slotTypes to IM
        for (const slotTypeName of Object.values(ModelTypes_1.SharedSlotType)) {
            // The slotType get from ControlIntent is just a skeleton without values
            // The complete definition should be found in controlIMData
            if (presentSlotTypesSet.has(slotTypeName)) {
                const slotTypes = controlIMData.slotTypes.find((slotType) => slotType.name === slotTypeName);
                if (!slotTypes) {
                    throw new Error(`SlotType ${slotTypeName} doesn't have values registered in the ModelData.`);
                }
                this.addOrMergeSlotTypes(slotTypes);
            }
        }
        return this;
    }
}
exports.ControlInteractionModelGenerator = ControlInteractionModelGenerator;
// Convert Intent to DialogIntent
function buildDialogIntent(intent) {
    const dialogIntent = lodash_1.default.cloneDeep(intent);
    delete dialogIntent.samples;
    dialogIntent.delegationStrategy = 'SKILL_RESPONSE';
    return dialogIntent;
}
/**
 * Generate complete intent with intent samples attached
 * @param controlIntent
 * @param controlIMData
 */
function generateCompleteIntent(controlIntent, controlIMData) {
    var _a;
    // Special logic for SingleValueControlIntent
    if (controlIntent.name.includes('ValueControlIntent')) {
        return handleValueControlIntent(controlIntent, controlIMData);
    }
    const intent = controlIntent.generateIntent();
    const samples = (_a = controlIMData.intentValues.find((intentValue) => intentValue.name === controlIntent.name)) === null || _a === void 0 ? void 0 : _a.samples;
    if (samples === undefined) {
        throw new Error(`${controlIntent.name} doesn't have samples registered in the ModelData.`);
    }
    intent.samples = samples;
    return intent;
}
function handleValueControlIntent(controlIntent, controlIMData) {
    var _a;
    const intent = controlIntent.generateIntent();
    const samples = (_a = controlIMData.intentValues.find((intentValue) => intentValue.name === SingleValueControlIntent_1.SingleValueControlIntent.name)) === null || _a === void 0 ? void 0 : _a.samples;
    if (samples === undefined) {
        throw new Error('Can not find SingleValueControlIntent samples in ModelData');
    }
    const slotType = controlIntent.valueSlotType;
    const replacement = `{${slotType}}`;
    intent.samples = intent.samples || [];
    samples.map((sample) => {
        intent.samples.push(sample.replace('[[valueSlotType]]', replacement));
    });
    return intent;
}
// This method adds a dummy dialogModel so that Dialog directives such as Dialog.ElicitSlotDirective can be used.
// 1. Add dummy validation rule to SimpleControlIntent' target slot
// 2. Add dummy prompt
function ensureDialogModel(generator, intents) {
    var _a;
    // Since one dummy validation is enough to meet slotElicitation requirement
    // And all the builtin controls integrate with the SimpleControlIntent
    // Thus add this dummy validation to the first target type slotType
    const simpleControlIntent = intents.find((intent) => intent.name === GeneralControlIntent_1.GeneralControlIntent.name);
    if (!simpleControlIntent) {
        return;
    }
    const dialogSimpleControlIntent = buildDialogIntent(simpleControlIntent);
    generator.addDialogIntents(dialogSimpleControlIntent);
    const targetSlot = (_a = dialogSimpleControlIntent.slots) === null || _a === void 0 ? void 0 : _a.find((slot) => slot.type === 'target');
    if (targetSlot === undefined) {
        throw new Error('target slot is not present in SimpleControlIntent');
    }
    addDummyValidationRule(targetSlot);
    generator.addPrompts(...dummyPrompts);
}
/**
 *  Add dummy dialog validation rule to the input slot
 * @param targetSlot
 */
function addDummyValidationRule(targetSlot) {
    targetSlot.elicitationRequired = false;
    targetSlot.confirmationRequired = false;
    // The particular dummy model comprises a single slot-validation that will always pass.
    targetSlot.validations = [{
            type: "isNotInSet",
            prompt: "Slot.Validation.564246223579.1467418044248.678461230495",
            values: [
                "This prompt is a dummy included only to ensure there is a dialog model present."
            ]
        }];
}
/**
 * Validate the target slotIds in Controls are present in InteractionModel
 * @param interactionModel
 * @param targetSlotIDs
 */
function validateTargetSlots(interactionModel, targetSlotIds) {
    var _a, _b;
    const presentSlotTypes = (_b = (_a = interactionModel.interactionModel) === null || _a === void 0 ? void 0 : _a.languageModel) === null || _b === void 0 ? void 0 : _b.types;
    for (const targetSlotId of targetSlotIds) {
        if (presentSlotTypes === undefined) {
            log.warn(`target slot with id ${targetSlotId} is not present in InteractionModel.`);
            continue;
        }
        const match = presentSlotTypes.find((slotType) => { var _a; return (_a = slotType.values) === null || _a === void 0 ? void 0 : _a.find((value) => value.id === targetSlotId); });
        if (match === undefined) {
            log.warn(`target slot with id ${targetSlotId} is not present in InteractionModel.`);
        }
    }
}
/**
 * Generate the modelData Object by reading the i18n instance
 */
function generateModelData() {
    const slotTypes = [];
    slotTypes.push(i18next_1.default.t('SHARED_SLOT_TYPES_FEEDBACK', { returnObjects: true }));
    slotTypes.push(i18next_1.default.t('SHARED_SLOT_TYPES_HEAD', { returnObjects: true }));
    slotTypes.push(i18next_1.default.t('SHARED_SLOT_TYPES_TAIL', { returnObjects: true }));
    slotTypes.push(i18next_1.default.t('SHARED_SLOT_TYPES_CONJUNCTION', { returnObjects: true }));
    slotTypes.push(i18next_1.default.t('SHARED_SLOT_TYPES_PREPOSITION', { returnObjects: true }));
    slotTypes.push(i18next_1.default.t('SHARED_SLOT_TYPES_ACTION', { returnObjects: true }));
    slotTypes.push(i18next_1.default.t('SHARED_SLOT_TYPES_TARGET', { returnObjects: true }));
    const intentValues = [];
    intentValues.push({
        name: ConjunctionControlIntent_1.ConjunctionControlIntent.name,
        samples: i18next_1.default.t('CONJUNCTION_CONTROL_INTENT_SAMPLES', { returnObjects: true })
    });
    intentValues.push({
        name: DateControlIntent_1.DateControlIntent.name,
        samples: i18next_1.default.t('DATE_CONTROL_INTENT_SAMPLES', { returnObjects: true })
    });
    intentValues.push({
        name: DateRangeControlIntent_1.DateRangeControlIntent.name,
        samples: i18next_1.default.t('DATE_RANGE_CONTROL_INTENT_SAMPLES', { returnObjects: true })
    });
    intentValues.push({
        name: GeneralControlIntent_1.GeneralControlIntent.name,
        samples: i18next_1.default.t('GENERAL_CONTROL_INTENT_SAMPLES', { returnObjects: true })
    });
    intentValues.push({
        name: NumberControlIntent_1.NumberControlIntent.name,
        samples: i18next_1.default.t('NUMBER_CONTROL_INTENT_SAMPLES', { returnObjects: true })
    });
    intentValues.push({
        name: OrdinalControlIntent_1.OrdinalControlIntent.name,
        samples: i18next_1.default.t('ORDINAL_CONTROL_INTENT_SAMPLES', { returnObjects: true })
    });
    intentValues.push({
        name: SingleValueControlIntent_1.SingleValueControlIntent.name,
        samples: i18next_1.default.t('SINGLE_VALUE_CONTROL_INTENT_SAMPLES', { returnObjects: true })
    });
    return {
        slotTypes,
        intentValues
    };
}
exports.generateModelData = generateModelData;
//# sourceMappingURL=data:application/json;base64,