"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneralControlIntent = exports.unpackGeneralControlIntent = void 0;
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const BaseControlIntent_1 = require("./BaseControlIntent");
const IntentUtils_1 = require("../utils/IntentUtils");
function unpackGeneralControlIntent(intent) {
    if (!intent.name.startsWith('GeneralControlIntent')) {
        throw new Error(`Not a compatible intent : ${intent.name}`);
    }
    let feedback;
    let action;
    let target;
    for (const [name, slot] of Object.entries(intent.slots)) {
        const slotObject = IntentUtils_1.getSlotResolutions(slot);
        const slotValue = slotObject ? slotObject.slotValue : undefined;
        switch (name) {
            case 'feedback':
                feedback = slotValue;
                break;
            case 'action':
                action = slotValue;
                break;
            case 'target':
                target = slotValue;
                break;
            case 'head': break;
            case 'tail': break;
            default: throw new Error('not handled');
        }
    }
    return {
        feedback,
        action,
        target,
    };
}
exports.unpackGeneralControlIntent = unpackGeneralControlIntent;
class GeneralControlIntent extends BaseControlIntent_1.BaseControlIntent {
    static of(slots) {
        return IntentUtils_1.IntentBuilder.of(this.prototype.constructor.name, slots);
    }
    generateIntent() {
        return {
            name: this.name,
            slots: this.generateSlots(),
            samples: [],
        };
    }
    generateSlots() {
        const slots = [
            {
                name: 'feedback',
                type: ModelTypes_1.SharedSlotType.FEEDBACK,
            },
            {
                name: 'action',
                type: ModelTypes_1.SharedSlotType.ACTION
            },
            {
                name: 'target',
                type: ModelTypes_1.SharedSlotType.TARGET
            },
            {
                name: 'head',
                type: ModelTypes_1.SharedSlotType.HEAD
            },
            {
                name: 'tail',
                type: ModelTypes_1.SharedSlotType.TAIL
            }
        ];
        return slots;
    }
    generateSlotTypes() {
        return [];
    }
}
exports.GeneralControlIntent = GeneralControlIntent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2VuZXJhbENvbnRyb2xJbnRlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZW50cy9HZW5lcmFsQ29udHJvbEludGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUlILHlFQUEwRTtBQUMxRSwyREFBd0Q7QUFDeEQsc0RBQXlFO0FBV3pFLFNBQWdCLDBCQUEwQixDQUFDLE1BQWM7SUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQUU7UUFDakQsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7S0FDL0Q7SUFFRCxJQUFJLFFBQTRCLENBQUM7SUFDakMsSUFBSSxNQUEwQixDQUFDO0lBQy9CLElBQUksTUFBMEIsQ0FBQztJQUUvQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBTSxDQUFDLEVBQUU7UUFDdEQsTUFBTSxVQUFVLEdBQUcsZ0NBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFFaEUsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLFVBQVU7Z0JBQUUsUUFBUSxHQUFHLFNBQVMsQ0FBQztnQkFBQyxNQUFNO1lBQzdDLEtBQUssUUFBUTtnQkFBRSxNQUFNLEdBQUcsU0FBUyxDQUFDO2dCQUFDLE1BQU07WUFDekMsS0FBSyxRQUFRO2dCQUFFLE1BQU0sR0FBRyxTQUFTLENBQUM7Z0JBQUMsTUFBTTtZQUN6QyxLQUFLLE1BQU0sQ0FBQyxDQUFDLE1BQU07WUFDbkIsS0FBSyxNQUFNLENBQUMsQ0FBQyxNQUFNO1lBRW5CLE9BQU8sQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDM0M7S0FDSjtJQUVELE9BQU87UUFDSCxRQUFRO1FBQ1IsTUFBTTtRQUNOLE1BQU07S0FDVCxDQUFDO0FBQ04sQ0FBQztBQTdCRCxnRUE2QkM7QUFHRCxNQUFhLG9CQUFxQixTQUFRLHFDQUFpQjtJQUV2RCxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQWdDO1FBQ3RDLE9BQU8sMkJBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTztZQUNILElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQzNCLE9BQU8sRUFBRSxFQUFFO1NBQ2QsQ0FBQztJQUNOLENBQUM7SUFFRCxhQUFhO1FBQ1QsTUFBTSxLQUFLLEdBQStDO1lBQ3REO2dCQUNJLElBQUksRUFBRSxVQUFVO2dCQUNoQixJQUFJLEVBQUUsMkJBQWMsQ0FBQyxRQUFRO2FBQ2hDO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsSUFBSSxFQUFFLDJCQUFjLENBQUMsTUFBTTthQUM5QjtZQUNEO2dCQUNJLElBQUksRUFBRSxRQUFRO2dCQUNkLElBQUksRUFBRSwyQkFBYyxDQUFDLE1BQU07YUFDOUI7WUFDRDtnQkFDSSxJQUFJLEVBQUUsTUFBTTtnQkFDWixJQUFJLEVBQUUsMkJBQWMsQ0FBQyxJQUFJO2FBQzVCO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLE1BQU07Z0JBQ1osSUFBSSxFQUFFLDJCQUFjLENBQUMsSUFBSTthQUM1QjtTQUNKLENBQUM7UUFFRixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBQ0QsaUJBQWlCO1FBQ2IsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0o7QUEzQ0Qsb0RBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE5IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW50ZW50IH0gZnJvbSBcImFzay1zZGstbW9kZWxcIjtcbmltcG9ydCB7IHYxIH0gZnJvbSAnYXNrLXNtYXBpLW1vZGVsJztcbmltcG9ydCB7IFNoYXJlZFNsb3RUeXBlIH0gZnJvbSAnLi4vaW50ZXJhY3Rpb25Nb2RlbEdlbmVyYXRpb24vTW9kZWxUeXBlcyc7XG5pbXBvcnQgeyBCYXNlQ29udHJvbEludGVudCB9IGZyb20gJy4vQmFzZUNvbnRyb2xJbnRlbnQnO1xuaW1wb3J0IHsgZ2V0U2xvdFJlc29sdXRpb25zLCBJbnRlbnRCdWlsZGVyIH0gZnJvbSAnLi4vdXRpbHMvSW50ZW50VXRpbHMnO1xuaW1wb3J0IFNsb3RUeXBlID0gdjEuc2tpbGwuaW50ZXJhY3Rpb25Nb2RlbC5TbG90VHlwZTtcblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhbENvbnRyb2xJbnRlbnRTbG90cyB7XG4gICAgZmVlZGJhY2s/OiBzdHJpbmcsXG4gICAgYWN0aW9uPzogc3RyaW5nLFxuICAgIHRhcmdldD86IHN0cmluZyxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucGFja0dlbmVyYWxDb250cm9sSW50ZW50KGludGVudDogSW50ZW50KTogR2VuZXJhbENvbnRyb2xJbnRlbnRTbG90cyB7XG4gICAgaWYgKCFpbnRlbnQubmFtZS5zdGFydHNXaXRoKCdHZW5lcmFsQ29udHJvbEludGVudCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IGEgY29tcGF0aWJsZSBpbnRlbnQgOiAke2ludGVudC5uYW1lfWApO1xuICAgIH1cblxuICAgIGxldCBmZWVkYmFjazogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGxldCBhY3Rpb246IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgdGFyZ2V0OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBzbG90XSBvZiBPYmplY3QuZW50cmllcyhpbnRlbnQuc2xvdHMhKSkge1xuICAgICAgICBjb25zdCBzbG90T2JqZWN0ID0gZ2V0U2xvdFJlc29sdXRpb25zKHNsb3QpO1xuICAgICAgICBjb25zdCBzbG90VmFsdWUgPSBzbG90T2JqZWN0ID8gc2xvdE9iamVjdC5zbG90VmFsdWUgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdmZWVkYmFjayc6IGZlZWRiYWNrID0gc2xvdFZhbHVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FjdGlvbic6IGFjdGlvbiA9IHNsb3RWYWx1ZTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0YXJnZXQnOiB0YXJnZXQgPSBzbG90VmFsdWU7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaGVhZCc6IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGFpbCc6IGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ25vdCBoYW5kbGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmZWVkYmFjayxcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICB0YXJnZXQsXG4gICAgfTtcbn1cblxuXG5leHBvcnQgY2xhc3MgR2VuZXJhbENvbnRyb2xJbnRlbnQgZXh0ZW5kcyBCYXNlQ29udHJvbEludGVudCB7XG5cbiAgICBzdGF0aWMgb2Yoc2xvdHM6IEdlbmVyYWxDb250cm9sSW50ZW50U2xvdHMpOiBJbnRlbnQge1xuICAgICAgICByZXR1cm4gSW50ZW50QnVpbGRlci5vZih0aGlzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lLCBzbG90cyk7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVJbnRlbnQoKTogdjEuc2tpbGwuaW50ZXJhY3Rpb25Nb2RlbC5JbnRlbnQge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgc2xvdHM6IHRoaXMuZ2VuZXJhdGVTbG90cygpLFxuICAgICAgICAgICAgc2FtcGxlczogW10sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVTbG90cygpOiB2MS5za2lsbC5pbnRlcmFjdGlvbk1vZGVsLlNsb3REZWZpbml0aW9uW10ge1xuICAgICAgICBjb25zdCBzbG90czogdjEuc2tpbGwuaW50ZXJhY3Rpb25Nb2RlbC5TbG90RGVmaW5pdGlvbltdID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdmZWVkYmFjaycsXG4gICAgICAgICAgICAgICAgdHlwZTogU2hhcmVkU2xvdFR5cGUuRkVFREJBQ0ssXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdhY3Rpb24nLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlZFNsb3RUeXBlLkFDVElPTlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAndGFyZ2V0JyxcbiAgICAgICAgICAgICAgICB0eXBlOiBTaGFyZWRTbG90VHlwZS5UQVJHRVRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2hlYWQnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlZFNsb3RUeXBlLkhFQURcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3RhaWwnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFNoYXJlZFNsb3RUeXBlLlRBSUxcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcblxuICAgICAgICByZXR1cm4gc2xvdHM7XG4gICAgfVxuICAgIGdlbmVyYXRlU2xvdFR5cGVzKCk6IFNsb3RUeXBlW10ge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufSJdfQ==