import { IControlInput } from './IControlInput';
import { IControlResultBuilder } from './IControlResultBuilder';
/**
 * Defines a Control object that manages state and dialog behavior.
 *
 * This is the minimal definition required by the Runtime (ControlHandler)
 * See `Control` for the actual class used by Control implementations.
 */
export interface IControl {
    id: string;
    /**
     * Determines if the Control or one of its children can consume the request described by the input object
     */
    canHandle(input: IControlInput): boolean | Promise<boolean>;
    /**
     * Handles the request described by the input object.
     */
    handle(input: IControlInput, resultBuilder: IControlResultBuilder): void | Promise<void>;
    /**
     * Determines if the Control can take the initiative.
     */
    canTakeInitiative(input: IControlInput): boolean | Promise<boolean>;
    /**
     * Takes the initiative by adding an InitiativeAct to the result.
     */
    takeInitiative(input: IControlInput, resultBuilder: IControlResultBuilder): void | Promise<void>;
    /**
     * Gets the Control's state as an object that is serializable.
     */
    getSerializableState(): any;
    /**
     * Sets the state from a serialized state object
     */
    setSerializableState(serializedState: any): void;
}
//# sourceMappingURL=IControl.d.ts.map