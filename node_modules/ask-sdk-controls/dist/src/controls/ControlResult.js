"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlResultBuilder = exports.ControlResult = void 0;
const SessionBehavior_1 = require("../runtime/SessionBehavior");
class ControlResult {
    constructor(acts, sessionBehavior) {
        this.acts = acts;
        this.sessionBehavior = sessionBehavior;
    }
    toString() {
        return stringifyItems(this.acts);
    }
    hasInitiativeAct() {
        return controlResultHasInitiativeAct(this);
    }
}
exports.ControlResult = ControlResult;
class ControlResultBuilder {
    constructor(acts) {
        this.acts = acts !== null && acts !== void 0 ? acts : [];
        this.sessionBehavior = SessionBehavior_1.SessionBehavior.OPEN;
    }
    build() {
        return new ControlResult(this.acts, this.sessionBehavior);
    }
    /**
     * Add an act.
     *
     * Usage:
     *  * A act should contain simple data without any presentation. The render phase
     *    will convert it to a presentation form.
     *
     *  * If the session needs to be ended, also call `resultBuilder.endSession()`.
     *
     * @param item
     */
    addAct(act) {
        if (this.hasInitiativeAct() && act.takesInitiative) {
            throw new Error(`Result already contains an initiative item. (If handle() produced an initiative item and takeInitiative also ran, a common issue is missing 'await').`
                + `Trying to add ${act.toString()}. Existing items: ${stringifyItems(this.acts)}`);
        }
        this.acts.push(act);
        return this;
    }
    /**
     * Force the user session to end.
     *
     * See https://developer.amazon.com/en-US/docs/alexa/echo-button-skills/keep-session-open.html
     *
     * Framework behavior:
     *  * this causes the framework to call ask-core.ResponseBuilder.withShouldEndSession(true)
     *  * The default behavior for the Control framework is to keep the session open.
     *
     * Skill/device behavior:
     *  * Subsequent utterances will not be routed to the skill.
     *  * A new launch command will start a fresh session.
     *
     */
    endSession() {
        this.sessionBehavior = SessionBehavior_1.SessionBehavior.END;
    }
    /**
     * Force the user session to immediately enter the idle state.
     *
     * * Framework behavior:
     *  * this causes the framework to call ask-core.ResponseBuilder.withShouldEndSession(undefined)
     *
     *
     * Skill/device behavior:
     *  * The session remains alive but the microphone is closed.
     *  * The user can interact with the skill but must use the wake-word.
     */
    enterIdleState() {
        this.sessionBehavior = SessionBehavior_1.SessionBehavior.IDLE;
    }
    toString() {
        return stringifyItems(this.acts);
    }
    hasInitiativeAct() {
        return controlResultHasInitiativeAct(this);
    }
}
exports.ControlResultBuilder = ControlResultBuilder;
function controlResultHasInitiativeAct(result) {
    return result.acts.find((item) => item.takesInitiative) !== undefined;
}
function stringifyItems(items) {
    const itemStrs = [];
    for (const item of items) {
        itemStrs.push(item.toString());
    }
    return `[${itemStrs.join(', ')}]`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJvbFJlc3VsdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb250cm9scy9Db250cm9sUmVzdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7O0FBRUgsZ0VBQTZEO0FBSTdELE1BQWEsYUFBYTtJQUl0QixZQUFZLElBQWlCLEVBQUUsZUFBZ0M7UUFDM0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7SUFDM0MsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGdCQUFnQjtRQUNaLE9BQU8sNkJBQTZCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQztDQUVKO0FBakJELHNDQWlCQztBQUVELE1BQWEsb0JBQW9CO0lBSTdCLFlBQVksSUFBa0I7UUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLGFBQUosSUFBSSxjQUFKLElBQUksR0FBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxpQ0FBZSxDQUFDLElBQUksQ0FBQztJQUNoRCxDQUFDO0lBRUQsS0FBSztRQUNELE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUdEOzs7Ozs7Ozs7O09BVUc7SUFDSCxNQUFNLENBQUMsR0FBYztRQUNqQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUU7WUFDaEQsTUFBTSxJQUFJLEtBQUssQ0FBQyx1SkFBdUo7a0JBQ25LLGlCQUFpQixHQUFHLENBQUMsUUFBUSxFQUFFLHFCQUFxQixjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN4RjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFHRDs7Ozs7Ozs7Ozs7OztPQWFHO0lBQ0gsVUFBVTtRQUNOLElBQUksQ0FBQyxlQUFlLEdBQUcsaUNBQWUsQ0FBQyxHQUFHLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCxjQUFjO1FBQ1YsSUFBSSxDQUFDLGVBQWUsR0FBRyxpQ0FBZSxDQUFDLElBQUksQ0FBQztJQUNoRCxDQUFDO0lBR0QsUUFBUTtRQUNKLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsZ0JBQWdCO1FBQ1osT0FBTyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBR0o7QUE5RUQsb0RBOEVDO0FBSUQsU0FBUyw2QkFBNkIsQ0FBQyxNQUFzQjtJQUN6RCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQzFFLENBQUM7QUFHRCxTQUFTLGNBQWMsQ0FBQyxLQUFtQjtJQUN2QyxNQUFNLFFBQVEsR0FBYSxFQUFFLENBQUM7SUFDOUIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUNsQztJQUNELE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDdEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNlc3Npb25CZWhhdmlvciB9IGZyb20gJy4uL3J1bnRpbWUvU2Vzc2lvbkJlaGF2aW9yJztcbmltcG9ydCB7IFN5c3RlbUFjdCwgSVN5c3RlbUFjdCB9IGZyb20gJy4uL3N5c3RlbUFjdHMvU3lzdGVtQWN0JztcbmltcG9ydCB7IElDb250cm9sUmVzdWx0IH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lDb250cm9sUmVzdWx0JztcblxuZXhwb3J0IGNsYXNzIENvbnRyb2xSZXN1bHQgaW1wbGVtZW50cyBJQ29udHJvbFJlc3VsdCB7XG4gICAgYWN0czogU3lzdGVtQWN0W107XG4gICAgc2Vzc2lvbkJlaGF2aW9yOiBTZXNzaW9uQmVoYXZpb3I7XG5cbiAgICBjb25zdHJ1Y3RvcihhY3RzOiBTeXN0ZW1BY3RbXSwgc2Vzc2lvbkJlaGF2aW9yOiBTZXNzaW9uQmVoYXZpb3IpIHtcbiAgICAgICAgdGhpcy5hY3RzID0gYWN0cztcbiAgICAgICAgdGhpcy5zZXNzaW9uQmVoYXZpb3IgPSBzZXNzaW9uQmVoYXZpb3I7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeUl0ZW1zKHRoaXMuYWN0cyk7XG4gICAgfVxuXG4gICAgaGFzSW5pdGlhdGl2ZUFjdCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGNvbnRyb2xSZXN1bHRIYXNJbml0aWF0aXZlQWN0KHRoaXMpO1xuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgQ29udHJvbFJlc3VsdEJ1aWxkZXIge1xuICAgIGFjdHM6IFN5c3RlbUFjdFtdO1xuICAgIHNlc3Npb25CZWhhdmlvcjogU2Vzc2lvbkJlaGF2aW9yO1xuXG4gICAgY29uc3RydWN0b3IoYWN0cz86IFN5c3RlbUFjdFtdKSB7XG4gICAgICAgIHRoaXMuYWN0cyA9IGFjdHMgPz8gW107XG4gICAgICAgIHRoaXMuc2Vzc2lvbkJlaGF2aW9yID0gU2Vzc2lvbkJlaGF2aW9yLk9QRU47XG4gICAgfVxuXG4gICAgYnVpbGQoKTogQ29udHJvbFJlc3VsdCB7XG4gICAgICAgIHJldHVybiBuZXcgQ29udHJvbFJlc3VsdCh0aGlzLmFjdHMsIHRoaXMuc2Vzc2lvbkJlaGF2aW9yKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBhY3QuXG4gICAgICpcbiAgICAgKiBVc2FnZTpcbiAgICAgKiAgKiBBIGFjdCBzaG91bGQgY29udGFpbiBzaW1wbGUgZGF0YSB3aXRob3V0IGFueSBwcmVzZW50YXRpb24uIFRoZSByZW5kZXIgcGhhc2VcbiAgICAgKiAgICB3aWxsIGNvbnZlcnQgaXQgdG8gYSBwcmVzZW50YXRpb24gZm9ybS5cbiAgICAgKlxuICAgICAqICAqIElmIHRoZSBzZXNzaW9uIG5lZWRzIHRvIGJlIGVuZGVkLCBhbHNvIGNhbGwgYHJlc3VsdEJ1aWxkZXIuZW5kU2Vzc2lvbigpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICovXG4gICAgYWRkQWN0KGFjdDogU3lzdGVtQWN0KTogdGhpcyB7XG4gICAgICAgIGlmICh0aGlzLmhhc0luaXRpYXRpdmVBY3QoKSAmJiBhY3QudGFrZXNJbml0aWF0aXZlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlc3VsdCBhbHJlYWR5IGNvbnRhaW5zIGFuIGluaXRpYXRpdmUgaXRlbS4gKElmIGhhbmRsZSgpIHByb2R1Y2VkIGFuIGluaXRpYXRpdmUgaXRlbSBhbmQgdGFrZUluaXRpYXRpdmUgYWxzbyByYW4sIGEgY29tbW9uIGlzc3VlIGlzIG1pc3NpbmcgJ2F3YWl0JykuYFxuICAgICAgICAgICAgICArIGBUcnlpbmcgdG8gYWRkICR7YWN0LnRvU3RyaW5nKCl9LiBFeGlzdGluZyBpdGVtczogJHtzdHJpbmdpZnlJdGVtcyh0aGlzLmFjdHMpfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0cy5wdXNoKGFjdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogRm9yY2UgdGhlIHVzZXIgc2Vzc2lvbiB0byBlbmQuXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYW1hem9uLmNvbS9lbi1VUy9kb2NzL2FsZXhhL2VjaG8tYnV0dG9uLXNraWxscy9rZWVwLXNlc3Npb24tb3Blbi5odG1sXG4gICAgICpcbiAgICAgKiBGcmFtZXdvcmsgYmVoYXZpb3I6XG4gICAgICogICogdGhpcyBjYXVzZXMgdGhlIGZyYW1ld29yayB0byBjYWxsIGFzay1jb3JlLlJlc3BvbnNlQnVpbGRlci53aXRoU2hvdWxkRW5kU2Vzc2lvbih0cnVlKVxuICAgICAqICAqIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGZvciB0aGUgQ29udHJvbCBmcmFtZXdvcmsgaXMgdG8ga2VlcCB0aGUgc2Vzc2lvbiBvcGVuLlxuICAgICAqXG4gICAgICogU2tpbGwvZGV2aWNlIGJlaGF2aW9yOlxuICAgICAqICAqIFN1YnNlcXVlbnQgdXR0ZXJhbmNlcyB3aWxsIG5vdCBiZSByb3V0ZWQgdG8gdGhlIHNraWxsLlxuICAgICAqICAqIEEgbmV3IGxhdW5jaCBjb21tYW5kIHdpbGwgc3RhcnQgYSBmcmVzaCBzZXNzaW9uLlxuICAgICAqXG4gICAgICovXG4gICAgZW5kU2Vzc2lvbigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uQmVoYXZpb3IgPSBTZXNzaW9uQmVoYXZpb3IuRU5EO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcmNlIHRoZSB1c2VyIHNlc3Npb24gdG8gaW1tZWRpYXRlbHkgZW50ZXIgdGhlIGlkbGUgc3RhdGUuXG4gICAgICpcbiAgICAgKiAqIEZyYW1ld29yayBiZWhhdmlvcjpcbiAgICAgKiAgKiB0aGlzIGNhdXNlcyB0aGUgZnJhbWV3b3JrIHRvIGNhbGwgYXNrLWNvcmUuUmVzcG9uc2VCdWlsZGVyLndpdGhTaG91bGRFbmRTZXNzaW9uKHVuZGVmaW5lZClcbiAgICAgKlxuICAgICAqXG4gICAgICogU2tpbGwvZGV2aWNlIGJlaGF2aW9yOlxuICAgICAqICAqIFRoZSBzZXNzaW9uIHJlbWFpbnMgYWxpdmUgYnV0IHRoZSBtaWNyb3Bob25lIGlzIGNsb3NlZC5cbiAgICAgKiAgKiBUaGUgdXNlciBjYW4gaW50ZXJhY3Qgd2l0aCB0aGUgc2tpbGwgYnV0IG11c3QgdXNlIHRoZSB3YWtlLXdvcmQuXG4gICAgICovXG4gICAgZW50ZXJJZGxlU3RhdGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbkJlaGF2aW9yID0gU2Vzc2lvbkJlaGF2aW9yLklETEU7XG4gICAgfVxuXG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5SXRlbXModGhpcy5hY3RzKTtcbiAgICB9XG5cbiAgICBoYXNJbml0aWF0aXZlQWN0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gY29udHJvbFJlc3VsdEhhc0luaXRpYXRpdmVBY3QodGhpcyk7XG4gICAgfVxuXG5cbn1cblxuXG5cbmZ1bmN0aW9uIGNvbnRyb2xSZXN1bHRIYXNJbml0aWF0aXZlQWN0KHJlc3VsdDogSUNvbnRyb2xSZXN1bHQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcmVzdWx0LmFjdHMuZmluZCgoaXRlbSkgPT4gaXRlbS50YWtlc0luaXRpYXRpdmUpICE9PSB1bmRlZmluZWQ7XG59XG5cblxuZnVuY3Rpb24gc3RyaW5naWZ5SXRlbXMoaXRlbXM6IElTeXN0ZW1BY3RbXSkge1xuICAgIGNvbnN0IGl0ZW1TdHJzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICBpdGVtU3Rycy5wdXNoKGl0ZW0udG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIHJldHVybiBgWyR7aXRlbVN0cnMuam9pbignLCAnKX1dYDtcbn0iXX0=