import { SessionBehavior } from '../runtime/SessionBehavior';
import { SystemAct } from '../systemActs/SystemAct';
import { IControlResult } from './interfaces/IControlResult';
export declare class ControlResult implements IControlResult {
    acts: SystemAct[];
    sessionBehavior: SessionBehavior;
    constructor(acts: SystemAct[], sessionBehavior: SessionBehavior);
    toString(): string;
    hasInitiativeAct(): boolean;
}
export declare class ControlResultBuilder {
    acts: SystemAct[];
    sessionBehavior: SessionBehavior;
    constructor(acts?: SystemAct[]);
    build(): ControlResult;
    /**
     * Add an act.
     *
     * Usage:
     *  * A act should contain simple data without any presentation. The render phase
     *    will convert it to a presentation form.
     *
     *  * If the session needs to be ended, also call `resultBuilder.endSession()`.
     *
     * @param item
     */
    addAct(act: SystemAct): this;
    /**
     * Force the user session to end.
     *
     * See https://developer.amazon.com/en-US/docs/alexa/echo-button-skills/keep-session-open.html
     *
     * Framework behavior:
     *  * this causes the framework to call ask-core.ResponseBuilder.withShouldEndSession(true)
     *  * The default behavior for the Control framework is to keep the session open.
     *
     * Skill/device behavior:
     *  * Subsequent utterances will not be routed to the skill.
     *  * A new launch command will start a fresh session.
     *
     */
    endSession(): void;
    /**
     * Force the user session to immediately enter the idle state.
     *
     * * Framework behavior:
     *  * this causes the framework to call ask-core.ResponseBuilder.withShouldEndSession(undefined)
     *
     *
     * Skill/device behavior:
     *  * The session remains alive but the microphone is closed.
     *  * The user can interact with the skill but must use the wake-word.
     */
    enterIdleState(): void;
    toString(): string;
    hasInitiativeAct(): boolean;
}
//# sourceMappingURL=ControlResult.d.ts.map