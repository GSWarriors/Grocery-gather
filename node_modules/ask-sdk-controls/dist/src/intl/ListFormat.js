"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListFormatting = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
var ListFormatting;
(function (ListFormatting) {
    /**
     * Format a list with commas and a joiner word.
     *
     * Example: formatList(['a', 'b', 'c'], 'and or') -> 'a, b, and or c'
     *
     * This can mostly be replaced with Intl.ListFormat(style:'long', ..) once it is implemented for NodeJS.
     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat
     *
     * @param arr
     * @param joiner
     */
    function format(arr, joiner = "or") {
        if (arr.length === 0) {
            return "(empty)";
        }
        if (arr.length === 1) {
            return arr[0];
        }
        if (arr.length === 2) {
            return `${arr[0]} ${joiner} ${arr[1]}`;
        }
        else {
            return `${lodash_1.default.join(lodash_1.default.take(arr, arr.length - 1), ", ")} ${joiner} ${arr[arr.length - 1]}`;
        }
    }
    ListFormatting.format = format;
})(ListFormatting = exports.ListFormatting || (exports.ListFormatting = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdEZvcm1hdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbnRsL0xpc3RGb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7OztHQVdHOzs7O0FBRUgsNERBQXVCO0FBRXZCLElBQWlCLGNBQWMsQ0EwQjlCO0FBMUJELFdBQWlCLGNBQWM7SUFDM0I7Ozs7Ozs7Ozs7T0FVRztJQUNILFNBQWdCLE1BQU0sQ0FBQyxHQUFhLEVBQUUsTUFBTSxHQUFHLElBQUk7UUFDL0MsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNsQixPQUFPLFNBQVMsQ0FBQztTQUNwQjtRQUNELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakI7UUFDRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQzFDO2FBQ0k7WUFDRCxPQUFPLEdBQUcsZ0JBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDMUY7SUFDTCxDQUFDO0lBYmUscUJBQU0sU0FhckIsQ0FBQTtBQUNMLENBQUMsRUExQmdCLGNBQWMsR0FBZCxzQkFBYyxLQUFkLHNCQUFjLFFBMEI5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBfIGZyb20gXCJsb2Rhc2hcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXN0Rm9ybWF0dGluZyB7XG4gICAgLyoqXG4gICAgICogRm9ybWF0IGEgbGlzdCB3aXRoIGNvbW1hcyBhbmQgYSBqb2luZXIgd29yZC5cbiAgICAgKiBcbiAgICAgKiBFeGFtcGxlOiBmb3JtYXRMaXN0KFsnYScsICdiJywgJ2MnXSwgJ2FuZCBvcicpIC0+ICdhLCBiLCBhbmQgb3IgYydcbiAgICAgKiBcbiAgICAgKiBUaGlzIGNhbiBtb3N0bHkgYmUgcmVwbGFjZWQgd2l0aCBJbnRsLkxpc3RGb3JtYXQoc3R5bGU6J2xvbmcnLCAuLikgb25jZSBpdCBpcyBpbXBsZW1lbnRlZCBmb3IgTm9kZUpTLlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL0xpc3RGb3JtYXRcbiAgICAgKiAgXG4gICAgICogQHBhcmFtIGFyciBcbiAgICAgKiBAcGFyYW0gam9pbmVyIFxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBmb3JtYXQoYXJyOiBzdHJpbmdbXSwgam9pbmVyID0gXCJvclwiKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBcIihlbXB0eSlcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGFyclswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIGAke2FyclswXX0gJHtqb2luZXJ9ICR7YXJyWzFdfWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7Xy5qb2luKF8udGFrZShhcnIsIGFyci5sZW5ndGggLSAxKSwgXCIsIFwiKX0gJHtqb2luZXJ9ICR7YXJyW2Fyci5sZW5ndGggLSAxXX1gO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==