"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnglishGrammar = void 0;
var EnglishGrammar;
(function (EnglishGrammar) {
    /**
     * Choose the article to use in English noun phrases  (a vs an)
     *
     * This is only a partial implementation.
     * See https://www.grammar.com/a-vs-an-when-to-use/
     * @param antecedent
     */
    function article(antecedent) {
        const firstLetter = antecedent.trim()[0];
        if (["a", "e", "i", "o", "u"].includes(firstLetter)) {
            return "an";
        }
        else {
            return "a";
        }
    }
    EnglishGrammar.article = article;
    /**
     * Render a noun in singular or plural form
     *
     * Both the singular and plural form of the noun must be supplied as arguments.
     *
     * Rule:
     *  * 1 -> singular
     *  * else -> plural  (including zero)
     *
     * @param count
     * @param noun
     * @param suffix
     */
    function renderNoun(count, singular, plural) {
        return (count === 1 || count === '1') ? singular : plural;
    }
    EnglishGrammar.renderNoun = renderNoun;
})(EnglishGrammar = exports.EnglishGrammar || (exports.EnglishGrammar = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5nbGlzaEdyYW1tYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50bC9FbmdsaXNoR3JhbW1hci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUdILElBQWlCLGNBQWMsQ0FrQzlCO0FBbENELFdBQWlCLGNBQWM7SUFDM0I7Ozs7OztPQU1HO0lBQ0gsU0FBZ0IsT0FBTyxDQUFDLFVBQWtCO1FBQ3RDLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUNqRCxPQUFPLElBQUksQ0FBQztTQUNmO2FBQ0k7WUFDRCxPQUFPLEdBQUcsQ0FBQztTQUNkO0lBQ0wsQ0FBQztJQVJlLHNCQUFPLFVBUXRCLENBQUE7SUFFRDs7Ozs7Ozs7Ozs7O09BWUc7SUFDSCxTQUFnQixVQUFVLENBQUMsS0FBc0IsRUFBRSxRQUFnQixFQUFFLE1BQWM7UUFDL0UsT0FBTyxDQUFDLEtBQUssS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUM5RCxDQUFDO0lBRmUseUJBQVUsYUFFekIsQ0FBQTtBQUNMLENBQUMsRUFsQ2dCLGNBQWMsR0FBZCxzQkFBYyxLQUFkLHNCQUFjLFFBa0M5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuZXhwb3J0IG5hbWVzcGFjZSBFbmdsaXNoR3JhbW1hciB7XG4gICAgLyoqXG4gICAgICogQ2hvb3NlIHRoZSBhcnRpY2xlIHRvIHVzZSBpbiBFbmdsaXNoIG5vdW4gcGhyYXNlcyAgKGEgdnMgYW4pXG4gICAgICogXG4gICAgICogVGhpcyBpcyBvbmx5IGEgcGFydGlhbCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBTZWUgaHR0cHM6Ly93d3cuZ3JhbW1hci5jb20vYS12cy1hbi13aGVuLXRvLXVzZS9cbiAgICAgKiBAcGFyYW0gYW50ZWNlZGVudCBcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gYXJ0aWNsZShhbnRlY2VkZW50OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZmlyc3RMZXR0ZXIgPSBhbnRlY2VkZW50LnRyaW0oKVswXTtcbiAgICAgICAgaWYgKFtcImFcIiwgXCJlXCIsIFwiaVwiLCBcIm9cIiwgXCJ1XCJdLmluY2x1ZGVzKGZpcnN0TGV0dGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiYW5cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcImFcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIG5vdW4gaW4gc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm1cbiAgICAgKiBcbiAgICAgKiBCb3RoIHRoZSBzaW5ndWxhciBhbmQgcGx1cmFsIGZvcm0gb2YgdGhlIG5vdW4gbXVzdCBiZSBzdXBwbGllZCBhcyBhcmd1bWVudHMuXG4gICAgICogXG4gICAgICogUnVsZTpcbiAgICAgKiAgKiAxIC0+IHNpbmd1bGFyICAgICBcbiAgICAgKiAgKiBlbHNlIC0+IHBsdXJhbCAgKGluY2x1ZGluZyB6ZXJvKVxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjb3VudCBcbiAgICAgKiBAcGFyYW0gbm91biBcbiAgICAgKiBAcGFyYW0gc3VmZml4IFxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiByZW5kZXJOb3VuKGNvdW50OiBudW1iZXIgfCBzdHJpbmcsIHNpbmd1bGFyOiBzdHJpbmcsIHBsdXJhbDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiAoY291bnQgPT09IDEgfHwgY291bnQgPT09ICcxJykgPyBzaW5ndWxhciA6IHBsdXJhbDtcbiAgICB9XG59Il19