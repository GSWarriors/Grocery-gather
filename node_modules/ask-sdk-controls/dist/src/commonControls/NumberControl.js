"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberControl = exports.NumberControlState = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const i18next_1 = tslib_1.__importDefault(require("i18next"));
const __1 = require("..");
const Strings_1 = require("../constants/Strings");
const Control_1 = require("../controls/Control");
const GeneralControlIntent_1 = require("../intents/GeneralControlIntent");
const ModelTypes_1 = require("../interactionModelGeneration/ModelTypes");
const Logger_1 = require("../logging/Logger");
const ContentActs_1 = require("../systemActs/ContentActs");
const InitiativeActs_1 = require("../systemActs/InitiativeActs");
const log = new Logger_1.Logger('AskSdkControls:NumberControl');
class NumberControlState {
    constructor() {
        this.isValueConfirmed = false;
        this.rejectedValues = [];
    }
}
exports.NumberControlState = NumberControlState;
/**
 * Main class for NumberControl.
 * For constructor parameters please read the interface @NumberControlProps .
 */
class NumberControl extends Control_1.Control {
    constructor(props) {
        super(props.id);
        this.state = new NumberControlState();
        this.rawProps = props;
        this.props = NumberControl.mergeWithDefaultProps(props);
    }
    static mergeWithDefaultProps(props) {
        const defaults = {
            id: 'placeholder',
            interactionModel: {
                actions: {
                    set: [Strings_1.Strings.Action.Set],
                    change: [Strings_1.Strings.Action.Change],
                },
                targets: ['number', Strings_1.Strings.Target.It]
            },
            prompts: {
                requestValue: i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_REQUEST_VALUE'),
                confirmValue: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_CONFIRM_VALUE', { value: act.payload.value }),
                valueDisaffirmed: i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_VALUE_DISAFFIRMED'),
                valueSet: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_VALUE_SET', { value: act.payload.value }),
                valueAffirmed: i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_VALUE_AFFIRMED'),
                suggestValue: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_SUGGEST_VALUE', { value: act.payload.value }),
                informConfusingDisconfirmation: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_INFORM_CONFUSING_DISCONFIRMATION'),
                informConfusingConfirmation: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_INFORM_CONFUSING_CONFIRMATION', { previousValue: act.payload.value }),
                repeatUnusableValue: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_REPEAT_UNUSABLE_VALUE', { value: act.payload.value }),
                invalidValue: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_INVALID_VALUE_WITH_REASON', { value: act.payload.value, reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('NUMBER_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_VALUE', { value: act.payload.value });
                },
            },
            reprompts: {
                requestValue: i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_REQUEST_VALUE'),
                confirmValue: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_CONFIRM_VALUE', { value: act.payload.value }),
                valueDisaffirmed: i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_VALUE_DISAFFIRMED'),
                valueSet: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_VALUE_SET', { value: act.payload.value }),
                valueAffirmed: i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_VALUE_AFFIRMED'),
                suggestValue: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_SUGGEST_VALUE', { value: act.payload.value }),
                informConfusingDisconfirmation: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_INFORM_CONFUSING_DISCONFIRMATION'),
                informConfusingConfirmation: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_INFORM_CONFUSING_CONFIRMATION', { previousValue: act.payload.value }),
                repeatUnusableValue: (act) => i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_REPEAT_UNUSABLE_VALUE', { value: act.payload.value }),
                invalidValue: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_INVALID_VALUE_WITH_REASON', { value: act.payload.value, reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('NUMBER_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_VALUE', { value: act.payload.value });
                },
            },
            validation: [],
            confirmationRequired: false,
            ambiguousPairs: [[13, 30], [14, 40], [15, 50], [16, 60], [17, 70], [18, 80]],
            required: true,
        };
        return lodash_1.default.merge(defaults, props);
    }
    canHandle(input) {
        return this.canHandleForEmptyStateValue(input)
            || this.canHandleForExistingStateValue(input);
    }
    async handle(input, resultBuilder) {
        log.debug(`NumberControl[${this.id}]: handle(). Entering`);
        const intent = input.request.intent;
        if (this.handleFunc === undefined) {
            throw new Error(`${intent.name} can not be handled by ${this.constructor.name}.`);
        }
        this.handleFunc(input, resultBuilder);
    }
    canTakeInitiative(input) {
        return this.wantsToElicitValue(input)
            || this.wantsToFixInvalidValue(input)
            || this.wantsToConfirmValue(input);
    }
    async takeInitiative(input, resultBuilder) {
        log.debug(`NumberControl[${this.id}]: takeInitiative(). Entering`);
        if (this.wantsToElicitValue(input)) {
            resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
        }
        else if (this.wantsToFixInvalidValue(input)) {
            const validationResult = this.validateNumber(input);
            resultBuilder.addAct(new ContentActs_1.InvalidValueAct(this, {
                value: this.state.value,
                reasonCode: 'ValueInvalid',
                renderedReason: validationResult.renderedReason
            }));
            resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
        }
        else if (this.wantsToConfirmValue(input)) {
            resultBuilder.addAct(new InitiativeActs_1.ConfirmValueAct(this, { value: this.state.value }));
        }
        else {
            const intent = input.request.intent;
            throw new Error(`${intent.name} can not take initiative from ${this.constructor.name}.`);
        }
    }
    renderAct(act, input, builder) {
        if (act instanceof InitiativeActs_1.RequestValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.requestValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.requestValue, input));
            const slotElicitation = generateSlotElicitation();
            builder.addElicitSlotDirective(slotElicitation.slotName, slotElicitation.intent);
        }
        else if (act instanceof InitiativeActs_1.ConfirmValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.confirmValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.confirmValue, input));
        }
        else if (act instanceof ContentActs_1.ValueDisconfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueDisaffirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueDisaffirmed, input));
        }
        else if (act instanceof ContentActs_1.ValueSetAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueSet, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueSet, input));
        }
        else if (act instanceof ContentActs_1.ValueConfirmedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.valueAffirmed, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.valueAffirmed, input));
        }
        else if (act instanceof InitiativeActs_1.SuggestValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.suggestValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.suggestValue, input));
        }
        else if (act instanceof ContentActs_1.InformConfusingConfirmationAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.informConfusingConfirmation, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.informConfusingConfirmation, input));
        }
        else if (act instanceof ContentActs_1.InformConfusingDisconfirmationAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.informConfusingDisconfirmation, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.informConfusingDisconfirmation, input));
        }
        else if (act instanceof ContentActs_1.ProblematicInputValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.repeatUnusableValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.repeatUnusableValue, input));
        }
        else if (act instanceof ContentActs_1.InvalidValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.invalidValue, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.invalidValue, input));
        }
        else {
            this.throwUnhandledActError(act);
        }
    }
    updateInteractionModel(generator, imData) {
        generator.addControlIntent(new GeneralControlIntent_1.GeneralControlIntent(), imData);
        generator.addControlIntent(new __1.SingleValueControlIntent(__1.AmazonBuiltInSlotType.NUMBER), imData);
        generator.addYesAndNoIntents();
        if (this.props.interactionModel.targets.includes('number')) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('NUMBER_CONTROL_DEFAULT_SLOT_VALUES_TARGET_NUMBER', { returnObjects: true }));
        }
    }
    getTargetIds() {
        return this.props.interactionModel.targets;
    }
    /* --------------------------------------------
     * This block handles when the lastQuestion has not been asked
     */
    canHandleForEmptyStateValue(input) {
        try {
            __1.okIf(this.state.value === undefined);
            if (__1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name)) {
                const { action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
                __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
                __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
                this.handleFunc = this.handleLastQuestionEmptyAndValueNotExisting;
                return true;
            }
            else if (__1.InputUtil.isSingleValueControlIntent(input, __1.AmazonBuiltInSlotType.NUMBER)) {
                const { action, target } = __1.unpackSingleValueControlIntent(input.request.intent);
                __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
                __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
                this.handleFunc = this.handleLastQuestionEmptyAndValueExisting;
                return true;
            }
            return false;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleLastQuestionEmptyAndValueNotExisting(input, resultBuilder) {
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    handleLastQuestionEmptyAndValueExisting(input, resultBuilder) {
        const { action, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
        this.setValue(valueStr);
        this.commonHandlerWhenValueChanged(action !== null && action !== void 0 ? action : Strings_1.Strings.Action.Set, input, resultBuilder);
    }
    /* -------------------------------------------- */
    /* --------------------------------------------
     * This block handles when the current value is to be confirmed
     */
    canHandleForExistingStateValue(input) {
        try {
            __1.okIf(this.state.value !== undefined);
            return this.isValueInRejectedValues(input)
                || this.isBareNoWhenConfirmingValue(input)
                || this.isFeedbackNoAndValueUndefinedWhenConfirmingValue(input)
                || this.isFeedbackNoAndValueNotChangedWhenConfirmingValue(input)
                || this.isFeedbackNoAndValueChangedWhenConfirmingValue(input)
                || this.isBareYesConfirmingValue(input)
                || this.isFeedbackYesAndValueChangedWhenConfirmingValue(input)
                || this.isFeedbackYesAndValueNotChangedWhenConfirmingValue(input)
                || this.isFeedbackYesAndValueUndefinedWhenConfirmingValue(input)
                || this.isFeedbackUndefinedAndValueNotChangedWhenConfirmingValue(input)
                || this.isFeedbackUndefinedAndValueChangedWhenConfirmingValue(input)
                || this.isTargetsMatchWithoutFeedbackNorValueWhenConfirmingValue(input);
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    isValueInRejectedValues(input) {
        try {
            __1.okIf(__1.InputUtil.isSingleValueControlIntent(input, __1.AmazonBuiltInSlotType.NUMBER));
            const { action, target, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            __1.okIf(this.state.rejectedValues.includes(Number.parseInt(valueStr, 10)));
            this.handleFunc = this.handleValueExistsInRejectedValues;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleValueExistsInRejectedValues(input, resultBuilder) {
        const { valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
        this.setValue(valueStr);
        resultBuilder.addAct(new ContentActs_1.ProblematicInputValueAct(this, { reasonCode: 'ValuePreviouslyRejected', value: this.state.value }));
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    isBareNoWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isBareNo(input));
            this.handleFunc = this.handleFeedbackNoAndWithoutValueWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    isFeedbackNoAndValueUndefinedWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            __1.okIf(__1.InputUtil.feedbackIsFalse(feedback));
            this.handleFunc = this.handleFeedbackNoAndWithoutValueWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleFeedbackNoAndWithoutValueWhenConfirmingValue(input, resultBuilder) {
        resultBuilder.addAct(new ContentActs_1.ValueDisconfirmedAct(this, { value: this.state.value }));
        this.commonHandlerWhenValueRejected(input, resultBuilder);
    }
    isFeedbackNoAndValueNotChangedWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isSingleValueControlIntent(input, __1.AmazonBuiltInSlotType.NUMBER));
            const { action, target, feedback, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            __1.okIf(__1.InputUtil.feedbackIsFalse(feedback));
            __1.okIf(this.state.value === Number.parseInt(valueStr, 10));
            this.handleFunc = this.handleFeedbackNoAndValueNotChangedWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleFeedbackNoAndValueNotChangedWhenConfirmingValue(input, resultBuilder) {
        resultBuilder.addAct(new ContentActs_1.InformConfusingDisconfirmationAct(this, { value: this.state.value, reasonCode: 'DisconfirmedWithSameValue' }));
        this.commonHandlerWhenValueRejected(input, resultBuilder);
    }
    isFeedbackNoAndValueChangedWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isSingleValueControlIntent(input, __1.AmazonBuiltInSlotType.NUMBER));
            const { feedback, action, target, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            __1.okIf(__1.InputUtil.feedbackIsFalse(feedback));
            __1.okIf(__1.InputUtil.valueStrDefined(valueStr));
            __1.okIf(this.state.value !== Number.parseInt(valueStr, 10));
            this.handleFunc = this.handleFeedbackNoAndValueChangedWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleFeedbackNoAndValueChangedWhenConfirmingValue(input, resultBuilder) {
        const { action, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
        this.setValue(valueStr);
        this.commonHandlerWhenValueChanged(action !== null && action !== void 0 ? action : Strings_1.Strings.Action.Set, input, resultBuilder);
    }
    isFeedbackYesAndValueChangedWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isSingleValueControlIntent(input, __1.AmazonBuiltInSlotType.NUMBER));
            const { feedback, action, target, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            __1.okIf(__1.InputUtil.feedbackIsTrue(feedback));
            __1.okIf(__1.InputUtil.valueStrDefined(valueStr));
            __1.okIf(this.state.value !== Number.parseInt(valueStr, 10));
            this.handleFunc = this.handleFeedbackYesAndValueChangedWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleFeedbackYesAndValueChangedWhenConfirmingValue(input, resultBuilder) {
        const { action, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
        const previousValue = this.state.value;
        this.setValue(valueStr);
        resultBuilder.addAct(new ContentActs_1.InformConfusingConfirmationAct(this, { value: previousValue, reasonCode: 'ConfirmedWithDifferentValue' }));
        resultBuilder.addAct(new InitiativeActs_1.ConfirmValueAct(this, { value: this.state.value }));
    }
    isBareYesConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isBareYes(input));
            this.handleFunc = this.handleFeedbackYesAndValueNotChangedOrUndefinedWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    isFeedbackYesAndValueNotChangedWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isSingleValueControlIntent(input, __1.AmazonBuiltInSlotType.NUMBER));
            const { feedback, action, target, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            __1.okIf(__1.InputUtil.feedbackIsTrue(feedback));
            __1.okIf(this.state.value === Number.parseInt(valueStr, 10));
            this.handleFunc = this.handleFeedbackYesAndValueNotChangedOrUndefinedWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    isFeedbackYesAndValueUndefinedWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            __1.okIf(__1.InputUtil.feedbackIsTrue(feedback));
            this.handleFunc = this.handleFeedbackYesAndValueNotChangedOrUndefinedWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleFeedbackYesAndValueNotChangedOrUndefinedWhenConfirmingValue(input, resultBuilder) {
        this.state.isValueConfirmed = true;
        resultBuilder.addAct(new ContentActs_1.ValueConfirmedAct(this, { value: this.state.value }));
    }
    isFeedbackUndefinedAndValueNotChangedWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isSingleValueControlIntent(input, __1.AmazonBuiltInSlotType.NUMBER));
            const { feedback, action, target, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            __1.okIf(__1.InputUtil.feedbackIsUndefined(feedback));
            __1.okIf(__1.InputUtil.valueStrDefined(valueStr));
            __1.okIf(this.state.value === Number.parseInt(valueStr, 10));
            this.handleFunc = this.handleFeedbackYesAndValueUndefinedWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleFeedbackYesAndValueUndefinedWhenConfirmingValue(input, resultBuilder) {
        this.state.isValueConfirmed = true;
        resultBuilder.addAct(new ContentActs_1.ValueConfirmedAct(this, { value: this.state.value }));
    }
    isFeedbackUndefinedAndValueChangedWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isSingleValueControlIntent(input, __1.AmazonBuiltInSlotType.NUMBER));
            const { feedback, action, target, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatchOrUndefined(target, this.props.interactionModel.targets));
            __1.okIf(__1.InputUtil.feedbackIsUndefined(feedback));
            __1.okIf(__1.InputUtil.valueStrDefined(valueStr));
            __1.okIf(this.state.value !== Number.parseInt(valueStr, 10));
            this.handleFunc = this.handleFeedbackUndefinedAndValueChangedWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleFeedbackUndefinedAndValueChangedWhenConfirmingValue(input, resultBuilder) {
        const { action, valueStr } = __1.unpackSingleValueControlIntent(input.request.intent);
        this.setValue(valueStr);
        this.commonHandlerWhenValueChanged(action !== null && action !== void 0 ? action : Strings_1.Strings.Action.Set, input, resultBuilder);
    }
    isTargetsMatchWithoutFeedbackNorValueWhenConfirmingValue(input) {
        try {
            __1.okIf(__1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            __1.okIf(__1.InputUtil.feedbackIsUndefined(feedback));
            __1.okIf(__1.InputUtil.actionIsMatchOrUndefined(action, [...this.props.interactionModel.actions.set, ...this.props.interactionModel.actions.change]));
            __1.okIf(__1.InputUtil.targetIsMatch(target, lodash_1.default.without(this.props.interactionModel.targets, Strings_1.Strings.Target.It)));
            this.handleFunc = this.handleTargetMatchWithoutFeedbackNorValueWhenConfirmingValue;
            return true;
        }
        catch (e) {
            return __1.falseIfGuardFailed(e);
        }
    }
    handleTargetMatchWithoutFeedbackNorValueWhenConfirmingValue(input, resultBuilder) {
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    /* -------------------------------------------- */
    commonHandlerWhenValueChanged(action, input, resultBuilder) {
        const validationResult = this.validateNumber(input);
        if (validationResult !== true) {
            this.state.rejectedValues.push(this.state.value);
            resultBuilder.addAct(new ContentActs_1.InvalidValueAct(this, { value: this.state.value, renderedReason: validationResult.renderedReason }));
            resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
        }
        else if (!this.isConfirmationRequired(input)) {
            this.state.isValueConfirmed = true;
            resultBuilder.addAct(new ContentActs_1.ValueSetAct(this, { value: this.state.value }));
        }
        else {
            resultBuilder.addAct(new InitiativeActs_1.ConfirmValueAct(this, { value: this.state.value }));
        }
    }
    /**
     * TODO: User's action has to be used in this function to form the response prompt, need to define action in the related payloadType
     *
     * U: No, {change} the value please
     * A: What value do you want to {change} to <RequestValueAct>
     */
    commonHandlerWhenValueRejected(input, resultBuilder) {
        this.state.rejectedValues.push(this.state.value);
        const ambiguousPartner = this.getAmbiguousPartner(this.state.value);
        if (ambiguousPartner !== undefined && !this.state.rejectedValues.includes(ambiguousPartner)) {
            const previousValue = this.state.value;
            this.state.value = ambiguousPartner;
            const validationResult = this.validateNumber(input);
            if (validationResult === true) {
                resultBuilder.addAct(new InitiativeActs_1.SuggestValueAct(this, { value: this.state.value }));
            }
            else {
                this.state.value = previousValue;
                resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
            }
        }
        else {
            resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
        }
    }
    wantsToElicitValue(input) {
        return this.evaluateBooleanProp(this.props.required, input) && this.state.value === undefined;
    }
    wantsToFixInvalidValue(input) {
        if (!this.evaluateBooleanProp(this.props.required, input) || this.state.value === undefined) {
            return false;
        }
        const validationResult = this.validateNumber(input);
        return validationResult !== true;
    }
    wantsToConfirmValue(input) {
        if (!this.evaluateBooleanProp(this.props.required, input) || this.state.value === undefined) {
            return false;
        }
        if (this.state.isValueConfirmed) {
            return false;
        }
        return this.isConfirmationRequired(input);
    }
    clear() {
        this.state = new NumberControlState();
    }
    setValue(value) {
        this.state.value = typeof value === 'string' ? Number.parseInt(value, 10) : value;
    }
    validateNumber(input) {
        const listOfValidationFunc = typeof (this.props.validation) === 'function' ? [this.props.validation] : this.props.validation;
        for (const validationFunction of listOfValidationFunc) {
            const validationResult = validationFunction(this.state, input);
            if (validationResult !== true) {
                log.debug(`NumberControl.validate(): validation failed. Reason: ${JSON.stringify(validationResult, null, 2)}.`);
                return validationResult;
            }
        }
        return true;
    }
    isConfirmationRequired(input) {
        if (typeof this.props.confirmationRequired === 'function') {
            return this.props.confirmationRequired(this.state, input);
        }
        else if (typeof this.props.confirmationRequired === 'boolean') {
            return this.props.confirmationRequired;
        }
        else {
            return true; // by default confirmation is required
        }
    }
    getAmbiguousPartner(value) {
        const pairs = this.props.ambiguousPairs;
        for (const pair of pairs) {
            if (pair[0] === value) {
                return pair[1];
            }
            else if (pair[1] === value) {
                return pair[0];
            }
        }
        return undefined;
    }
}
exports.NumberControl = NumberControl;
function generateSlotElicitation() {
    const intent = {
        name: "NumberControlIntent",
        slots: {
            "AMAZON.NUMBER": { name: "AMAZON.NUMBER", value: '', confirmationStatus: 'NONE' },
            "feedback": { name: "feedback", value: '', confirmationStatus: 'NONE' },
            "action": { name: "action", value: '', confirmationStatus: 'NONE' },
            "target": { name: "target", value: '', confirmationStatus: 'NONE' },
            "head": { name: "head", value: '', confirmationStatus: 'NONE' },
            "tail": { name: "tail", value: '', confirmationStatus: 'NONE' },
            "preposition": { name: "preposition", value: '', confirmationStatus: 'NONE' },
        },
        confirmationStatus: "NONE"
    };
    return {
        intent,
        slotName: Strings_1.Strings.SlotType.AmazonNumber
    };
}
//# sourceMappingURL=data:application/json;base64,