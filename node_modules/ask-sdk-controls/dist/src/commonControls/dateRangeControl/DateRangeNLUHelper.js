"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.findTargetCategory = exports.handleCustomSlots = exports.generateDatesInputGroups = void 0;
const tslib_1 = require("tslib");
// Convert complicated utterance into one or two simple tasks
// E.G. Set date from A to B -> [Set startDate to A, Set endDate to B]
// This function also translate action & target to actionCateGory & targetCategory
// Thus no need to translate action & target in reset of the code
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const DateRangeControl_1 = require("./DateRangeControl");
const DateRangeControlIntent_1 = require("../../intents/DateRangeControlIntent");
const DateHelper_1 = require("./DateHelper");
// Break down complicated utterance into two simple utterances
// E.G. Set start date to 2017 and end date to 2018 --> ['set start date to 2017', 'set end date to 2018']
function generateDatesInputGroups(props, input) {
    // translate all custom target slotTypes to targetCategory
    handleCustomSlots(props.interactionModel, input);
    const inputs = [];
    const inputA = {
        action: undefined,
        target: undefined,
        value: ''
    };
    const inputB = {
        action: undefined,
        target: undefined,
        value: ''
    };
    // Action exist
    if (DateRangeControlIntent_1.hasOneOrMoreActions(input)) {
        if (input.action !== undefined) {
            inputA.action = input.action;
            inputB.action = input.action;
        }
        else {
            inputA.action = input['action.a'];
            inputB.action = input['action.b'];
        }
    }
    // Target exist
    if (DateRangeControlIntent_1.hasOneOrMoreTargets(input)) {
        if (input.target !== undefined) {
            inputA.target = input.target;
            inputB.target = input.target;
        }
        else {
            inputA.target = input['target.a'];
            inputB.target = input['target.b'];
        }
    }
    // value exist
    if (DateRangeControlIntent_1.hasOneOrMoreValues(input)) {
        if (input['AMAZON.DATE'] !== undefined) {
            inputA.value = input['AMAZON.DATE'];
            inputB.value = input['AMAZON.DATE'];
        }
        else {
            inputA.value = input['AMAZON.DATE.a'];
            inputB.value = input['AMAZON.DATE.b'];
        }
    }
    // deduplicate
    // E.G. 'set date to 2019' will be converted to [{'set', 'date', '2019'}, {'set', 'date', '2019'}]
    // need to delete the duplicate one in this scenario
    if (inputA.action === inputB.action && inputA.target === inputB.target && inputA.value === inputB.value) {
        inputs.push(inputA);
    }
    else {
        inputs.push(inputA);
        inputs.push(inputB);
    }
    resolveAmbiguityTargets(inputs);
    return inputs;
}
exports.generateDatesInputGroups = generateDatesInputGroups;
// translate custom target to TargetCategory
function handleCustomSlots(nlu, input) {
    var _a, _b, _c;
    // map target to right targetCategory
    input.target = (_a = findTargetCategory(nlu.targets, input.target)) !== null && _a !== void 0 ? _a : undefined;
    input['target.a'] = (_b = findTargetCategory(nlu.targets, input['target.a'])) !== null && _b !== void 0 ? _b : undefined;
    input['target.b'] = (_c = findTargetCategory(nlu.targets, input['target.b'])) !== null && _c !== void 0 ? _c : undefined;
}
exports.handleCustomSlots = handleCustomSlots;
// Translate slotValue id into target category
function findTargetCategory(targets, input) {
    // E.G. 'date' is an ambiguity target, which may refer to start date or end date
    if (lodash_1.default.includes(targets.startDate, input) && lodash_1.default.includes(targets.endDate, input)) {
        return DateRangeControl_1.TargetCategory.Either;
    }
    if (lodash_1.default.includes(targets.startDate, input)) {
        return DateRangeControl_1.TargetCategory.StartDate;
    }
    if (lodash_1.default.includes(targets.endDate, input)) {
        return DateRangeControl_1.TargetCategory.EndDate;
    }
    return undefined;
}
exports.findTargetCategory = findTargetCategory;
// Only TargetCategory.StartDate and TargetCategory.EndDate is regarded as clear target
function isNotClearTarget(input) {
    if (input === undefined) {
        return true;
    }
    if (input === DateRangeControl_1.TargetCategory.Either || input === DateRangeControl_1.TargetCategory.Both || input === DateRangeControl_1.TargetCategory.Neither) {
        return true;
    }
    return false;
}
// if two values provided without clear target
// generate clear targets, the earlier date will be considered as start date
// E.G. 2020 back to 2017 --> startDate: 2017, endDate: 2020
function resolveAmbiguityTargets(inputs) {
    if (inputs[0] !== undefined && inputs[1] !== undefined && isNotClearTarget(inputs[0].target) && isNotClearTarget(inputs[1].target)) {
        const date1 = DateHelper_1.alexaDateFormatToDate(inputs[0].value);
        const date2 = DateHelper_1.alexaDateFormatToDate(inputs[0].value);
        if (date1 > date2) {
            inputs[0].target = DateRangeControl_1.TargetCategory.EndDate;
            inputs[1].target = DateRangeControl_1.TargetCategory.StartDate;
        }
        else {
            inputs[0].target = DateRangeControl_1.TargetCategory.StartDate;
            inputs[1].target = DateRangeControl_1.TargetCategory.EndDate;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,