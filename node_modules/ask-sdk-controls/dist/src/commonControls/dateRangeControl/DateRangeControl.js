"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateRangeControl = exports.DateRangeChangedAct = exports.DateRangeSetAct = exports.DateControlTarget = exports.TargetCategory = exports.DateRangeControlState = exports.DateRangeControlValidations = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const i18next_1 = tslib_1.__importDefault(require("i18next"));
const ContentActs_1 = require("../../systemActs/ContentActs");
const ConjunctionControlIntent_1 = require("../../intents/ConjunctionControlIntent");
const DateRangeControlIntent_1 = require("../../intents/DateRangeControlIntent");
const GeneralControlIntent_1 = require("../../intents/GeneralControlIntent");
const DateHelper_1 = require("./DateHelper");
const InitiativeActs_1 = require("../../systemActs/InitiativeActs");
const DateRangeNLUHelper_1 = require("./DateRangeNLUHelper");
const Predicates_1 = require("../../utils/Predicates");
const ModelTypes_1 = require("../../interactionModelGeneration/ModelTypes");
const ContainerControl_1 = require("../../controls/ContainerControl");
const DateControl_1 = require("../DateControl");
const SingleValueControlIntent_1 = require("../../intents/SingleValueControlIntent");
const AmazonBuiltInSlotType_1 = require("../../intents/AmazonBuiltInSlotType");
const Logger_1 = require("../../logging/Logger");
const __1 = require("../..");
const DateControlIntent_1 = require("../../intents/DateControlIntent");
const Strings_1 = require("../../constants/Strings");
const log = new Logger_1.Logger('AskSdkControls:DateRangeControl');
var DateRangeControlValidations;
(function (DateRangeControlValidations) {
    DateRangeControlValidations.START_BEFORE_END = (state, input) => {
        const startDate = DateHelper_1.alexaDateFormatToDate(state.startDate);
        const endDate = DateHelper_1.alexaDateFormatToDate(state.endDate);
        if (startDate > endDate) {
            return { reasonCode: 'startBeforeEnd', renderedReason: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_VALIDATION_FAIL_START_AFTER_END') };
        }
        return true;
    };
})(DateRangeControlValidations = exports.DateRangeControlValidations || (exports.DateRangeControlValidations = {}));
class DateRangeControlState extends ContainerControl_1.ContainerControlState {
    constructor() {
        super(...arguments);
        this.openQuestion = false;
        this.onFocus = true;
    }
}
exports.DateRangeControlState = DateRangeControlState;
var TargetCategory;
(function (TargetCategory) {
    TargetCategory["StartDate"] = "startDate";
    TargetCategory["EndDate"] = "endDate";
    TargetCategory["Both"] = "both";
    TargetCategory["Neither"] = "neither";
    TargetCategory["Either"] = "either";
})(TargetCategory = exports.TargetCategory || (exports.TargetCategory = {}));
var DateControlTarget;
(function (DateControlTarget) {
    DateControlTarget["StartDate"] = "startDate";
    DateControlTarget["EndDate"] = "endDate";
})(DateControlTarget = exports.DateControlTarget || (exports.DateControlTarget = {}));
class DateRangeSetAct extends ContentActs_1.ContentAct {
    constructor(control, start, end) {
        super(control);
        this.startDate = start;
        this.endDate = end;
    }
    render(input, responseBuilder) {
        throw new Error('This is not intended to be called. Rendering is controlled by the Control itself.');
    }
}
exports.DateRangeSetAct = DateRangeSetAct;
class DateRangeChangedAct extends ContentActs_1.ContentAct {
    constructor(control, start, end, priorStart, priorEnd) {
        super(control);
        this.startDate = start;
        this.priorStartDate = priorStart;
        this.endDate = end;
        this.priorEndDate = priorEnd;
    }
    render(input, responseBuilder) {
        throw new Error('This is not intended to be called. Rendering is controlled by the Control itself.');
    }
}
exports.DateRangeChangedAct = DateRangeChangedAct;
class DateRangeControl extends ContainerControl_1.ContainerControl {
    constructor(props) {
        super(props);
        this.state = new DateRangeControlState();
        this.props = DateRangeControl.mergeWithDefaultProps(props);
        this.startDateControl = new DateControl_1.DateControl({
            id: `${this.props.id}_startDate`,
            interactionModel: {
                targets: this.props.interactionModel.targets.startDate
            },
            prompts: this.props.prompts.startDate,
            validation: this.props.validation.startDateValid,
            required: this.props.required,
        });
        this.endDateControl = new DateControl_1.DateControl({
            id: `${this.props.id}_endDate`,
            interactionModel: {
                targets: this.props.interactionModel.targets.endDate
            },
            prompts: this.props.prompts.endDate,
            validation: this.props.validation.endDateValid,
            required: this.props.required,
        });
        this.addChild(this.startDateControl)
            .addChild(this.endDateControl);
    }
    static mergeWithDefaultProps(props) {
        const defaults = {
            id: 'uninitialized',
            validation: {
                startDateValid: [],
                endDateValid: [],
                rangeValid: []
            },
            required: true,
            interactionModel: {
                targets: {
                    startDate: ['startDate', 'date', Strings_1.Strings.Target.It],
                    endDate: ['endDate', 'date', Strings_1.Strings.Target.It],
                    self: ['date', 'dateRange', Strings_1.Strings.Target.It]
                },
                actions: {
                    set: [Strings_1.Strings.Action.Set],
                    change: [Strings_1.Strings.Action.Change]
                },
            },
            // TODO: review all default prompts
            prompts: {
                startDate: {
                    confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_CONFIRM_START_DATE', { value: act.payload.value }),
                    valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_AFFIRMED'),
                    valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_DISAFFIRMED'),
                    valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_SET', { value: act.payload.value }),
                    valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_START_DATE_CHANGED', { value: act.payload.value }),
                    invalidValue: (act) => {
                        if (act.payload.renderedReason !== undefined) {
                            return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_INVALID_START_WITH_REASON', { reason: act.payload.renderedReason });
                        }
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_DATE');
                    },
                    requestValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_START_DATE'),
                    requestChangedValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_START_DATE'),
                },
                endDate: {
                    confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_CONFIRM_END_DATE', { value: act.payload.value }),
                    valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_AFFIRMED'),
                    valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_DISAFFIRMED'),
                    valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_SET', { value: act.payload.value }),
                    valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_END_DATE_CHANGED', { value: act.payload.value }),
                    invalidValue: (act) => {
                        if (act.payload.renderedReason !== undefined) {
                            return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_INVALID_END_WITH_REASON', { reason: act.payload.renderedReason });
                        }
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_DATE');
                    },
                    requestValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_END_DATE'),
                    requestChangedValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_CHANGED_END_DATE'),
                },
                requestRange: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_REQUEST_RANGE'),
                rangeSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_RANGE_SET', { start: act.startDate, end: act.endDate }),
                rangeChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_RANGE_CHANGED', { start: act.startDate, end: act.endDate }),
                invalidRange: (act) => {
                    if (act.payload.renderedReason !== undefined) {
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_INVALID_RANGE_WITH_REASON', { reason: act.payload.renderedReason });
                    }
                    return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_PROMPT_GENERAL_INVALID_RANGE');
                }
            },
            reprompts: {
                startDate: {
                    confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_CONFIRM_START_DATE', { value: act.payload.value }),
                    valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_AFFIRMED'),
                    valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_DISAFFIRMED'),
                    valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_SET', { value: act.payload.value }),
                    valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_START_DATE_CHANGED', { value: act.payload.value }),
                    invalidValue: (act) => {
                        if (act.payload.reasonCode !== undefined) {
                            return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_INVALID_START_WITH_REASON', { reason: act.payload.reasonCode });
                        }
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_DATE');
                    },
                    requestValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_START_DATE'),
                    requestChangedValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_START_DATE'),
                },
                endDate: {
                    confirmValue: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_CONFIRM_END_DATE', { value: act.payload.value }),
                    valueAffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_AFFIRMED'),
                    valueDisaffirmed: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_DISAFFIRMED'),
                    valueSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_SET', { value: act.payload.value }),
                    valueChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_END_DATE_CHANGED', { value: act.payload.value }),
                    invalidValue: (act) => {
                        if (act.payload.reasonCode !== undefined) {
                            return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_INVALID_END_WITH_REASON', { reason: act.payload.reasonCode });
                        }
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_DATE');
                    },
                    requestValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_END_DATE'),
                    requestChangedValue: i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_CHANGED_END_DATE'),
                },
                requestRange: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_REQUEST_RANGE'),
                rangeSet: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_RANGE_SET', { start: act.startDate, end: act.endDate }),
                rangeChanged: (act) => i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_RANGE_CHANGED', { start: act.startDate, end: act.endDate }),
                invalidRange: (act) => {
                    if (act.payload.reasonCode !== undefined) {
                        return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_INVALID_RANGE_WITH_REASON', { reason: act.payload.reasonCode });
                    }
                    return i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_REPROMPT_GENERAL_INVALID_RANGE');
                }
            },
        };
        return lodash_1.default.mergeWith(defaults, props);
    }
    async canHandle(input) {
        return await this.canHandleForFocus(input) || this.canHandleForNoFocus(input);
    }
    async handle(input, resultBuilder) {
        log.debug(`DateRangeControl[${this.id}]: handle(). Entering`);
        // update the priorStartDate and priorEndDate before new operation
        this.updatePrior();
        // Calling handle function to make changes to state values
        if (this.handleFunc) {
            return this.handleFunc(input, resultBuilder);
        }
        // If can't handle by DateRangeControl itself, let children handle it and update state values
        await this.handleByChild(input, resultBuilder);
        const newStartDate = this.getStartDateFromChild();
        const newEndDate = this.getEndDateFromChild();
        this.setStartDate(newStartDate);
        this.setEndDate(newEndDate);
        this.state.onFocus = false;
        // After child handle the request and child has no question
        // ask DateRangeControl whether the value is ready
        if (!resultBuilder.hasInitiativeAct() && await this.canTakeInitiative(input)) {
            if (this.takeInitiativeFunc !== undefined) {
                this.takeInitiativeFunc(input, resultBuilder);
            }
        }
    }
    updateInteractionModel(generator, imData) {
        generator.addControlIntent(new GeneralControlIntent_1.GeneralControlIntent(), imData);
        generator.addControlIntent(new DateControlIntent_1.DateControlIntent(), imData);
        generator.addControlIntent(new ConjunctionControlIntent_1.ConjunctionControlIntent(), imData);
        generator.addControlIntent(new DateRangeControlIntent_1.DateRangeControlIntent(), imData);
        if (this.props.interactionModel.targets.self.includes('date')) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('DATE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_DATE', { returnObjects: true }));
        }
        if (this.props.interactionModel.targets.self.includes('dateRange')) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_DATE_RANGE', { returnObjects: true }));
        }
        if (this.props.interactionModel.targets.startDate.includes('startDate')) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_START_DATE', { returnObjects: true }));
        }
        if (this.props.interactionModel.targets.endDate.includes('endDate')) {
            generator.addValuesToSlotType(ModelTypes_1.SharedSlotType.TARGET, i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_SLOT_VALUES_TARGET_END_DATE', { returnObjects: true }));
        }
    }
    getTargetIds() {
        return this.props.interactionModel.targets.self;
    }
    getStartDateFromChild() {
        return this.startDateControl.state.value;
    }
    getEndDateFromChild() {
        return this.endDateControl.state.value;
    }
    setStartDate(date) {
        this.startDateControl.state.value = date;
        this.state.startDate = date;
        // Clean open question once a value set
        this.state.openQuestion = false;
    }
    setEndDate(date) {
        this.endDateControl.state.value = date;
        this.state.endDate = date;
        // Clean open question once a value set
        this.state.openQuestion = false;
    }
    async canHandleForFocus(input) {
        try {
            Predicates_1.okIf(this.state.onFocus === true);
            // When the focus is on parent itself
            // give the parent priority to handle the request
            return this.isTwoValueInput(input)
                || this.isDateInterpretedAsDateRange(input)
                || this.isChangeBoth(input)
                || this.isChangeRange(input)
                || this.canHandleByChild(input);
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    async canHandleForNoFocus(input) {
        try {
            Predicates_1.okIf(this.state.onFocus === false);
            // When the focus is on children
            // give children priority to handle the request
            return await this.canHandleByChild(input)
                || this.isTwoValueInput(input)
                || this.isDateInterpretedAsDateRange(input)
                || this.isChangeBoth(input)
                || this.isChangeRange(input);
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Test if the input has both start date and end date provided
     * @param input
     */
    isTwoValueInput(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isIntent(input, DateRangeControlIntent_1.DateRangeControlIntent.name));
            const intent = input.request.intent;
            const unpackedSlots = DateRangeControlIntent_1.unpackDateRangeControlIntent(intent);
            if (unpackedSlots.target !== undefined) {
                Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots.target, this.props.interactionModel.targets.self));
            }
            else {
                Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots["target.a"], this.props.interactionModel.targets.startDate) || __1.InputUtil.targetIsMatchOrUndefined(unpackedSlots["target.a"], this.props.interactionModel.targets.endDate));
                Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots["target.b"], this.props.interactionModel.targets.startDate) || __1.InputUtil.targetIsMatchOrUndefined(unpackedSlots["target.b"], this.props.interactionModel.targets.endDate));
            }
            const inputGroups = DateRangeNLUHelper_1.generateDatesInputGroups(this.props, unpackedSlots);
            for (const inputGroup of inputGroups) {
                Predicates_1.okIf(__1.InputUtil.valueStrDefined(inputGroup.value));
                Predicates_1.okIf(__1.InputUtil.actionIsSetOrUndefined(inputGroup.action, this.props.interactionModel.actions.set) || __1.InputUtil.actionIsMatch(inputGroup.action, this.props.interactionModel.actions.change));
                Predicates_1.okIf(inputGroup.target === TargetCategory.StartDate || inputGroup.target === TargetCategory.EndDate);
            }
            this.handleFunc = this.handleTwoValueInput;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleTwoValueInput(input, resultBuilder) {
        const intent = input.request.intent;
        const unpackedSlots = DateRangeControlIntent_1.unpackDateRangeControlIntent(intent);
        const inputGroups = DateRangeNLUHelper_1.generateDatesInputGroups(this.props, unpackedSlots);
        for (const inputGroup of inputGroups) {
            if (inputGroup.target === TargetCategory.StartDate) {
                this.setStartDate(DateHelper_1.findEdgeDateOfDateRange(inputGroup.value, true));
            }
            else if (inputGroup.target === TargetCategory.EndDate) {
                this.setEndDate(DateHelper_1.findEdgeDateOfDateRange(inputGroup.value, false));
            }
        }
        this.ackDateRangeValueChanges(resultBuilder);
        if (this.wantsToCorrectRange(input)) {
            this.correctRange(input, resultBuilder);
        }
        this.state.onFocus = true;
    }
    /**
     * Determine whether the input single date value should be considered as date range
     *
     * The DateRangeControl will regard a single value input as date range when there's no clear target and
     * when the DateRangeControl itself is under focus
     * E.G. 'set range to 2018', where 2018 will be regarded as a range and both start date and end date will be set to 2018
     * @param input
     */
    isDateInterpretedAsDateRange(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isSingleValueControlIntent(input, AmazonBuiltInSlotType_1.AmazonBuiltInSlotType.DATE));
            const intent = input.request.intent;
            const unpackedSlots = SingleValueControlIntent_1.unpackSingleValueControlIntent(intent);
            Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots.target, this.props.interactionModel.targets.self));
            Predicates_1.okIf(__1.InputUtil.actionIsMatchOrUndefined(unpackedSlots.action, this.props.interactionModel.actions.set) || __1.InputUtil.actionIsMatchOrUndefined(unpackedSlots.action, this.props.interactionModel.actions.change));
            this.handleFunc = this.handleDateRangeInput;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleDateRangeInput(input, resultBuilder) {
        const intent = input.request.intent;
        const { valueStr } = SingleValueControlIntent_1.unpackSingleValueControlIntent(intent);
        this.setStartDate(DateHelper_1.findEdgeDateOfDateRange(valueStr, true));
        this.setEndDate(DateHelper_1.findEdgeDateOfDateRange(valueStr, false));
        this.ackDateRangeValueChanges(resultBuilder);
        if (this.wantsToCorrectRange(input)) {
            this.correctRange(input, resultBuilder);
        }
        this.state.onFocus = true;
    }
    /**
     * Determine whether the input action is targeting both start date and end date
     *
     * E.G. 'Change start date and end date'
     * @param input
     */
    isChangeBoth(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isIntent(input, ConjunctionControlIntent_1.ConjunctionControlIntent.name));
            const intent = input.request.intent;
            const unpackedSlots = ConjunctionControlIntent_1.unpackConjunctionControlIntent(intent);
            Predicates_1.okIf(__1.InputUtil.feedbackIsMatchOrUndefined(unpackedSlots.feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            const inputs = ConjunctionControlIntent_1.generateActionTaskPairs(unpackedSlots);
            for (const input of inputs) {
                Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(input.target, this.props.interactionModel.targets.startDate) || __1.InputUtil.targetIsMatchOrUndefined(input.target, this.props.interactionModel.targets.endDate));
                Predicates_1.okIf(__1.InputUtil.actionIsSetOrUndefined(input.action, this.props.interactionModel.actions.set) || __1.InputUtil.actionIsMatch(input.action, this.props.interactionModel.actions.change));
            }
            this.handleFunc = this.handleChangeValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    /**
     * Determine whether the input action is targeting date range
     *
     * E.G. 'Change', 'Change date'
     * @param input
     */
    isChangeRange(input) {
        try {
            Predicates_1.okIf(__1.InputUtil.isIntent(input, GeneralControlIntent_1.GeneralControlIntent.name));
            const intent = input.request.intent;
            const unpackedSlots = GeneralControlIntent_1.unpackGeneralControlIntent(intent);
            Predicates_1.okIf(__1.InputUtil.feedbackIsMatchOrUndefined(unpackedSlots.feedback, [Strings_1.Strings.Feedback.Affirm, Strings_1.Strings.Feedback.Disaffirm]));
            Predicates_1.okIf(__1.InputUtil.targetIsMatchOrUndefined(unpackedSlots.target, this.props.interactionModel.targets.self));
            this.handleFunc = this.handleChangeValue;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    handleChangeValue(input, resultBuilder) {
        this.state.openQuestion = true;
        this.state.onFocus = true;
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    // Update priorEndDate & priorStartDate
    updatePrior() {
        this.state.priorEndDate = this.state.endDate;
        this.state.priorStartDate = this.state.startDate;
    }
    ackDateRangeValueChanges(resultBuilder) {
        // The DateRangeControl only ack date range changes
        // Only start date change or end date change will be handled by Child controls
        if (this.state.startDate !== undefined && this.state.endDate !== undefined && this.state.startDate !== this.state.priorStartDate && this.state.endDate !== this.state.priorEndDate) {
            // If it's the first time to set the value, DateRangeControl will send DateRangeSetAct
            // And when there's an old value exist, DateRangeControl will send DateRangeChangedAct
            this.state.priorStartDate !== undefined && this.state.priorEndDate !== undefined ?
                resultBuilder.addAct(new DateRangeChangedAct(this, this.state.startDate, this.state.endDate, this.state.priorStartDate, this.state.priorEndDate)) :
                resultBuilder.addAct(new DateRangeSetAct(this, this.state.startDate, this.state.endDate));
        }
    }
    validateDateRange(input) {
        const listOfValidationFunc = typeof (this.props.validation.rangeValid) === 'function' ? [this.props.validation.rangeValid] : this.props.validation.rangeValid;
        for (const validationFunction of listOfValidationFunc) {
            const validationResult = validationFunction(this.state, input);
            if (validationResult !== true) {
                log.debug(`DateRangeControl.validate(): validation failed. Reason: ${JSON.stringify(validationResult, null, 2)}.`);
                return validationResult;
            }
        }
        return true;
    }
    renderAct(act, input, builder) {
        if (act instanceof InitiativeActs_1.RequestValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.requestRange, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.requestRange, input));
        }
        else if (act instanceof DateRangeSetAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.rangeSet, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.rangeSet, input));
        }
        else if (act instanceof DateRangeChangedAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.rangeChanged, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.rangeChanged, input));
        }
        else if (act instanceof ContentActs_1.InvalidValueAct) {
            builder.addPromptFragment(this.evaluatePromptProp(act, this.props.prompts.invalidRange, input));
            builder.addRepromptFragment(this.evaluatePromptProp(act, this.props.reprompts.invalidRange, input));
        }
        else {
            this.throwUnhandledActError(act);
        }
    }
    async canTakeInitiative(input) {
        return this.needsValue(input)
            || await this.canTakeInitiativeByChild(input)
            || this.hasOpenQuestion()
            || this.wantsToCorrectRange(input);
    }
    async takeInitiative(input, resultBuilder) {
        log.debug(`DateRangeControl[${this.id}]: takeInitiative(). Entering`);
        if (this.takeInitiativeFunc !== undefined) {
            this.takeInitiativeFunc(input, resultBuilder);
        }
    }
    needsValue(input) {
        try {
            Predicates_1.okIf(this.evaluateBooleanProp(this.props.required, input));
            Predicates_1.okIf(this.state.startDate === undefined && this.state.endDate === undefined);
            this.takeInitiativeFunc = this.requestDateRange;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    requestDateRange(input, resultBuilder) {
        this.state.onFocus = true;
        resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
    }
    hasOpenQuestion() {
        try {
            Predicates_1.okIf(this.state.openQuestion === true);
            this.takeInitiativeFunc = this.requestDateRange;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    wantsToCorrectRange(input) {
        try {
            // Only fix range when range is set and there's no open question
            Predicates_1.okIf(!this.needsValue(input) && !this.hasOpenQuestion());
            const rangeValidationResult = this.validateDateRange(input);
            Predicates_1.okIf(rangeValidationResult !== true);
            this.takeInitiativeFunc = this.correctRange;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
    correctRange(input, resultBuilder) {
        const rangeValidationResult = this.validateDateRange(input);
        this.state.onFocus = true;
        if (rangeValidationResult !== true) {
            const stateValue = i18next_1.default.t('DATE_RANGE_CONTROL_DEFAULT_STATE_VALUE_FOR_START_AND_END', { start: this.state.startDate, end: this.state.endDate });
            resultBuilder.addAct(new ContentActs_1.InvalidValueAct(this, { value: stateValue, reasonCode: rangeValidationResult.reasonCode, renderedReason: rangeValidationResult.renderedReason }));
            // if the range-validation failure is due to one date changing, only request that one
            if (this.state.startDate !== this.state.priorStartDate && this.state.endDate !== this.state.priorEndDate) {
                resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this));
            }
            else if (this.state.startDate !== this.state.priorStartDate) {
                resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this.startDateControl));
            }
            else {
                resultBuilder.addAct(new InitiativeActs_1.RequestValueAct(this.endDateControl));
            }
            return;
        }
    }
    async canTakeInitiativeByChild(input) {
        try {
            Predicates_1.okIf(await super.canTakeInitiativeByChild(input));
            this.state.onFocus = false;
            this.takeInitiativeFunc = this.takeInitiativeByChild;
            return true;
        }
        catch (e) {
            return Predicates_1.falseIfGuardFailed(e);
        }
    }
}
exports.DateRangeControl = DateRangeControl;
//# sourceMappingURL=data:application/json;base64,