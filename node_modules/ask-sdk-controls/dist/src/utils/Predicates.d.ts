export declare class StateConsistencyError extends Error {
    constructor(message?: string);
}
/**
 * An Error class used to short-circuit a set of predicate tests
 *
 * This error indicates that a "guard" expression did not pass.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
export declare class GuardFailed extends Error {
    constructor(message?: string);
}
/**
 * Allows normal code flow to proceed if predicate is true.
 *
 * If predicate is true, the code proceeds normally.
 * If false, an GuardFailed error is thrown.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
export declare function okIf(predicate: boolean): void;
/**
 * Aborts normal code flow if predicate is true.
 *
 * If predicate is true, an GuardFailed error is thrown.
 * If false, the code proceeds normally.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 * @param predicate
 */
export declare function failIf(predicate: boolean): void;
/**
 * Consumes an GuardFailed error but otherwise rethrows.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
export declare function falseIfGuardFailed(err: Error): false;
//# sourceMappingURL=Predicates.d.ts.map