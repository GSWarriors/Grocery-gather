import { RequestHandler, Skill } from 'ask-sdk-core';
import { Intent, interfaces } from "ask-sdk-model";
import { ControlInput } from '../../controls/ControlInput';
import { IControl } from '../../controls/interfaces/IControl';
import { IControlInput } from '../../controls/interfaces/IControlInput';
import { IControlResult } from '../../controls/interfaces/IControlResult';
import { ControlHandler } from '../../runtime/ControlHandler';
import { SkillInvoker, TestResponseObject } from './SkillInvoker';
import UserEvent = interfaces.alexa.presentation.apl.UserEvent;
import { Control } from '../../controls/Control';
export declare function waitForDebugger(): void;
export declare function findControlById(rootControl: IControl, id: string): any;
export declare function findControlByProperty(rootControl: IControl, property: string, value: any): any;
export declare function simpleInvoke(rootControl: Control, input: ControlInput): Promise<IControlResult>;
/**
 * Each user turn comprises two entries: 1st is the user utterance and 2nd is the Input that we assume will be produced by NLU
 * Each alexa turn is just the prompt
 *
 * Turns can start with 'U: ' and 'A: ' to help readability.
 * @param turns an array of 3 entries per logical turn.  [utterance, Intent]
 */
export declare function testE2E(handler: ControlHandler, turns: Array<string | string[] | IControlInput | TestResponseObject>): Promise<void>;
export declare function testTurn(invoker: SkillInvoker, utterance: string, input: IControlInput, expectedResponse: string | string[] | TestResponseObject): Promise<TestResponseObject>;
export declare class TestInput {
    static turnNumber: number;
    static reset(): void;
    static of(nameOrIntent: Intent): ControlInput;
    static intent(nameOrIntent: string | Intent, slotValues?: {
        [k: string]: any;
    }): ControlInput;
    static launchRequest(): ControlInput;
    static userEvent(userEvent: UserEvent): ControlInput;
}
export declare class SkillTester {
    invoker: SkillInvoker;
    constructor(skillOrRequestHandler: Skill | RequestHandler);
    testTurn(utterance: string, input: ControlInput, expectedPrompt: string): Promise<TestResponseObject>;
}
//# sourceMappingURL=TestingUtils.d.ts.map