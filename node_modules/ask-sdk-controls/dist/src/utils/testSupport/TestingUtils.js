"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillTester = exports.TestInput = exports.testTurn = exports.testE2E = exports.simpleInvoke = exports.findControlByProperty = exports.findControlById = exports.waitForDebugger = void 0;
const tslib_1 = require("tslib");
// TODO: add jsDoc for this file
const ask_sdk_core_1 = require("ask-sdk-core");
const chai_1 = require("chai");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const Logger_1 = require("../../logging/Logger");
const ControlHandler_1 = require("../../runtime/ControlHandler");
const IntentUtils_1 = require("../IntentUtils");
const SkillInvoker_1 = require("./SkillInvoker");
const SkillWrapper_1 = require("./SkillWrapper");
const ControlResult_1 = require("../../controls/ControlResult");
const log = new Logger_1.Logger('AskSdkControls:TestingUtils');
/**
 * A little helper that sleeps for a short duration to give the debugger some time to
 * get ready.
 * (otherwise a test will often run without hitting breakpoints)
 */
let waitHasBeenDone = false;
function waitForDebugger() {
    if (!waitHasBeenDone) {
        Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, 500);
        waitHasBeenDone = true;
    }
}
exports.waitForDebugger = waitForDebugger;
function findControlById(rootControl, id) {
    return find(rootControl, 'id', id);
}
exports.findControlById = findControlById;
function findControlByProperty(rootControl, property, value) {
    return find(rootControl, property, value);
}
exports.findControlByProperty = findControlByProperty;
/**
 * find the first sub-object in an object that has key = value.
 * e.g. to locating something by id:  find(myobj, "key", "theKey")
 * {a:[{b:{key: "theKey", "value": "1"}}]} returns {key: "theKey", "value": "1"}
 * @param object
 * @param key
 * @param value
 */
function find(object, key, value) {
    if (typeof (object) !== "object") {
        return undefined;
    }
    if (object === null) {
        return undefined;
    }
    const theValue = object[key];
    if (theValue !== undefined && lodash_1.default.isEqual(theValue, value)) {
        return object;
    }
    // eslint-disable-next-line no-prototype-builtins
    const kidKeys = Object.keys(object).filter(key => object.hasOwnProperty(key));
    for (const kidKey of kidKeys) {
        const childObj = object[kidKey];
        if (typeof (childObj) === "object") {
            const result = find(childObj, key, value);
            if (result !== undefined) {
                return result;
            }
        }
    }
    return undefined;
}
async function simpleInvoke(rootControl, input) {
    const resultBuilder = new ControlResult_1.ControlResultBuilder();
    await ControlHandler_1.ControlHandler.handleCore(rootControl, input, resultBuilder);
    return resultBuilder.build();
}
exports.simpleInvoke = simpleInvoke;
/**
 * Each user turn comprises two entries: 1st is the user utterance and 2nd is the Input that we assume will be produced by NLU
 * Each alexa turn is just the prompt
 *
 * Turns can start with 'U: ' and 'A: ' to help readability.
 * @param turns an array of 3 entries per logical turn.  [utterance, Intent]
 */
async function testE2E(handler, turns) {
    const invoker = new SkillInvoker_1.SkillInvoker(SkillWrapper_1.wrapRequestHandlerAsSkill(handler));
    for (let counter = 0; counter < turns.length; counter += 3) {
        const userUtterance = turns[counter];
        const input = turns[counter + 1];
        const expectedResponse = turns[counter + 2];
        if (typeof userUtterance !== 'string') {
            throw new Error('user utterance not found');
        }
        if (typeof input !== 'object') {
            throw new Error('nlu object not found');
        }
        if (userUtterance.toLowerCase().startsWith('a:')) {
            throw new Error(`user utterance starts with A: -->${userUtterance}`);
        }
        await testTurn(invoker, userUtterance, input, expectedResponse);
    }
}
exports.testE2E = testE2E;
async function testTurn(invoker, utterance, input, expectedResponse) {
    const testResponse = await invoker.invoke(input);
    if (Array.isArray(expectedResponse)) {
        chai_1.expect(lodash_1.default.includes(expectedResponse, testResponse.prompt)).equals(true);
    }
    else {
        const expectedPrompt = typeof expectedResponse === 'string' ? expectedResponse : expectedResponse.prompt;
        if (!expectedPrompt.toLowerCase().startsWith('a:')) {
            throw new Error(`test configuration error: Alexa prompt should start with A: -->${expectedResponse}`);
        }
        if (testResponse.prompt !== expectedPrompt &&
            testResponse.prompt !== expectedPrompt.substr(2).trimLeft()) {
            chai_1.expect(testResponse.prompt).equals(expectedPrompt);
        }
        if (expectedResponse.directive) {
            if (!lodash_1.default.isEqual(testResponse.directive, expectedResponse.directive)) {
                chai_1.expect(testResponse.directive).deep.equals(expectedResponse.directive);
            }
        }
    }
    return testResponse;
}
exports.testTurn = testTurn;
class TestInput {
    static reset() {
        this.turnNumber = 1;
    }
    static of(nameOrIntent) {
        const input = TestInput.intent(nameOrIntent);
        this.turnNumber++;
        return input;
    }
    static intent(nameOrIntent, slotValues) {
        const request = wrapIntentAsIntentRequest(nameOrIntent, slotValues);
        return dummyControlInput(request);
    }
    // public static intentWithMultiValueSlots(nameOrIntent: string | Intent, slotValues?: { [k: string]: any }): ControlInput {
    //     const request = wrapIntentAsIntentRequest(nameOrIntent, slotValues);
    //     return dummyControlInput(request);
    // }
    static launchRequest() {
        const launchRequest = {
            type: 'LaunchRequest',
            requestId: 'amzn1.echo-api.request.69ba9cb0-bdac-476c-9e35-b7c4382ef039',
            timestamp: '2019-09-04T00:08:32Z',
            locale: 'en-US',
        };
        return dummyControlInput(launchRequest);
    }
    static userEvent(userEvent) {
        return dummyControlInput(userEvent);
    }
}
exports.TestInput = TestInput;
TestInput.turnNumber = 1;
class SkillTester {
    constructor(skillOrRequestHandler) {
        this.invoker = new SkillInvoker_1.SkillInvoker(skillOrRequestHandler);
    }
    async testTurn(utterance, input, expectedPrompt) {
        return testTurn(this.invoker, utterance, input, expectedPrompt);
    }
}
exports.SkillTester = SkillTester;
function makeRequestId() {
    // example from live skill:'amzn1.echo-api.request.69ba9cb0-bdac-476c-9e35-b7c4382ef039'
    const id = `amzn1.echo-api.request.${Math.round(Math.random() * 1000000000).toString()}`;
    return id;
}
function wrapIntentAsIntentRequest(nameOrIntent, slotValues) {
    const intent = typeof nameOrIntent === 'string' ? IntentUtils_1.IntentBuilder.of(nameOrIntent, slotValues) : nameOrIntent;
    const intentRequest = {
        type: 'IntentRequest',
        requestId: makeRequestId(),
        timestamp: '2019-09-04T00:08:32Z',
        locale: 'en-US',
        dialogState: 'STARTED',
        intent
    };
    return intentRequest;
}
function dummyRequestEnvelope(request) {
    if (request === undefined) {
        request = {
            type: 'IntentRequest',
            requestId: makeRequestId(),
            timestamp: '',
            dialogState: 'IN_PROGRESS',
            intent: {
                name: '',
                confirmationStatus: 'NONE'
            }
        };
    }
    return {
        version: '',
        session: {
            new: true,
            application: {
                applicationId: '',
            },
            sessionId: '',
            user: {
                userId: ''
            },
        },
        context: {
            System: {
                application: {
                    applicationId: ''
                },
                user: {
                    userId: '',
                },
                apiEndpoint: '',
                device: {
                    deviceId: '',
                    supportedInterfaces: {
                        'Display': {
                            templateVersion: "1.0",
                            markupVersion: "1.0"
                        },
                        "Alexa.Presentation.APL": {
                            runtime: {
                                maxVersion: "1.3"
                            }
                        }
                    }
                }
            },
        },
        request
    };
}
function dummyControlInput(request) {
    const handlerInput = {
        requestEnvelope: dummyRequestEnvelope(request),
        context: {},
        attributesManager: dummyAttributesManager,
        responseBuilder: dummyResponseBuilder,
        serviceClientFactory: undefined
    };
    return {
        handlerInput,
        request: handlerInput.requestEnvelope.request,
        turnNumber: TestInput.turnNumber,
        controls: {}
    };
}
const dummyAttributesManager = ask_sdk_core_1.AttributesManagerFactory.init({ requestEnvelope: dummyRequestEnvelope() });
const dummyResponseBuilder = ask_sdk_core_1.ResponseFactory.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdGluZ1V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWxzL3Rlc3RTdXBwb3J0L1Rlc3RpbmdVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7Ozs7QUFFSCxnQ0FBZ0M7QUFDaEMsK0NBQW9JO0FBRXBJLCtCQUE4QjtBQUM5Qiw0REFBbUM7QUFLbkMsaURBQThDO0FBQzlDLGlFQUE4RDtBQUM5RCxnREFBK0M7QUFDL0MsaURBQWtFO0FBQ2xFLGlEQUEyRDtBQUczRCxnRUFBb0U7QUFFcEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxlQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUV0RDs7OztHQUlHO0FBQ0gsSUFBSSxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQzVCLFNBQWdCLGVBQWU7SUFDM0IsSUFBSSxDQUFDLGVBQWUsRUFBRTtRQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2xFLGVBQWUsR0FBRyxJQUFJLENBQUM7S0FDMUI7QUFDTCxDQUFDO0FBTEQsMENBS0M7QUFFRCxTQUFnQixlQUFlLENBQUMsV0FBcUIsRUFBRSxFQUFVO0lBQzdELE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUZELDBDQUVDO0FBRUQsU0FBZ0IscUJBQXFCLENBQUMsV0FBcUIsRUFBRSxRQUFnQixFQUFFLEtBQVU7SUFDckYsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRkQsc0RBRUM7QUFHRDs7Ozs7OztHQU9HO0FBQ0gsU0FBUyxJQUFJLENBQUMsTUFBVyxFQUFFLEdBQVcsRUFBRSxLQUFVO0lBQzlDLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUM5QixPQUFPLFNBQVMsQ0FBQztLQUNwQjtJQUNELElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtRQUNqQixPQUFPLFNBQVMsQ0FBQztLQUNwQjtJQUNELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksZ0JBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFO1FBQ3RELE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0lBRUQsaURBQWlEO0lBQ2pELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlFLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzFCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDMUMsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUN0QixPQUFPLE1BQU0sQ0FBQzthQUNqQjtTQUNKO0tBQ0o7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRU0sS0FBSyxVQUFVLFlBQVksQ0FBQyxXQUFvQixFQUFFLEtBQW1CO0lBQ3hFLE1BQU0sYUFBYSxHQUFHLElBQUksb0NBQW9CLEVBQUUsQ0FBQztJQUNqRCxNQUFNLCtCQUFjLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDbkUsT0FBTyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDakMsQ0FBQztBQUpELG9DQUlDO0FBRUQ7Ozs7OztHQU1HO0FBQ0ksS0FBSyxVQUFVLE9BQU8sQ0FBQyxPQUF1QixFQUFFLEtBQW9FO0lBQ3ZILE1BQU0sT0FBTyxHQUFHLElBQUksMkJBQVksQ0FBQyx3Q0FBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLEtBQUssSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUU7UUFDeEQsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFrQixDQUFDO1FBQ2xELE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQTJDLENBQUM7UUFFdEYsSUFBSSxPQUFPLGFBQWEsS0FBSyxRQUFRLEVBQUU7WUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsSUFBSSxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQXFDLGFBQWEsRUFBRSxDQUFDLENBQUM7U0FDekU7UUFDRCxNQUFNLFFBQVEsQ0FBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ25FO0FBQ0wsQ0FBQztBQWxCRCwwQkFrQkM7QUFFTSxLQUFLLFVBQVUsUUFBUSxDQUFDLE9BQXFCLEVBQUUsU0FBaUIsRUFBRSxLQUFvQixFQUFFLGdCQUF3RDtJQUNuSixNQUFNLFlBQVksR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDakMsYUFBTSxDQUFDLGdCQUFDLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxRTtTQUFNO1FBQ0gsTUFBTSxjQUFjLEdBQVcsT0FBTyxnQkFBZ0IsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7UUFDakgsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBbUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1NBQzFHO1FBRUQsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLGNBQWM7WUFDdEMsWUFBWSxDQUFDLE1BQU0sS0FBSyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQzdELGFBQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsSUFBSyxnQkFBdUMsQ0FBQyxTQUFTLEVBQUU7WUFDcEQsSUFBSSxDQUFDLGdCQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUcsZ0JBQXdCLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3pFLGFBQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBRSxnQkFBdUMsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUNsRztTQUNKO0tBQ0o7SUFDRCxPQUFPLFlBQVksQ0FBQztBQUN4QixDQUFDO0FBdEJELDRCQXNCQztBQUVELE1BQWEsU0FBUztJQUdYLE1BQU0sQ0FBQyxLQUFLO1FBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBb0I7UUFDakMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBNkIsRUFBRSxVQUFpQztRQUNqRixNQUFNLE9BQU8sR0FBRyx5QkFBeUIsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFcEUsT0FBTyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsNEhBQTRIO0lBQzVILDJFQUEyRTtJQUUzRSx5Q0FBeUM7SUFDekMsSUFBSTtJQUdHLE1BQU0sQ0FBQyxhQUFhO1FBRXZCLE1BQU0sYUFBYSxHQUFrQjtZQUNqQyxJQUFJLEVBQUUsZUFBZTtZQUNyQixTQUFTLEVBQUUsNkRBQTZEO1lBQ3hFLFNBQVMsRUFBRSxzQkFBc0I7WUFDakMsTUFBTSxFQUFFLE9BQU87U0FDbEIsQ0FBQztRQUVGLE9BQU8saUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBb0I7UUFFeEMsT0FBTyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDOztBQXpDTCw4QkEwQ0M7QUF6Q1Usb0JBQVUsR0FBRyxDQUFDLENBQUM7QUEyQzFCLE1BQWEsV0FBVztJQUdwQixZQUFZLHFCQUE2QztRQUNyRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksMkJBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQWlCLEVBQUUsS0FBbUIsRUFBRSxjQUFzQjtRQUN6RSxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNKO0FBVkQsa0NBVUM7QUFFRCxTQUFTLGFBQWE7SUFDbEIsd0ZBQXdGO0lBQ3hGLE1BQU0sRUFBRSxHQUFHLDBCQUEyQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO0lBQzFGLE9BQU8sRUFBRSxDQUFDO0FBQ2QsQ0FBQztBQUlELFNBQVMseUJBQXlCLENBQUMsWUFBNkIsRUFBRSxVQUFpQztJQUMvRixNQUFNLE1BQU0sR0FBRyxPQUFPLFlBQVksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLDJCQUFhLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBRTVHLE1BQU0sYUFBYSxHQUFrQjtRQUNqQyxJQUFJLEVBQUUsZUFBZTtRQUNyQixTQUFTLEVBQUUsYUFBYSxFQUFFO1FBQzFCLFNBQVMsRUFBRSxzQkFBc0I7UUFDakMsTUFBTSxFQUFFLE9BQU87UUFDZixXQUFXLEVBQUUsU0FBUztRQUN0QixNQUFNO0tBQ1QsQ0FBQztJQUVGLE9BQU8sYUFBYSxDQUFDO0FBQ3pCLENBQUM7QUFFRCxTQUFTLG9CQUFvQixDQUFDLE9BQWlCO0lBQzNDLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUN2QixPQUFPLEdBQUc7WUFDTixJQUFJLEVBQUUsZUFBZTtZQUNyQixTQUFTLEVBQUUsYUFBYSxFQUFFO1lBQzFCLFNBQVMsRUFBRSxFQUFFO1lBQ2IsV0FBVyxFQUFFLGFBQWE7WUFDMUIsTUFBTSxFQUFFO2dCQUNKLElBQUksRUFBRSxFQUFFO2dCQUNSLGtCQUFrQixFQUFFLE1BQU07YUFDN0I7U0FDSixDQUFDO0tBQ0w7SUFFRCxPQUFPO1FBQ0gsT0FBTyxFQUFFLEVBQUU7UUFDWCxPQUFPLEVBQUU7WUFDTCxHQUFHLEVBQUUsSUFBSTtZQUNULFdBQVcsRUFBRTtnQkFDVCxhQUFhLEVBQUUsRUFBRTthQUNwQjtZQUNELFNBQVMsRUFBRSxFQUFFO1lBQ2IsSUFBSSxFQUFFO2dCQUNGLE1BQU0sRUFBRSxFQUFFO2FBQ2I7U0FDSjtRQUNELE9BQU8sRUFBRTtZQUNMLE1BQU0sRUFBRTtnQkFDSixXQUFXLEVBQUU7b0JBQ1QsYUFBYSxFQUFFLEVBQUU7aUJBQ3BCO2dCQUNELElBQUksRUFBRTtvQkFDRixNQUFNLEVBQUUsRUFBRTtpQkFDYjtnQkFDRCxXQUFXLEVBQUUsRUFBRTtnQkFDZixNQUFNLEVBQUU7b0JBQ0osUUFBUSxFQUFFLEVBQUU7b0JBQ1osbUJBQW1CLEVBQUU7d0JBQ2pCLFNBQVMsRUFBRTs0QkFDUCxlQUFlLEVBQUUsS0FBSzs0QkFDdEIsYUFBYSxFQUFFLEtBQUs7eUJBQ3ZCO3dCQUNELHdCQUF3QixFQUFFOzRCQUN0QixPQUFPLEVBQUU7Z0NBQ0wsVUFBVSxFQUFFLEtBQUs7NkJBQ3BCO3lCQUNKO3FCQUNKO2lCQUNKO2FBQ0o7U0FDSjtRQUNELE9BQU87S0FDVixDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsT0FBaUI7SUFFeEMsTUFBTSxZQUFZLEdBQUc7UUFDakIsZUFBZSxFQUFFLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztRQUM5QyxPQUFPLEVBQUUsRUFBRTtRQUNYLGlCQUFpQixFQUFFLHNCQUFzQjtRQUN6QyxlQUFlLEVBQUUsb0JBQW9CO1FBQ3JDLG9CQUFvQixFQUFFLFNBQVM7S0FDbEMsQ0FBQztJQUVGLE9BQU87UUFDSCxZQUFZO1FBQ1osT0FBTyxFQUFFLFlBQVksQ0FBQyxlQUFlLENBQUMsT0FBTztRQUM3QyxVQUFVLEVBQUUsU0FBUyxDQUFDLFVBQVU7UUFDaEMsUUFBUSxFQUFFLEVBQUU7S0FDZixDQUFDO0FBQ04sQ0FBQztBQUNELE1BQU0sc0JBQXNCLEdBQXNCLHVDQUF3QixDQUFDLElBQUksQ0FBQyxFQUFFLGVBQWUsRUFBRSxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM3SCxNQUFNLG9CQUFvQixHQUFvQiw4QkFBZSxDQUFDLElBQUksRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE5IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gVE9ETzogYWRkIGpzRG9jIGZvciB0aGlzIGZpbGVcbmltcG9ydCB7IEF0dHJpYnV0ZXNNYW5hZ2VyLCBBdHRyaWJ1dGVzTWFuYWdlckZhY3RvcnksIFJlcXVlc3RIYW5kbGVyLCBSZXNwb25zZUJ1aWxkZXIsIFJlc3BvbnNlRmFjdG9yeSwgU2tpbGwgfSBmcm9tICdhc2stc2RrLWNvcmUnO1xuaW1wb3J0IHsgSW50ZW50LCBJbnRlbnRSZXF1ZXN0LCBpbnRlcmZhY2VzLCBMYXVuY2hSZXF1ZXN0LCBSZXF1ZXN0LCBSZXF1ZXN0RW52ZWxvcGUgfSBmcm9tIFwiYXNrLXNkay1tb2RlbFwiO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSBcImNoYWlcIjtcbmltcG9ydCBfLCB7IGludm9rZSB9IGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IENvbnRyb2xJbnB1dCB9IGZyb20gJy4uLy4uL2NvbnRyb2xzL0NvbnRyb2xJbnB1dCc7XG5pbXBvcnQgeyBJQ29udHJvbCB9IGZyb20gJy4uLy4uL2NvbnRyb2xzL2ludGVyZmFjZXMvSUNvbnRyb2wnO1xuaW1wb3J0IHsgSUNvbnRyb2xJbnB1dCB9IGZyb20gJy4uLy4uL2NvbnRyb2xzL2ludGVyZmFjZXMvSUNvbnRyb2xJbnB1dCc7XG5pbXBvcnQgeyBJQ29udHJvbFJlc3VsdCB9IGZyb20gJy4uLy4uL2NvbnRyb2xzL2ludGVyZmFjZXMvSUNvbnRyb2xSZXN1bHQnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vLi4vbG9nZ2luZy9Mb2dnZXInO1xuaW1wb3J0IHsgQ29udHJvbEhhbmRsZXIgfSBmcm9tICcuLi8uLi9ydW50aW1lL0NvbnRyb2xIYW5kbGVyJztcbmltcG9ydCB7IEludGVudEJ1aWxkZXIgfSBmcm9tICcuLi9JbnRlbnRVdGlscyc7XG5pbXBvcnQgeyBTa2lsbEludm9rZXIsIFRlc3RSZXNwb25zZU9iamVjdCB9IGZyb20gJy4vU2tpbGxJbnZva2VyJztcbmltcG9ydCB7IHdyYXBSZXF1ZXN0SGFuZGxlckFzU2tpbGwgfSBmcm9tICcuL1NraWxsV3JhcHBlcic7XG5pbXBvcnQgVXNlckV2ZW50ID0gaW50ZXJmYWNlcy5hbGV4YS5wcmVzZW50YXRpb24uYXBsLlVzZXJFdmVudDtcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tICcuLi8uLi9jb250cm9scy9Db250cm9sJztcbmltcG9ydCB7IENvbnRyb2xSZXN1bHRCdWlsZGVyIH0gZnJvbSAnLi4vLi4vY29udHJvbHMvQ29udHJvbFJlc3VsdCc7XG5cbmNvbnN0IGxvZyA9IG5ldyBMb2dnZXIoJ0Fza1Nka0NvbnRyb2xzOlRlc3RpbmdVdGlscycpO1xuXG4vKipcbiAqIEEgbGl0dGxlIGhlbHBlciB0aGF0IHNsZWVwcyBmb3IgYSBzaG9ydCBkdXJhdGlvbiB0byBnaXZlIHRoZSBkZWJ1Z2dlciBzb21lIHRpbWUgdG9cbiAqIGdldCByZWFkeS5cbiAqIChvdGhlcndpc2UgYSB0ZXN0IHdpbGwgb2Z0ZW4gcnVuIHdpdGhvdXQgaGl0dGluZyBicmVha3BvaW50cylcbiAqL1xubGV0IHdhaXRIYXNCZWVuRG9uZSA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIHdhaXRGb3JEZWJ1Z2dlcigpIHtcbiAgICBpZiAoIXdhaXRIYXNCZWVuRG9uZSkge1xuICAgICAgICBBdG9taWNzLndhaXQobmV3IEludDMyQXJyYXkobmV3IFNoYXJlZEFycmF5QnVmZmVyKDQpKSwgMCwgMCwgNTAwKTtcbiAgICAgICAgd2FpdEhhc0JlZW5Eb25lID0gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ29udHJvbEJ5SWQocm9vdENvbnRyb2w6IElDb250cm9sLCBpZDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gZmluZChyb290Q29udHJvbCwgJ2lkJywgaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZENvbnRyb2xCeVByb3BlcnR5KHJvb3RDb250cm9sOiBJQ29udHJvbCwgcHJvcGVydHk6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIGZpbmQocm9vdENvbnRyb2wsIHByb3BlcnR5LCB2YWx1ZSk7XG59XG5cblxuLyoqXG4gKiBmaW5kIHRoZSBmaXJzdCBzdWItb2JqZWN0IGluIGFuIG9iamVjdCB0aGF0IGhhcyBrZXkgPSB2YWx1ZS5cbiAqIGUuZy4gdG8gbG9jYXRpbmcgc29tZXRoaW5nIGJ5IGlkOiAgZmluZChteW9iaiwgXCJrZXlcIiwgXCJ0aGVLZXlcIilcbiAqIHthOlt7Yjp7a2V5OiBcInRoZUtleVwiLCBcInZhbHVlXCI6IFwiMVwifX1dfSByZXR1cm5zIHtrZXk6IFwidGhlS2V5XCIsIFwidmFsdWVcIjogXCIxXCJ9XG4gKiBAcGFyYW0gb2JqZWN0XG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0gdmFsdWVcbiAqL1xuZnVuY3Rpb24gZmluZChvYmplY3Q6IGFueSwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBhbnkge1xuICAgIGlmICh0eXBlb2YgKG9iamVjdCkgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCB0aGVWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgIGlmICh0aGVWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIF8uaXNFcXVhbCh0aGVWYWx1ZSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgIGNvbnN0IGtpZEtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpLmZpbHRlcihrZXkgPT4gb2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkpO1xuICAgIGZvciAoY29uc3Qga2lkS2V5IG9mIGtpZEtleXMpIHtcbiAgICAgICAgY29uc3QgY2hpbGRPYmogPSBvYmplY3Rba2lkS2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiAoY2hpbGRPYmopID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmaW5kKGNoaWxkT2JqLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpbXBsZUludm9rZShyb290Q29udHJvbDogQ29udHJvbCwgaW5wdXQ6IENvbnRyb2xJbnB1dCk6IFByb21pc2U8SUNvbnRyb2xSZXN1bHQ+IHtcbiAgICBjb25zdCByZXN1bHRCdWlsZGVyID0gbmV3IENvbnRyb2xSZXN1bHRCdWlsZGVyKCk7XG4gICAgYXdhaXQgQ29udHJvbEhhbmRsZXIuaGFuZGxlQ29yZShyb290Q29udHJvbCwgaW5wdXQsIHJlc3VsdEJ1aWxkZXIpO1xuICAgIHJldHVybiByZXN1bHRCdWlsZGVyLmJ1aWxkKCk7XG59XG5cbi8qKlxuICogRWFjaCB1c2VyIHR1cm4gY29tcHJpc2VzIHR3byBlbnRyaWVzOiAxc3QgaXMgdGhlIHVzZXIgdXR0ZXJhbmNlIGFuZCAybmQgaXMgdGhlIElucHV0IHRoYXQgd2UgYXNzdW1lIHdpbGwgYmUgcHJvZHVjZWQgYnkgTkxVXG4gKiBFYWNoIGFsZXhhIHR1cm4gaXMganVzdCB0aGUgcHJvbXB0XG4gKlxuICogVHVybnMgY2FuIHN0YXJ0IHdpdGggJ1U6ICcgYW5kICdBOiAnIHRvIGhlbHAgcmVhZGFiaWxpdHkuXG4gKiBAcGFyYW0gdHVybnMgYW4gYXJyYXkgb2YgMyBlbnRyaWVzIHBlciBsb2dpY2FsIHR1cm4uICBbdXR0ZXJhbmNlLCBJbnRlbnRdXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXN0RTJFKGhhbmRsZXI6IENvbnRyb2xIYW5kbGVyLCB0dXJuczogQXJyYXk8c3RyaW5nIHwgc3RyaW5nW10gfCBJQ29udHJvbElucHV0IHwgVGVzdFJlc3BvbnNlT2JqZWN0Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGludm9rZXIgPSBuZXcgU2tpbGxJbnZva2VyKHdyYXBSZXF1ZXN0SGFuZGxlckFzU2tpbGwoaGFuZGxlcikpO1xuICAgIGZvciAobGV0IGNvdW50ZXIgPSAwOyBjb3VudGVyIDwgdHVybnMubGVuZ3RoOyBjb3VudGVyICs9IDMpIHtcbiAgICAgICAgY29uc3QgdXNlclV0dGVyYW5jZSA9IHR1cm5zW2NvdW50ZXJdO1xuICAgICAgICBjb25zdCBpbnB1dCA9IHR1cm5zW2NvdW50ZXIgKyAxXSBhcyBJQ29udHJvbElucHV0O1xuICAgICAgICBjb25zdCBleHBlY3RlZFJlc3BvbnNlID0gdHVybnNbY291bnRlciArIDJdIGFzIHN0cmluZyB8IHN0cmluZ1tdIHwgVGVzdFJlc3BvbnNlT2JqZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgdXNlclV0dGVyYW5jZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndXNlciB1dHRlcmFuY2Ugbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbmx1IG9iamVjdCBub3QgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlclV0dGVyYW5jZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJ2E6JykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgdXNlciB1dHRlcmFuY2Ugc3RhcnRzIHdpdGggQTogLS0+JHsgdXNlclV0dGVyYW5jZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0ZXN0VHVybihpbnZva2VyLCB1c2VyVXR0ZXJhbmNlLCBpbnB1dCwgZXhwZWN0ZWRSZXNwb25zZSk7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGVzdFR1cm4oaW52b2tlcjogU2tpbGxJbnZva2VyLCB1dHRlcmFuY2U6IHN0cmluZywgaW5wdXQ6IElDb250cm9sSW5wdXQsIGV4cGVjdGVkUmVzcG9uc2U6IHN0cmluZyB8IHN0cmluZ1tdIHwgVGVzdFJlc3BvbnNlT2JqZWN0KTogUHJvbWlzZTxUZXN0UmVzcG9uc2VPYmplY3Q+IHtcbiAgICBjb25zdCB0ZXN0UmVzcG9uc2UgPSBhd2FpdCBpbnZva2VyLmludm9rZShpbnB1dCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0ZWRSZXNwb25zZSkpIHtcbiAgICAgICAgZXhwZWN0KF8uaW5jbHVkZXMoZXhwZWN0ZWRSZXNwb25zZSwgdGVzdFJlc3BvbnNlLnByb21wdCkpLmVxdWFscyh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBleHBlY3RlZFByb21wdDogc3RyaW5nID0gdHlwZW9mIGV4cGVjdGVkUmVzcG9uc2UgPT09ICdzdHJpbmcnID8gZXhwZWN0ZWRSZXNwb25zZSA6IGV4cGVjdGVkUmVzcG9uc2UucHJvbXB0O1xuICAgICAgICBpZiAoIWV4cGVjdGVkUHJvbXB0LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnYTonKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0ZXN0IGNvbmZpZ3VyYXRpb24gZXJyb3I6IEFsZXhhIHByb21wdCBzaG91bGQgc3RhcnQgd2l0aCBBOiAtLT4keyBleHBlY3RlZFJlc3BvbnNlfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRlc3RSZXNwb25zZS5wcm9tcHQgIT09IGV4cGVjdGVkUHJvbXB0ICYmXG4gICAgICAgICAgICB0ZXN0UmVzcG9uc2UucHJvbXB0ICE9PSBleHBlY3RlZFByb21wdC5zdWJzdHIoMikudHJpbUxlZnQoKSkge1xuICAgICAgICAgICAgZXhwZWN0KHRlc3RSZXNwb25zZS5wcm9tcHQpLmVxdWFscyhleHBlY3RlZFByb21wdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGV4cGVjdGVkUmVzcG9uc2UgYXMgVGVzdFJlc3BvbnNlT2JqZWN0KS5kaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGlmICghXy5pc0VxdWFsKHRlc3RSZXNwb25zZS5kaXJlY3RpdmUsIChleHBlY3RlZFJlc3BvbnNlIGFzIGFueSkuZGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGV4cGVjdCh0ZXN0UmVzcG9uc2UuZGlyZWN0aXZlKS5kZWVwLmVxdWFscygoZXhwZWN0ZWRSZXNwb25zZSBhcyBUZXN0UmVzcG9uc2VPYmplY3QpLmRpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRlc3RSZXNwb25zZTtcbn1cblxuZXhwb3J0IGNsYXNzIFRlc3RJbnB1dCB7XG4gICAgc3RhdGljIHR1cm5OdW1iZXIgPSAxO1xuXG4gICAgcHVibGljIHN0YXRpYyByZXNldCgpIHtcbiAgICAgICAgdGhpcy50dXJuTnVtYmVyID0gMTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG9mKG5hbWVPckludGVudDogSW50ZW50KTogQ29udHJvbElucHV0IHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBUZXN0SW5wdXQuaW50ZW50KG5hbWVPckludGVudCk7XG4gICAgICAgIHRoaXMudHVybk51bWJlcisrO1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpbnRlbnQobmFtZU9ySW50ZW50OiBzdHJpbmcgfCBJbnRlbnQsIHNsb3RWYWx1ZXM/OiB7IFtrOiBzdHJpbmddOiBhbnkgfSk6IENvbnRyb2xJbnB1dCB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB3cmFwSW50ZW50QXNJbnRlbnRSZXF1ZXN0KG5hbWVPckludGVudCwgc2xvdFZhbHVlcyk7XG5cbiAgICAgICAgcmV0dXJuIGR1bW15Q29udHJvbElucHV0KHJlcXVlc3QpO1xuICAgIH1cblxuICAgIC8vIHB1YmxpYyBzdGF0aWMgaW50ZW50V2l0aE11bHRpVmFsdWVTbG90cyhuYW1lT3JJbnRlbnQ6IHN0cmluZyB8IEludGVudCwgc2xvdFZhbHVlcz86IHsgW2s6IHN0cmluZ106IGFueSB9KTogQ29udHJvbElucHV0IHtcbiAgICAvLyAgICAgY29uc3QgcmVxdWVzdCA9IHdyYXBJbnRlbnRBc0ludGVudFJlcXVlc3QobmFtZU9ySW50ZW50LCBzbG90VmFsdWVzKTtcblxuICAgIC8vICAgICByZXR1cm4gZHVtbXlDb250cm9sSW5wdXQocmVxdWVzdCk7XG4gICAgLy8gfVxuXG5cbiAgICBwdWJsaWMgc3RhdGljIGxhdW5jaFJlcXVlc3QoKTogQ29udHJvbElucHV0IHtcblxuICAgICAgICBjb25zdCBsYXVuY2hSZXF1ZXN0OiBMYXVuY2hSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgdHlwZTogJ0xhdW5jaFJlcXVlc3QnLFxuICAgICAgICAgICAgcmVxdWVzdElkOiAnYW16bjEuZWNoby1hcGkucmVxdWVzdC42OWJhOWNiMC1iZGFjLTQ3NmMtOWUzNS1iN2M0MzgyZWYwMzknLFxuICAgICAgICAgICAgdGltZXN0YW1wOiAnMjAxOS0wOS0wNFQwMDowODozMlonLFxuICAgICAgICAgICAgbG9jYWxlOiAnZW4tVVMnLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkdW1teUNvbnRyb2xJbnB1dChsYXVuY2hSZXF1ZXN0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHVzZXJFdmVudCh1c2VyRXZlbnQ6IFVzZXJFdmVudCk6IENvbnRyb2xJbnB1dHtcblxuICAgICAgICByZXR1cm4gZHVtbXlDb250cm9sSW5wdXQodXNlckV2ZW50KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTa2lsbFRlc3RlciB7XG4gICAgaW52b2tlcjogU2tpbGxJbnZva2VyO1xuXG4gICAgY29uc3RydWN0b3Ioc2tpbGxPclJlcXVlc3RIYW5kbGVyOiBTa2lsbCB8IFJlcXVlc3RIYW5kbGVyKXtcbiAgICAgICAgdGhpcy5pbnZva2VyID0gbmV3IFNraWxsSW52b2tlcihza2lsbE9yUmVxdWVzdEhhbmRsZXIpO1xuICAgIH1cblxuICAgIGFzeW5jIHRlc3RUdXJuKHV0dGVyYW5jZTogc3RyaW5nLCBpbnB1dDogQ29udHJvbElucHV0LCBleHBlY3RlZFByb21wdDogc3RyaW5nKTogUHJvbWlzZTxUZXN0UmVzcG9uc2VPYmplY3Q+IHtcbiAgICAgICAgcmV0dXJuIHRlc3RUdXJuKHRoaXMuaW52b2tlciwgdXR0ZXJhbmNlLCBpbnB1dCwgZXhwZWN0ZWRQcm9tcHQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZVJlcXVlc3RJZCgpe1xuICAgIC8vIGV4YW1wbGUgZnJvbSBsaXZlIHNraWxsOidhbXpuMS5lY2hvLWFwaS5yZXF1ZXN0LjY5YmE5Y2IwLWJkYWMtNDc2Yy05ZTM1LWI3YzQzODJlZjAzOSdcbiAgICBjb25zdCBpZCA9IGBhbXpuMS5lY2hvLWFwaS5yZXF1ZXN0LiR7IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApLnRvU3RyaW5nKCl9YDtcbiAgICByZXR1cm4gaWQ7XG59XG5cblxuXG5mdW5jdGlvbiB3cmFwSW50ZW50QXNJbnRlbnRSZXF1ZXN0KG5hbWVPckludGVudDogc3RyaW5nIHwgSW50ZW50LCBzbG90VmFsdWVzPzogeyBbazogc3RyaW5nXTogYW55IH0pOiBJbnRlbnRSZXF1ZXN0IHtcbiAgICBjb25zdCBpbnRlbnQgPSB0eXBlb2YgbmFtZU9ySW50ZW50ID09PSAnc3RyaW5nJyA/IEludGVudEJ1aWxkZXIub2YobmFtZU9ySW50ZW50LCBzbG90VmFsdWVzKSA6IG5hbWVPckludGVudDtcblxuICAgIGNvbnN0IGludGVudFJlcXVlc3Q6IEludGVudFJlcXVlc3QgPSB7XG4gICAgICAgIHR5cGU6ICdJbnRlbnRSZXF1ZXN0JyxcbiAgICAgICAgcmVxdWVzdElkOiBtYWtlUmVxdWVzdElkKCksXG4gICAgICAgIHRpbWVzdGFtcDogJzIwMTktMDktMDRUMDA6MDg6MzJaJyxcbiAgICAgICAgbG9jYWxlOiAnZW4tVVMnLFxuICAgICAgICBkaWFsb2dTdGF0ZTogJ1NUQVJURUQnLFxuICAgICAgICBpbnRlbnRcbiAgICB9O1xuXG4gICAgcmV0dXJuIGludGVudFJlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIGR1bW15UmVxdWVzdEVudmVsb3BlKHJlcXVlc3Q/OiBSZXF1ZXN0KTogUmVxdWVzdEVudmVsb3BlIHtcbiAgICBpZiAocmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcXVlc3QgPSB7XG4gICAgICAgICAgICB0eXBlOiAnSW50ZW50UmVxdWVzdCcsXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IG1ha2VSZXF1ZXN0SWQoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogJycsXG4gICAgICAgICAgICBkaWFsb2dTdGF0ZTogJ0lOX1BST0dSRVNTJyxcbiAgICAgICAgICAgIGludGVudDoge1xuICAgICAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1hdGlvblN0YXR1czogJ05PTkUnXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmVyc2lvbjogJycsXG4gICAgICAgIHNlc3Npb246IHtcbiAgICAgICAgICAgIG5ldzogdHJ1ZSxcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uOiB7XG4gICAgICAgICAgICAgICAgYXBwbGljYXRpb25JZDogJycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2Vzc2lvbklkOiAnJyxcbiAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBTeXN0ZW06IHtcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbklkOiAnJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6ICcnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXBpRW5kcG9pbnQ6ICcnLFxuICAgICAgICAgICAgICAgIGRldmljZToge1xuICAgICAgICAgICAgICAgICAgICBkZXZpY2VJZDogJycsXG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZEludGVyZmFjZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdEaXNwbGF5Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVmVyc2lvbjogXCIxLjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrdXBWZXJzaW9uOiBcIjEuMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBbGV4YS5QcmVzZW50YXRpb24uQVBMXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFZlcnNpb246IFwiMS4zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZHVtbXlDb250cm9sSW5wdXQocmVxdWVzdD86IFJlcXVlc3QpOiBDb250cm9sSW5wdXQge1xuXG4gICAgY29uc3QgaGFuZGxlcklucHV0ID0ge1xuICAgICAgICByZXF1ZXN0RW52ZWxvcGU6IGR1bW15UmVxdWVzdEVudmVsb3BlKHJlcXVlc3QpLFxuICAgICAgICBjb250ZXh0OiB7fSxcbiAgICAgICAgYXR0cmlidXRlc01hbmFnZXI6IGR1bW15QXR0cmlidXRlc01hbmFnZXIsXG4gICAgICAgIHJlc3BvbnNlQnVpbGRlcjogZHVtbXlSZXNwb25zZUJ1aWxkZXIsXG4gICAgICAgIHNlcnZpY2VDbGllbnRGYWN0b3J5OiB1bmRlZmluZWRcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGFuZGxlcklucHV0LFxuICAgICAgICByZXF1ZXN0OiBoYW5kbGVySW5wdXQucmVxdWVzdEVudmVsb3BlLnJlcXVlc3QsXG4gICAgICAgIHR1cm5OdW1iZXI6IFRlc3RJbnB1dC50dXJuTnVtYmVyLFxuICAgICAgICBjb250cm9sczoge31cbiAgICB9O1xufVxuY29uc3QgZHVtbXlBdHRyaWJ1dGVzTWFuYWdlcjogQXR0cmlidXRlc01hbmFnZXIgPSBBdHRyaWJ1dGVzTWFuYWdlckZhY3RvcnkuaW5pdCh7IHJlcXVlc3RFbnZlbG9wZTogZHVtbXlSZXF1ZXN0RW52ZWxvcGUoKSB9KTtcbmNvbnN0IGR1bW15UmVzcG9uc2VCdWlsZGVyOiBSZXNwb25zZUJ1aWxkZXIgPSBSZXNwb25zZUZhY3RvcnkuaW5pdCgpO1xuIl19