"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License').
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the 'license' file accompanying this file. This file is distributed
 * on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillInvoker = void 0;
const SkillWrapper_1 = require("./SkillWrapper");
/**
 * Wraps a userInterface definition as a Skill object for use in e2e scenario tests.
 * (multi-turn ASK Request -> ASK Response with state serialization)
 *
 * This wrapper mimics the lifecycle of an ASK Skill using AWS Lambda
 * that is repeatedly invoked as a 'stateless' function which receives actual state
 * in the session attributes of the Request object.
 *
 * The main part still simulated is the use of NLU & the interaction model.. we fake up the
 * IntentRequests based on ControlInput objects.
 *
 */
class SkillInvoker {
    constructor(skillOrRequestHandler) {
        this.skill = ((skillOrRequestHandler.handle !== undefined) ? SkillWrapper_1.wrapRequestHandlerAsSkill(skillOrRequestHandler) : skillOrRequestHandler);
    }
    /**
     * Invoke the skill with a control-input object.
     * The control input is first converted to a RequestEnvelope(IntentRequest)
     *
     * @param input
     * @returns [prompt ssml inner-text, reprompt ssml inner-text]
     */
    async invoke(input) {
        const envelope = input.handlerInput.requestEnvelope;
        envelope.session.attributes = this.sessionAttributes; // populate saved state
        // ********** INVOKE SKILL ****************
        const responseEnvelope = await this.skill.invoke(envelope, undefined);
        this.sessionAttributes = responseEnvelope.sessionAttributes; // save updated state
        const promptSSML = responseEnvelope.response.outputSpeech.ssml;
        const prompt = promptSSML.replace('<speak>', '').replace('</speak>', '');
        const repromptSSML = responseEnvelope.response.reprompt.outputSpeech.ssml;
        const reprompt = repromptSSML.replace('<speak>', '').replace('</speak>', '');
        const directive = responseEnvelope.response.directives;
        // const cardContent = (responseEnv.response.card as ui.SimpleCard).content;
        return {
            responseEnvelope,
            response: responseEnvelope.response,
            prompt,
            reprompt,
            directive
        };
    }
}
exports.SkillInvoker = SkillInvoker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2tpbGxJbnZva2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWxzL3Rlc3RTdXBwb3J0L1NraWxsSW52b2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQU1ILGlEQUEyRDtBQUszRDs7Ozs7Ozs7Ozs7R0FXRztBQUNILE1BQWEsWUFBWTtJQUtyQixZQUFZLHFCQUE2QztRQUNyRCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBRSxxQkFBNkIsQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLHdDQUF5QixDQUFDLHFCQUF1QyxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUE4QixDQUFDLENBQUM7SUFDL0ssQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBb0I7UUFDcEMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUM7UUFDcEQsUUFBUSxDQUFDLE9BQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsdUJBQXVCO1FBRTlFLDJDQUEyQztRQUMzQyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXRFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLHFCQUFxQjtRQUVsRixNQUFNLFVBQVUsR0FBSSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsWUFBb0MsQ0FBQyxJQUFJLENBQUM7UUFDeEYsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV6RSxNQUFNLFlBQVksR0FBSyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsUUFBd0IsQ0FBQyxZQUFvQyxDQUFDLElBQUksQ0FBQztRQUNwSCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTdFLE1BQU0sU0FBUyxHQUE0QixnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO1FBQ2hGLDRFQUE0RTtRQUM1RSxPQUFPO1lBQ0gsZ0JBQWdCO1lBQ2hCLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRO1lBQ25DLE1BQU07WUFDTixRQUFRO1lBQ1IsU0FBUztTQUNaLENBQUM7SUFDTixDQUFDO0NBQ0o7QUF6Q0Qsb0NBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE5IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gVE9ETzptb3ZlIHRvIHRlc3QgYXJlYVxuXG5pbXBvcnQgeyBTa2lsbCwgUmVxdWVzdEhhbmRsZXIgfSBmcm9tICdhc2stc2RrLWNvcmUnO1xuaW1wb3J0IHsgdWksIERpcmVjdGl2ZSwgUmVzcG9uc2UsIFJlc3BvbnNlRW52ZWxvcGUgfSBmcm9tICdhc2stc2RrLW1vZGVsJztcbmltcG9ydCB7IHdyYXBSZXF1ZXN0SGFuZGxlckFzU2tpbGwgfSBmcm9tICcuL1NraWxsV3JhcHBlcic7XG5pbXBvcnQgeyBJQ29udHJvbElucHV0IH0gZnJvbSAnLi4vLi4vY29udHJvbHMvaW50ZXJmYWNlcy9JQ29udHJvbElucHV0JztcblxudHlwZSBUU2Vzc2lvbkF0dHJpYnV0ZXMgPSB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIFdyYXBzIGEgdXNlckludGVyZmFjZSBkZWZpbml0aW9uIGFzIGEgU2tpbGwgb2JqZWN0IGZvciB1c2UgaW4gZTJlIHNjZW5hcmlvIHRlc3RzLlxuICogKG11bHRpLXR1cm4gQVNLIFJlcXVlc3QgLT4gQVNLIFJlc3BvbnNlIHdpdGggc3RhdGUgc2VyaWFsaXphdGlvbilcbiAqXG4gKiBUaGlzIHdyYXBwZXIgbWltaWNzIHRoZSBsaWZlY3ljbGUgb2YgYW4gQVNLIFNraWxsIHVzaW5nIEFXUyBMYW1iZGFcbiAqIHRoYXQgaXMgcmVwZWF0ZWRseSBpbnZva2VkIGFzIGEgJ3N0YXRlbGVzcycgZnVuY3Rpb24gd2hpY2ggcmVjZWl2ZXMgYWN0dWFsIHN0YXRlXG4gKiBpbiB0aGUgc2Vzc2lvbiBhdHRyaWJ1dGVzIG9mIHRoZSBSZXF1ZXN0IG9iamVjdC5cbiAqXG4gKiBUaGUgbWFpbiBwYXJ0IHN0aWxsIHNpbXVsYXRlZCBpcyB0aGUgdXNlIG9mIE5MVSAmIHRoZSBpbnRlcmFjdGlvbiBtb2RlbC4uIHdlIGZha2UgdXAgdGhlXG4gKiBJbnRlbnRSZXF1ZXN0cyBiYXNlZCBvbiBDb250cm9sSW5wdXQgb2JqZWN0cy5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBTa2lsbEludm9rZXIge1xuXG4gICAgcHJpdmF0ZSBzZXNzaW9uQXR0cmlidXRlczogVFNlc3Npb25BdHRyaWJ1dGVzO1xuICAgIHByaXZhdGUgc2tpbGw6IFNraWxsO1xuXG4gICAgY29uc3RydWN0b3Ioc2tpbGxPclJlcXVlc3RIYW5kbGVyOiBTa2lsbCB8IFJlcXVlc3RIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuc2tpbGwgPSAoKChza2lsbE9yUmVxdWVzdEhhbmRsZXIgYXMgYW55KS5oYW5kbGUgIT09IHVuZGVmaW5lZCkgPyB3cmFwUmVxdWVzdEhhbmRsZXJBc1NraWxsKHNraWxsT3JSZXF1ZXN0SGFuZGxlciBhcyBSZXF1ZXN0SGFuZGxlcikgOiBza2lsbE9yUmVxdWVzdEhhbmRsZXIgYXMgU2tpbGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGUgc2tpbGwgd2l0aCBhIGNvbnRyb2wtaW5wdXQgb2JqZWN0LlxuICAgICAqIFRoZSBjb250cm9sIGlucHV0IGlzIGZpcnN0IGNvbnZlcnRlZCB0byBhIFJlcXVlc3RFbnZlbG9wZShJbnRlbnRSZXF1ZXN0KVxuICAgICAqXG4gICAgICogQHBhcmFtIGlucHV0XG4gICAgICogQHJldHVybnMgW3Byb21wdCBzc21sIGlubmVyLXRleHQsIHJlcHJvbXB0IHNzbWwgaW5uZXItdGV4dF1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgaW52b2tlKGlucHV0OiBJQ29udHJvbElucHV0KTogUHJvbWlzZTxUZXN0UmVzcG9uc2VPYmplY3Q+IHtcbiAgICAgICAgY29uc3QgZW52ZWxvcGUgPSBpbnB1dC5oYW5kbGVySW5wdXQucmVxdWVzdEVudmVsb3BlO1xuICAgICAgICBlbnZlbG9wZS5zZXNzaW9uIS5hdHRyaWJ1dGVzID0gdGhpcy5zZXNzaW9uQXR0cmlidXRlczsgLy8gcG9wdWxhdGUgc2F2ZWQgc3RhdGVcblxuICAgICAgICAvLyAqKioqKioqKioqIElOVk9LRSBTS0lMTCAqKioqKioqKioqKioqKioqXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlRW52ZWxvcGUgPSBhd2FpdCB0aGlzLnNraWxsLmludm9rZShlbnZlbG9wZSwgdW5kZWZpbmVkKTtcblxuICAgICAgICB0aGlzLnNlc3Npb25BdHRyaWJ1dGVzID0gcmVzcG9uc2VFbnZlbG9wZS5zZXNzaW9uQXR0cmlidXRlczsgLy8gc2F2ZSB1cGRhdGVkIHN0YXRlXG5cbiAgICAgICAgY29uc3QgcHJvbXB0U1NNTCA9IChyZXNwb25zZUVudmVsb3BlLnJlc3BvbnNlLm91dHB1dFNwZWVjaCBhcyB1aS5Tc21sT3V0cHV0U3BlZWNoKS5zc21sO1xuICAgICAgICBjb25zdCBwcm9tcHQgPSBwcm9tcHRTU01MLnJlcGxhY2UoJzxzcGVhaz4nLCAnJykucmVwbGFjZSgnPC9zcGVhaz4nLCAnJyk7XG5cbiAgICAgICAgY29uc3QgcmVwcm9tcHRTU01MID0gKChyZXNwb25zZUVudmVsb3BlLnJlc3BvbnNlLnJlcHJvbXB0IGFzIHVpLlJlcHJvbXB0KS5vdXRwdXRTcGVlY2ggYXMgdWkuU3NtbE91dHB1dFNwZWVjaCkuc3NtbDtcbiAgICAgICAgY29uc3QgcmVwcm9tcHQgPSByZXByb21wdFNTTUwucmVwbGFjZSgnPHNwZWFrPicsICcnKS5yZXBsYWNlKCc8L3NwZWFrPicsICcnKTtcblxuICAgICAgICBjb25zdCBkaXJlY3RpdmU6IERpcmVjdGl2ZVtdIHwgdW5kZWZpbmVkID0gcmVzcG9uc2VFbnZlbG9wZS5yZXNwb25zZS5kaXJlY3RpdmVzO1xuICAgICAgICAvLyBjb25zdCBjYXJkQ29udGVudCA9IChyZXNwb25zZUVudi5yZXNwb25zZS5jYXJkIGFzIHVpLlNpbXBsZUNhcmQpLmNvbnRlbnQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXNwb25zZUVudmVsb3BlLFxuICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlRW52ZWxvcGUucmVzcG9uc2UsXG4gICAgICAgICAgICBwcm9tcHQsXG4gICAgICAgICAgICByZXByb21wdCxcbiAgICAgICAgICAgIGRpcmVjdGl2ZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RSZXNwb25zZU9iamVjdCB7XG4gICAgcmVzcG9uc2VFbnZlbG9wZTogUmVzcG9uc2VFbnZlbG9wZSxcbiAgICByZXNwb25zZTogUmVzcG9uc2UsXG4gICAgcHJvbXB0OiBzdHJpbmcsXG4gICAgcmVwcm9tcHQ/OiBzdHJpbmcsXG4gICAgZGlyZWN0aXZlPzogRGlyZWN0aXZlW11cbn1cbiJdfQ==