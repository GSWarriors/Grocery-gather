import { Intent, Slot } from "ask-sdk-model";
export declare class IntentBuilder {
    static of(name: string, slotValues?: {
        [k: string]: any;
    }): Intent;
}
export interface SlotResolutionValue {
    slotValue: string;
    isEntityResolutionMatch: boolean;
}
export declare class SimplifiedIntent {
    readonly name: string;
    readonly slotResolutions: {
        [k: string]: SlotResolutionValue | undefined;
    };
    constructor(name: string, slotResolutions: {
        [k: string]: SlotResolutionValue | undefined;
    });
    static fromIntent(intent: Intent): SimplifiedIntent;
    toString(): string;
}
/**
 * If there is an ER-Success, this returns the canonical value id of the first match resolution along with
 * isEntityResolutionMatch: boolean to indicate the status of ER_SUCCESS_MATCH
 * Otherwise this returns the object of literal slot value and isEntityResolutionMatch set to false.
 *
 * @param slot
 */
export declare function getSlotResolutions(slot: Slot | undefined): SlotResolutionValue | undefined;
export declare class SimplifiedMVSIntent {
    readonly name: string;
    readonly slotResolutions: {
        [k: string]: SlotResolutionValue | SlotResolutionValue[] | undefined;
    };
    constructor(name: string, slotResolutions: {
        [k: string]: SlotResolutionValue | SlotResolutionValue[] | undefined;
    });
    static fromIntent(intent: Intent): SimplifiedMVSIntent;
    toString(): string;
}
/**
 * If there is an ER-Success, this returns the canonical value id of the first match resolution along with
 * isEntityResolutionMatch: boolean to indicate the status of ER_SUCCESS_MATCH
 * Otherwise this returns the object of literal slot value and isEntityResolutionMatch set to false.
 *
 * @param slot
 */
export declare function getMVSSlotResolutions(slot: Slot | undefined): SlotResolutionValue | SlotResolutionValue[] | undefined;
//# sourceMappingURL=IntentUtils.d.ts.map