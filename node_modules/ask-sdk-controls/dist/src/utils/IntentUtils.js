"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMVSSlotResolutions = exports.SimplifiedMVSIntent = exports.getSlotResolutions = exports.SimplifiedIntent = exports.IntentBuilder = void 0;
class IntentBuilder {
    static of(name, slotValues) {
        const intent = {
            name,
            confirmationStatus: 'NONE',
            slots: {}
        };
        for (const prop of Object.entries(slotValues !== null && slotValues !== void 0 ? slotValues : {})) {
            const name = prop[0];
            const value = prop[1];
            if (Array.isArray(value)) {
                if (value.length === 0) {
                    throw new Error('Slot of empty-array is not supported');
                }
                // Multi-value slot
                intent.slots[name] = {
                    name,
                    slotValue: {
                        type: 'List',
                        values: value.map(item => ({
                            type: 'Simple',
                            value: item
                        }))
                    },
                    confirmationStatus: 'NONE'
                };
            }
            else {
                // Single-value slot
                intent.slots[name] = {
                    name,
                    value: value !== undefined ? value : '',
                    confirmationStatus: 'NONE'
                };
            }
        }
        return intent;
    }
}
exports.IntentBuilder = IntentBuilder;
// TODO:retire this class once SimplifiedMVSIntent is covering all cases successfully.
class SimplifiedIntent {
    constructor(name, slotResolutions) {
        this.name = name;
        this.slotResolutions = slotResolutions;
    }
    static fromIntent(intent) {
        const slotResolutions = {};
        if (intent.slots) {
            for (const [name, slot] of Object.entries(intent.slots)) {
                const slotObject = getSlotResolutions(slot);
                if (Array.isArray(slotObject)) {
                    throw new Error("Slot is multi-valued.  Use SimplifiedMVSIntent");
                }
                else {
                    slotResolutions[name] = slotObject !== undefined ? slotObject : undefined;
                }
            }
        }
        return new SimplifiedIntent(intent.name, slotResolutions);
    }
    toString() {
        return JSON.stringify(this);
    }
}
exports.SimplifiedIntent = SimplifiedIntent;
// TODO:retire this func once SimplifiedMVSIntent is covering all cases successfully.
/**
 * If there is an ER-Success, this returns the canonical value id of the first match resolution along with
 * isEntityResolutionMatch: boolean to indicate the status of ER_SUCCESS_MATCH
 * Otherwise this returns the object of literal slot value and isEntityResolutionMatch set to false.
 *
 * @param slot
 */
function getSlotResolutions(slot) {
    if (slot === undefined || slot.value === undefined || slot.value.length === 0) {
        return undefined;
    }
    // regular single-value handling
    if (slot.resolutions && slot.resolutions.resolutionsPerAuthority && slot.resolutions.resolutionsPerAuthority.length > 0) {
        for (const resolutionsPerAuthority of slot.resolutions.resolutionsPerAuthority) {
            if (resolutionsPerAuthority.status.code === 'ER_SUCCESS_MATCH') {
                return { slotValue: resolutionsPerAuthority.values[0].value.id, isEntityResolutionMatch: true };
            }
        }
    }
    return { slotValue: slot.value, isEntityResolutionMatch: false };
}
exports.getSlotResolutions = getSlotResolutions;
// ---- MVS support ----
class SimplifiedMVSIntent {
    constructor(name, slotResolutions) {
        this.name = name;
        this.slotResolutions = slotResolutions;
    }
    static fromIntent(intent) {
        const slotResolutions = {};
        if (intent.slots) {
            for (const [name, slot] of Object.entries(intent.slots)) {
                const slotObject = getMVSSlotResolutions(slot);
                slotResolutions[name] = slotObject !== undefined ? slotObject : undefined;
            }
        }
        return new SimplifiedMVSIntent(intent.name, slotResolutions);
    }
    toString() {
        return JSON.stringify(this);
    }
}
exports.SimplifiedMVSIntent = SimplifiedMVSIntent;
/**
 * If there is an ER-Success, this returns the canonical value id of the first match resolution along with
 * isEntityResolutionMatch: boolean to indicate the status of ER_SUCCESS_MATCH
 * Otherwise this returns the object of literal slot value and isEntityResolutionMatch set to false.
 *
 * @param slot
 */
function getMVSSlotResolutions(slot) {
    if (slot === undefined) {
        return undefined;
    }
    {
        // handling for MVS which isn't in ask-sdk yet.
        const slotValue = slot.slotValue;
        // eslint-disable-next-line no-empty
        if (slotValue !== undefined && slotValue.type === 'List' && slotValue.values.length > 0) {
            const slotValuesAsSlots = slotValue.values;
            const values = slotValuesAsSlots.map(slot => {
                var _a, _b, _c;
                if (slot.resolutions && slot.resolutions.resolutionsPerAuthority && slot.resolutions.resolutionsPerAuthority.length > 0) {
                    for (const resolutionsPerAuthority of slot.resolutions.resolutionsPerAuthority) {
                        if (resolutionsPerAuthority.status.code === 'ER_SUCCESS_MATCH') {
                            return { slotValue: resolutionsPerAuthority.values[0].value.id, isEntityResolutionMatch: true };
                        }
                        else {
                            return { slotValue: (_a = slot.value) !== null && _a !== void 0 ? _a : "", isEntityResolutionMatch: false };
                        }
                    }
                    return { slotValue: (_b = slot.value) !== null && _b !== void 0 ? _b : "", isEntityResolutionMatch: false };
                }
                else {
                    return { slotValue: (_c = slot.value) !== null && _c !== void 0 ? _c : "", isEntityResolutionMatch: false };
                }
            });
            return values;
        }
    }
    if (slot.value === undefined || slot.value.length === 0) {
        return undefined;
    }
    // regular single-value handling
    if (slot.resolutions && slot.resolutions.resolutionsPerAuthority && slot.resolutions.resolutionsPerAuthority.length > 0) {
        for (const resolutionsPerAuthority of slot.resolutions.resolutionsPerAuthority) {
            if (resolutionsPerAuthority.status.code === 'ER_SUCCESS_MATCH') {
                return { slotValue: resolutionsPerAuthority.values[0].value.id, isEntityResolutionMatch: true };
            }
        }
    }
    return { slotValue: slot.value, isEntityResolutionMatch: false };
}
exports.getMVSSlotResolutions = getMVSSlotResolutions;
//# sourceMappingURL=data:application/json;base64,