"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputUtil = void 0;
const Strings_1 = require("../constants/Strings");
const SingleValueControlIntent_1 = require("../intents/SingleValueControlIntent");
const AmazonBuiltInIntent_1 = require("../intents/AmazonBuiltInIntent");
const GeneralControlIntent_1 = require("../intents/GeneralControlIntent");
var InputUtil;
(function (InputUtil) {
    /**
     * Test and assert if an object looks like an Intent.
     * (user-defined type guard)
     */
    function isIntentShape(x) {
        return (x.name !== undefined && x.confirmationStatus);
    }
    InputUtil.isIntentShape = isIntentShape;
    function isLaunchRequest(input) {
        return input.request.type === 'LaunchRequest';
    }
    InputUtil.isLaunchRequest = isLaunchRequest;
    function isSessionEndedRequest(input) {
        return input.request.type === 'SessionEndedRequest';
    }
    InputUtil.isSessionEndedRequest = isSessionEndedRequest;
    function isIntent(input, intentName) {
        return input.request.type === 'IntentRequest' && input.request.intent.name === intentName;
    }
    InputUtil.isIntent = isIntent;
    function isSingleValueControlIntent(input, slotType) {
        return input.request.type === 'IntentRequest' && input.request.intent.name === SingleValueControlIntent_1.SingleValueControlIntent.intentName(slotType);
    }
    InputUtil.isSingleValueControlIntent = isSingleValueControlIntent;
    function isFallbackIntent(input) {
        return input.request.type === 'IntentRequest' && input.request.intent.name === 'AMAZON.FallbackIntent';
    }
    InputUtil.isFallbackIntent = isFallbackIntent;
    function isAPLUserEventWithArgs(input) {
        return input.request.type === 'Alexa.Presentation.APL.UserEvent' && input.request.arguments !== undefined && input.request.arguments.length > 0;
    }
    InputUtil.isAPLUserEventWithArgs = isAPLUserEventWithArgs;
    function isAPLUserEventWithMatchingControlId(input, controlId) {
        return isAPLUserEventWithArgs(input) && (input.request.arguments[0] === controlId);
    }
    InputUtil.isAPLUserEventWithMatchingControlId = isAPLUserEventWithMatchingControlId;
    function feedbackIsTrue(feedback) {
        return (feedback === Strings_1.Strings.Feedback.Affirm);
    }
    InputUtil.feedbackIsTrue = feedbackIsTrue;
    function feedbackIsFalse(feedback) {
        return (feedback === Strings_1.Strings.Feedback.Disaffirm);
    }
    InputUtil.feedbackIsFalse = feedbackIsFalse;
    function feedbackIsUndefined(feedback) {
        return (feedback === undefined);
    }
    InputUtil.feedbackIsUndefined = feedbackIsUndefined;
    function feedbackIsMatchOrUndefined(feedback, feedbackIds) {
        return slotIsUndefinedOrMatch(feedback, feedbackIds);
    }
    InputUtil.feedbackIsMatchOrUndefined = feedbackIsMatchOrUndefined;
    function slotIsUndefinedOrMatch(slotValue, expectedValues) {
        return slotValue === undefined || expectedValues.includes(slotValue);
    }
    InputUtil.slotIsUndefinedOrMatch = slotIsUndefinedOrMatch;
    function actionIsSetOrUndefined(action, slotValueIdsForSet) {
        return slotIsUndefinedOrMatch(action, slotValueIdsForSet);
    }
    InputUtil.actionIsSetOrUndefined = actionIsSetOrUndefined;
    function actionIsMatch(action, slotValueIdsForChange) {
        return action !== undefined && slotValueIdsForChange.includes(action);
    }
    InputUtil.actionIsMatch = actionIsMatch;
    function actionIsUndefined(action) {
        return action === undefined;
    }
    InputUtil.actionIsUndefined = actionIsUndefined;
    function targetIsMatch(target, targetIds) {
        return target !== undefined && targetIds.includes(target);
    }
    InputUtil.targetIsMatch = targetIsMatch;
    function targetIsUndefined(target) {
        return target === undefined;
    }
    InputUtil.targetIsUndefined = targetIsUndefined;
    function targetIsMatchOrUndefined(target, targetIds) {
        return slotIsUndefinedOrMatch(target, targetIds);
    }
    InputUtil.targetIsMatchOrUndefined = targetIsMatchOrUndefined;
    function actionIsMatchOrUndefined(action, actionIds) {
        return slotIsUndefinedOrMatch(action, actionIds);
    }
    InputUtil.actionIsMatchOrUndefined = actionIsMatchOrUndefined;
    function valueTypeMatch(valueType, expectedValueType) {
        return valueType !== undefined && valueType === expectedValueType;
    }
    InputUtil.valueTypeMatch = valueTypeMatch;
    function valueTypeIsUndefined(valueType) {
        return valueType === undefined;
    }
    InputUtil.valueTypeIsUndefined = valueTypeIsUndefined;
    function valueStrDefined(valueStr) {
        return valueStr !== undefined && valueStr !== '?'; // ? is produced if SlotElicitation on but value can't be parsed.
    }
    InputUtil.valueStrDefined = valueStrDefined;
    function valueStrIsUndefined(valueStr) {
        return valueStr === undefined || valueStr === '?'; // ? is produced if SlotElicitation on but value can't be parsed.
    }
    InputUtil.valueStrIsUndefined = valueStrIsUndefined;
    function isBareYes(input) {
        if (input.request.type !== 'IntentRequest') {
            return false;
        }
        else if (input.request.intent.name === AmazonBuiltInIntent_1.AmazonIntent.YesIntent) {
            return true;
        }
        else if (input.request.intent.name === GeneralControlIntent_1.GeneralControlIntent.name) {
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            if (feedback === Strings_1.Strings.Feedback.Affirm && action === undefined && target === undefined) {
                return true;
            }
        }
        return false;
    }
    InputUtil.isBareYes = isBareYes;
    function isBareNo(input) {
        if (input.request.type !== 'IntentRequest') {
            return false;
        }
        else if (input.request.intent.name === AmazonBuiltInIntent_1.AmazonIntent.NoIntent) {
            return true;
        }
        else if (input.request.intent.name === GeneralControlIntent_1.GeneralControlIntent.name) {
            const { feedback, action, target } = GeneralControlIntent_1.unpackGeneralControlIntent(input.request.intent);
            if (feedback === Strings_1.Strings.Feedback.Disaffirm && action === undefined && target === undefined) {
                return true;
            }
        }
        return false;
    }
    InputUtil.isBareNo = isBareNo;
    function getValueResolution(input) {
        const { valueStr, erMatch } = SingleValueControlIntent_1.unpackSingleValueControlIntent(input.request.intent);
        return { valueStr: valueStr, erMatch: erMatch };
    }
    InputUtil.getValueResolution = getValueResolution;
})(InputUtil = exports.InputUtil || (exports.InputUtil = {}));
//# sourceMappingURL=data:application/json;base64,