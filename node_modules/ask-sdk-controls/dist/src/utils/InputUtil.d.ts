import { ControlInput } from '../controls/ControlInput';
import { Intent } from 'ask-sdk-model';
export declare namespace InputUtil {
    /**
     * Test and assert if an object looks like an Intent.
     * (user-defined type guard)
     */
    function isIntentShape(x: any): x is Intent;
    function isLaunchRequest(input: ControlInput): boolean;
    function isSessionEndedRequest(input: ControlInput): boolean;
    function isIntent(input: ControlInput, intentName: string): boolean;
    function isSingleValueControlIntent(input: ControlInput, slotType: string): boolean;
    function isFallbackIntent(input: ControlInput): boolean;
    function isAPLUserEventWithArgs(input: ControlInput): boolean;
    function isAPLUserEventWithMatchingControlId(input: ControlInput, controlId: string): boolean;
    function feedbackIsTrue(feedback: string | undefined): boolean;
    function feedbackIsFalse(feedback: string | undefined): boolean;
    function feedbackIsUndefined(feedback: string | undefined): boolean;
    function feedbackIsMatchOrUndefined(feedback: string | undefined, feedbackIds: string[]): boolean;
    function slotIsUndefinedOrMatch(slotValue: string | undefined, expectedValues: string[]): boolean;
    function actionIsSetOrUndefined(action: string | undefined, slotValueIdsForSet: string[]): boolean;
    function actionIsMatch(action: string | undefined, slotValueIdsForChange: string[]): boolean;
    function actionIsUndefined(action: string | undefined): boolean;
    function targetIsMatch(target: string | undefined, targetIds: string[]): boolean;
    function targetIsUndefined(target: string | undefined): boolean;
    function targetIsMatchOrUndefined(target: string | undefined, targetIds: string[]): boolean;
    function actionIsMatchOrUndefined(action: string | undefined, actionIds: string[]): boolean;
    function valueTypeMatch(valueType: string | undefined, expectedValueType: string): boolean;
    function valueTypeIsUndefined(valueType: string | undefined): boolean;
    function valueStrDefined(valueStr: string | undefined): boolean;
    function valueStrIsUndefined(valueStr: string | undefined): boolean;
    function isBareYes(input: ControlInput): boolean;
    function isBareNo(input: ControlInput): boolean;
    function getValueResolution(input: ControlInput): {
        valueStr: string;
        erMatch: boolean;
    };
}
//# sourceMappingURL=InputUtil.d.ts.map