"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.falseIfGuardFailed = exports.failIf = exports.okIf = exports.GuardFailed = exports.StateConsistencyError = void 0;
class StateConsistencyError extends Error {
    constructor(message) {
        super(message);
        // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
        this.name = StateConsistencyError.name; // stack traces display correctly now 
    }
}
exports.StateConsistencyError = StateConsistencyError;
/**
 * An Error class used to short-circuit a set of predicate tests
 *
 * This error indicates that a "guard" expression did not pass.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
class GuardFailed extends Error {
    constructor(message) {
        super(message);
        // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
        this.name = GuardFailed.name; // stack traces display correctly now 
    }
}
exports.GuardFailed = GuardFailed;
/**
 * Allows normal code flow to proceed if predicate is true.
 *
 * If predicate is true, the code proceeds normally.
 * If false, an GuardFailed error is thrown.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
function okIf(predicate) {
    if (!predicate) {
        throw new GuardFailed('okIf failed. predicate===false.');
    }
}
exports.okIf = okIf;
/**
 * Aborts normal code flow if predicate is true.
 *
 * If predicate is true, an GuardFailed error is thrown.
 * If false, the code proceeds normally.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 * @param predicate
 */
function failIf(predicate) {
    if (predicate) {
        throw new GuardFailed('failIf triggered. predicate===true.');
    }
}
exports.failIf = failIf;
/**
 * Consumes an GuardFailed error but otherwise rethrows.
 *
 * Purpose:
 * * This helps to write predicate functions as a linear chain of individual tests.
 */
function falseIfGuardFailed(err) {
    if (err instanceof GuardFailed) {
        return false;
    }
    throw err; // otherwise rethrow
}
exports.falseIfGuardFailed = falseIfGuardFailed;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJlZGljYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9QcmVkaWNhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7O0FBSUgsTUFBYSxxQkFBc0IsU0FBUSxLQUFLO0lBQzVDLFlBQVksT0FBZ0I7UUFDeEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsMEVBQTBFO1FBQzFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQywwQkFBMEI7UUFDN0UsSUFBSSxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxzQ0FBc0M7SUFDbEYsQ0FBQztDQUNKO0FBUEQsc0RBT0M7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsTUFBYSxXQUFZLFNBQVEsS0FBSztJQUNsQyxZQUFZLE9BQWdCO1FBQ3hCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLDBFQUEwRTtRQUMxRSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO1FBQzdFLElBQUksQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLHNDQUFzQztJQUN4RSxDQUFDO0NBQ0o7QUFQRCxrQ0FPQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFDLFNBQWtCO0lBQ25DLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDWixNQUFNLElBQUksV0FBVyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7S0FDNUQ7QUFDTCxDQUFDO0FBSkQsb0JBSUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxTQUFnQixNQUFNLENBQUMsU0FBa0I7SUFDckMsSUFBSSxTQUFTLEVBQUU7UUFDWCxNQUFNLElBQUksV0FBVyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7S0FDaEU7QUFDTCxDQUFDO0FBSkQsd0JBSUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLGtCQUFrQixDQUFDLEdBQVU7SUFDekMsSUFBSSxHQUFHLFlBQVksV0FBVyxFQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBQ0QsTUFBTSxHQUFHLENBQUMsQ0FBQyxvQkFBb0I7QUFDbkMsQ0FBQztBQUxELGdEQUtDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE5IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5cbmV4cG9ydCBjbGFzcyBTdGF0ZUNvbnNpc3RlbmN5RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgLy8gc2VlOiB0eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9yZWxlYXNlLW5vdGVzL3R5cGVzY3JpcHQtMi0yLmh0bWxcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTsgLy8gcmVzdG9yZSBwcm90b3R5cGUgY2hhaW5cbiAgICAgICAgdGhpcy5uYW1lID0gU3RhdGVDb25zaXN0ZW5jeUVycm9yLm5hbWU7IC8vIHN0YWNrIHRyYWNlcyBkaXNwbGF5IGNvcnJlY3RseSBub3cgXG4gICAgfVxufVxuXG4vKipcbiAqIEFuIEVycm9yIGNsYXNzIHVzZWQgdG8gc2hvcnQtY2lyY3VpdCBhIHNldCBvZiBwcmVkaWNhdGUgdGVzdHNcbiAqIFxuICogVGhpcyBlcnJvciBpbmRpY2F0ZXMgdGhhdCBhIFwiZ3VhcmRcIiBleHByZXNzaW9uIGRpZCBub3QgcGFzcy5cbiAqIFxuICogUHVycG9zZTpcbiAqICogVGhpcyBoZWxwcyB0byB3cml0ZSBwcmVkaWNhdGUgZnVuY3Rpb25zIGFzIGEgbGluZWFyIGNoYWluIG9mIGluZGl2aWR1YWwgdGVzdHMuIFxuICovXG5leHBvcnQgY2xhc3MgR3VhcmRGYWlsZWQgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgLy8gc2VlOiB0eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9yZWxlYXNlLW5vdGVzL3R5cGVzY3JpcHQtMi0yLmh0bWxcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTsgLy8gcmVzdG9yZSBwcm90b3R5cGUgY2hhaW5cbiAgICAgICAgdGhpcy5uYW1lID0gR3VhcmRGYWlsZWQubmFtZTsgLy8gc3RhY2sgdHJhY2VzIGRpc3BsYXkgY29ycmVjdGx5IG5vdyBcbiAgICB9XG59XG5cbi8qKlxuICogQWxsb3dzIG5vcm1hbCBjb2RlIGZsb3cgdG8gcHJvY2VlZCBpZiBwcmVkaWNhdGUgaXMgdHJ1ZS5cbiAqXG4gKiBJZiBwcmVkaWNhdGUgaXMgdHJ1ZSwgdGhlIGNvZGUgcHJvY2VlZHMgbm9ybWFsbHkuXG4gKiBJZiBmYWxzZSwgYW4gR3VhcmRGYWlsZWQgZXJyb3IgaXMgdGhyb3duLlxuICogXG4gKiBQdXJwb3NlOlxuICogKiBUaGlzIGhlbHBzIHRvIHdyaXRlIHByZWRpY2F0ZSBmdW5jdGlvbnMgYXMgYSBsaW5lYXIgY2hhaW4gb2YgaW5kaXZpZHVhbCB0ZXN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9rSWYocHJlZGljYXRlOiBib29sZWFuKSB7XG4gICAgaWYgKCFwcmVkaWNhdGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEd1YXJkRmFpbGVkKCdva0lmIGZhaWxlZC4gcHJlZGljYXRlPT09ZmFsc2UuJyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFib3J0cyBub3JtYWwgY29kZSBmbG93IGlmIHByZWRpY2F0ZSBpcyB0cnVlLlxuICpcbiAqIElmIHByZWRpY2F0ZSBpcyB0cnVlLCBhbiBHdWFyZEZhaWxlZCBlcnJvciBpcyB0aHJvd24uXG4gKiBJZiBmYWxzZSwgdGhlIGNvZGUgcHJvY2VlZHMgbm9ybWFsbHkuXG4gKiBcbiAqIFB1cnBvc2U6XG4gKiAqIFRoaXMgaGVscHMgdG8gd3JpdGUgcHJlZGljYXRlIGZ1bmN0aW9ucyBhcyBhIGxpbmVhciBjaGFpbiBvZiBpbmRpdmlkdWFsIHRlc3RzLlxuICogQHBhcmFtIHByZWRpY2F0ZSBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZhaWxJZihwcmVkaWNhdGU6IGJvb2xlYW4pIHtcbiAgICBpZiAocHJlZGljYXRlKSB7XG4gICAgICAgIHRocm93IG5ldyBHdWFyZEZhaWxlZCgnZmFpbElmIHRyaWdnZXJlZC4gcHJlZGljYXRlPT09dHJ1ZS4nKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ29uc3VtZXMgYW4gR3VhcmRGYWlsZWQgZXJyb3IgYnV0IG90aGVyd2lzZSByZXRocm93cy5cbiAqIFxuICogUHVycG9zZTpcbiAqICogVGhpcyBoZWxwcyB0byB3cml0ZSBwcmVkaWNhdGUgZnVuY3Rpb25zIGFzIGEgbGluZWFyIGNoYWluIG9mIGluZGl2aWR1YWwgdGVzdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmYWxzZUlmR3VhcmRGYWlsZWQoZXJyOiBFcnJvcik6IGZhbHNlIHtcbiAgICBpZiAoZXJyIGluc3RhbmNlb2YgR3VhcmRGYWlsZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aHJvdyBlcnI7IC8vIG90aGVyd2lzZSByZXRocm93XG59XG4iXX0=